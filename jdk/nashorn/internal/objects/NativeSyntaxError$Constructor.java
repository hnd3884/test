package jdk.nashorn.internal.objects;

import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.invoke.MethodHandle;
import jdk.nashorn.internal.runtime.PrototypeObject;
import jdk.nashorn.internal.runtime.Specialization;
import jdk.nashorn.internal.runtime.ScriptFunction;

final class NativeSyntaxError$Constructor extends ScriptFunction
{
    NativeSyntaxError$Constructor() {
        super("SyntaxError", /* ldc_method_handle(!) */ProcyonConstantHelper_16f.HANDLE, (Specialization[])null);
        final NativeSyntaxError$Prototype nativeSyntaxError$Prototype = new NativeSyntaxError$Prototype();
        PrototypeObject.setConstructor(nativeSyntaxError$Prototype, this);
        this.setPrototype(nativeSyntaxError$Prototype);
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_16f__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_16f
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(NativeSyntaxError.class, boolean.class, Object.class, Object.class);
            try {
                handle = NativeSyntaxError$Constructor.__PROCYON__LOOKUP_16f__.findStatic(NativeSyntaxError.class, "constructor", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_16f.HANDLE = handle;
        }
    }
}
