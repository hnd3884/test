package jdk.nashorn.internal.objects;

import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.invoke.MethodHandle;
import jdk.nashorn.internal.runtime.PrototypeObject;
import jdk.nashorn.internal.runtime.Specialization;
import jdk.nashorn.internal.runtime.Property;
import java.util.Collection;
import jdk.nashorn.internal.runtime.AccessorProperty;
import java.util.ArrayList;
import jdk.nashorn.internal.runtime.PropertyMap;
import jdk.nashorn.internal.runtime.ScriptFunction;

final class NativeArray$Constructor extends ScriptFunction
{
    private Object isArray;
    private static final PropertyMap $nasgenmap$;
    
    public Object G$isArray() {
        return this.isArray;
    }
    
    public void S$isArray(final Object isArray) {
        this.isArray = isArray;
    }
    
    static {
        final ArrayList properties = new ArrayList(1);
        properties.add(AccessorProperty.create("isArray", 2, /* ldc_method_handle(!) */ProcyonConstantHelper_15.HANDLE, /* ldc_method_handle(!) */ProcyonConstantHelper_16.HANDLE));
        $nasgenmap$ = PropertyMap.newMap(properties);
    }
    
    NativeArray$Constructor() {
        super("Array", /* ldc_method_handle(!) */ProcyonConstantHelper_17.HANDLE, NativeArray$Constructor.$nasgenmap$, new Specialization[] { new Specialization(/* ldc_method_handle(!) */ProcyonConstantHelper_18.HANDLE, false), new Specialization(/* ldc_method_handle(!) */ProcyonConstantHelper_19.HANDLE, false), new Specialization(/* ldc_method_handle(!) */ProcyonConstantHelper_1a.HANDLE, false), new Specialization(/* ldc_method_handle(!) */ProcyonConstantHelper_1b.HANDLE, false), new Specialization(/* ldc_method_handle(!) */ProcyonConstantHelper_1c.HANDLE, false) });
        this.isArray = ScriptFunction.createBuiltin("isArray", /* ldc_method_handle(!) */ProcyonConstantHelper_1d.HANDLE);
        final NativeArray$Prototype nativeArray$Prototype = new NativeArray$Prototype();
        PrototypeObject.setConstructor(nativeArray$Prototype, this);
        this.setPrototype(nativeArray$Prototype);
        this.setArity(1);
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_15__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_15
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class);
            try {
                handle = NativeArray$Constructor.__PROCYON__LOOKUP_15__.findVirtual(NativeArray$Constructor.class, "G$isArray", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_15.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_16__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_16
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(void.class, Object.class);
            try {
                handle = NativeArray$Constructor.__PROCYON__LOOKUP_16__.findVirtual(NativeArray$Constructor.class, "S$isArray", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_16.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_17__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_17
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(NativeArray.class, boolean.class, Object.class, Object[].class);
            try {
                handle = NativeArray$Constructor.__PROCYON__LOOKUP_17__.findStatic(NativeArray.class, "construct", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_17.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_18__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_18
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(NativeArray.class, boolean.class, Object.class);
            try {
                handle = NativeArray$Constructor.__PROCYON__LOOKUP_18__.findStatic(NativeArray.class, "construct", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_18.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_19__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_19
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class, boolean.class, Object.class, boolean.class);
            try {
                handle = NativeArray$Constructor.__PROCYON__LOOKUP_19__.findStatic(NativeArray.class, "construct", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_19.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_1a__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_1a
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(NativeArray.class, boolean.class, Object.class, int.class);
            try {
                handle = NativeArray$Constructor.__PROCYON__LOOKUP_1a__.findStatic(NativeArray.class, "construct", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_1a.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_1b__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_1b
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(NativeArray.class, boolean.class, Object.class, long.class);
            try {
                handle = NativeArray$Constructor.__PROCYON__LOOKUP_1b__.findStatic(NativeArray.class, "construct", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_1b.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_1c__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_1c
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(NativeArray.class, boolean.class, Object.class, double.class);
            try {
                handle = NativeArray$Constructor.__PROCYON__LOOKUP_1c__.findStatic(NativeArray.class, "construct", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_1c.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_1d__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_1d
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(boolean.class, Object.class, Object.class);
            try {
                handle = NativeArray$Constructor.__PROCYON__LOOKUP_1d__.findStatic(NativeArray.class, "isArray", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_1d.HANDLE = handle;
        }
    }
}
