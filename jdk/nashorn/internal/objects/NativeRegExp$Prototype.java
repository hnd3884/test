package jdk.nashorn.internal.objects;

import jdk.nashorn.internal.runtime.ScriptObject;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.invoke.MethodHandle;
import jdk.nashorn.internal.runtime.ScriptFunction;
import jdk.nashorn.internal.runtime.Property;
import java.util.Collection;
import jdk.nashorn.internal.runtime.AccessorProperty;
import java.util.ArrayList;
import jdk.nashorn.internal.runtime.PropertyMap;
import jdk.nashorn.internal.runtime.PrototypeObject;

final class NativeRegExp$Prototype extends PrototypeObject
{
    private Object compile;
    private Object exec;
    private Object test;
    private Object toString;
    private static final PropertyMap $nasgenmap$;
    
    public Object G$compile() {
        return this.compile;
    }
    
    public void S$compile(final Object compile) {
        this.compile = compile;
    }
    
    public Object G$exec() {
        return this.exec;
    }
    
    public void S$exec(final Object exec) {
        this.exec = exec;
    }
    
    public Object G$test() {
        return this.test;
    }
    
    public void S$test(final Object test) {
        this.test = test;
    }
    
    public Object G$toString() {
        return this.toString;
    }
    
    public void S$toString(final Object toString) {
        this.toString = toString;
    }
    
    static {
        final ArrayList properties = new ArrayList(4);
        properties.add(AccessorProperty.create("compile", 2, /* ldc_method_handle(!) */ProcyonConstantHelper_14d.HANDLE, /* ldc_method_handle(!) */ProcyonConstantHelper_14e.HANDLE));
        properties.add(AccessorProperty.create("exec", 2, /* ldc_method_handle(!) */ProcyonConstantHelper_14f.HANDLE, /* ldc_method_handle(!) */ProcyonConstantHelper_150.HANDLE));
        properties.add(AccessorProperty.create("test", 2, /* ldc_method_handle(!) */ProcyonConstantHelper_151.HANDLE, /* ldc_method_handle(!) */ProcyonConstantHelper_152.HANDLE));
        properties.add(AccessorProperty.create("toString", 2, /* ldc_method_handle(!) */ProcyonConstantHelper_153.HANDLE, /* ldc_method_handle(!) */ProcyonConstantHelper_154.HANDLE));
        $nasgenmap$ = PropertyMap.newMap(properties);
    }
    
    NativeRegExp$Prototype() {
        super(NativeRegExp$Prototype.$nasgenmap$);
        this.compile = ScriptFunction.createBuiltin("compile", /* ldc_method_handle(!) */ProcyonConstantHelper_155.HANDLE);
        this.exec = ScriptFunction.createBuiltin("exec", /* ldc_method_handle(!) */ProcyonConstantHelper_156.HANDLE);
        this.test = ScriptFunction.createBuiltin("test", /* ldc_method_handle(!) */ProcyonConstantHelper_157.HANDLE);
        this.toString = ScriptFunction.createBuiltin("toString", /* ldc_method_handle(!) */ProcyonConstantHelper_158.HANDLE);
    }
    
    @Override
    public String getClassName() {
        return "RegExp";
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_14d__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_14d
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class);
            try {
                handle = NativeRegExp$Prototype.__PROCYON__LOOKUP_14d__.findVirtual(NativeRegExp$Prototype.class, "G$compile", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_14d.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_14e__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_14e
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(void.class, Object.class);
            try {
                handle = NativeRegExp$Prototype.__PROCYON__LOOKUP_14e__.findVirtual(NativeRegExp$Prototype.class, "S$compile", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_14e.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_14f__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_14f
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class);
            try {
                handle = NativeRegExp$Prototype.__PROCYON__LOOKUP_14f__.findVirtual(NativeRegExp$Prototype.class, "G$exec", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_14f.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_150__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_150
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(void.class, Object.class);
            try {
                handle = NativeRegExp$Prototype.__PROCYON__LOOKUP_150__.findVirtual(NativeRegExp$Prototype.class, "S$exec", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_150.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_151__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_151
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class);
            try {
                handle = NativeRegExp$Prototype.__PROCYON__LOOKUP_151__.findVirtual(NativeRegExp$Prototype.class, "G$test", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_151.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_152__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_152
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(void.class, Object.class);
            try {
                handle = NativeRegExp$Prototype.__PROCYON__LOOKUP_152__.findVirtual(NativeRegExp$Prototype.class, "S$test", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_152.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_153__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_153
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class);
            try {
                handle = NativeRegExp$Prototype.__PROCYON__LOOKUP_153__.findVirtual(NativeRegExp$Prototype.class, "G$toString", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_153.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_154__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_154
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(void.class, Object.class);
            try {
                handle = NativeRegExp$Prototype.__PROCYON__LOOKUP_154__.findVirtual(NativeRegExp$Prototype.class, "S$toString", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_154.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_155__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_155
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(ScriptObject.class, Object.class, Object.class, Object.class);
            try {
                handle = NativeRegExp$Prototype.__PROCYON__LOOKUP_155__.findStatic(NativeRegExp.class, "compile", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_155.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_156__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_156
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(ScriptObject.class, Object.class, Object.class);
            try {
                handle = NativeRegExp$Prototype.__PROCYON__LOOKUP_156__.findStatic(NativeRegExp.class, "exec", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_156.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_157__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_157
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(boolean.class, Object.class, Object.class);
            try {
                handle = NativeRegExp$Prototype.__PROCYON__LOOKUP_157__.findStatic(NativeRegExp.class, "test", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_157.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_158__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_158
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(String.class, Object.class);
            try {
                handle = NativeRegExp$Prototype.__PROCYON__LOOKUP_158__.findStatic(NativeRegExp.class, "toString", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_158.HANDLE = handle;
        }
    }
}
