package jdk.nashorn.internal.objects;

import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.invoke.MethodHandle;
import jdk.nashorn.internal.runtime.PrototypeObject;
import jdk.nashorn.internal.runtime.Specialization;
import jdk.nashorn.internal.runtime.Property;
import java.util.Collection;
import jdk.nashorn.internal.runtime.AccessorProperty;
import java.util.ArrayList;
import jdk.nashorn.internal.runtime.PropertyMap;
import jdk.nashorn.internal.runtime.ScriptFunction;

final class NativeError$Constructor extends ScriptFunction
{
    private Object captureStackTrace;
    private Object dumpStack;
    private static final PropertyMap $nasgenmap$;
    
    public Object G$captureStackTrace() {
        return this.captureStackTrace;
    }
    
    public void S$captureStackTrace(final Object captureStackTrace) {
        this.captureStackTrace = captureStackTrace;
    }
    
    public Object G$dumpStack() {
        return this.dumpStack;
    }
    
    public void S$dumpStack(final Object dumpStack) {
        this.dumpStack = dumpStack;
    }
    
    static {
        final ArrayList properties = new ArrayList(2);
        properties.add(AccessorProperty.create("captureStackTrace", 2, /* ldc_method_handle(!) */ProcyonConstantHelper_5d.HANDLE, /* ldc_method_handle(!) */ProcyonConstantHelper_5e.HANDLE));
        properties.add(AccessorProperty.create("dumpStack", 2, /* ldc_method_handle(!) */ProcyonConstantHelper_5f.HANDLE, /* ldc_method_handle(!) */ProcyonConstantHelper_60.HANDLE));
        $nasgenmap$ = PropertyMap.newMap(properties);
    }
    
    NativeError$Constructor() {
        super("Error", /* ldc_method_handle(!) */ProcyonConstantHelper_61.HANDLE, NativeError$Constructor.$nasgenmap$, (Specialization[])null);
        this.captureStackTrace = ScriptFunction.createBuiltin("captureStackTrace", /* ldc_method_handle(!) */ProcyonConstantHelper_62.HANDLE);
        this.dumpStack = ScriptFunction.createBuiltin("dumpStack", /* ldc_method_handle(!) */ProcyonConstantHelper_63.HANDLE);
        final NativeError$Prototype nativeError$Prototype = new NativeError$Prototype();
        PrototypeObject.setConstructor(nativeError$Prototype, this);
        this.setPrototype(nativeError$Prototype);
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_5d__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_5d
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class);
            try {
                handle = NativeError$Constructor.__PROCYON__LOOKUP_5d__.findVirtual(NativeError$Constructor.class, "G$captureStackTrace", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_5d.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_5e__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_5e
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(void.class, Object.class);
            try {
                handle = NativeError$Constructor.__PROCYON__LOOKUP_5e__.findVirtual(NativeError$Constructor.class, "S$captureStackTrace", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_5e.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_5f__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_5f
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class);
            try {
                handle = NativeError$Constructor.__PROCYON__LOOKUP_5f__.findVirtual(NativeError$Constructor.class, "G$dumpStack", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_5f.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_60__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_60
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(void.class, Object.class);
            try {
                handle = NativeError$Constructor.__PROCYON__LOOKUP_60__.findVirtual(NativeError$Constructor.class, "S$dumpStack", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_60.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_61__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_61
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(NativeError.class, boolean.class, Object.class, Object.class);
            try {
                handle = NativeError$Constructor.__PROCYON__LOOKUP_61__.findStatic(NativeError.class, "constructor", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_61.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_62__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_62
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class, Object.class, Object.class);
            try {
                handle = NativeError$Constructor.__PROCYON__LOOKUP_62__.findStatic(NativeError.class, "captureStackTrace", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_62.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_63__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_63
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class, Object.class);
            try {
                handle = NativeError$Constructor.__PROCYON__LOOKUP_63__.findStatic(NativeError.class, "dumpStack", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_63.HANDLE = handle;
        }
    }
}
