package jdk.nashorn.internal.objects;

import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import jdk.nashorn.internal.runtime.PrototypeObject;
import jdk.nashorn.internal.runtime.Specialization;
import jdk.nashorn.internal.runtime.Property;
import java.util.Collection;
import java.lang.invoke.MethodHandle;
import jdk.nashorn.internal.runtime.AccessorProperty;
import java.util.ArrayList;
import jdk.nashorn.internal.runtime.PropertyMap;
import jdk.nashorn.internal.runtime.ScriptFunction;

final class NativeInt32Array$Constructor extends ScriptFunction
{
    private static final PropertyMap $nasgenmap$;
    
    public int G$BYTES_PER_ELEMENT() {
        return NativeInt32Array.BYTES_PER_ELEMENT;
    }
    
    static {
        final ArrayList properties = new ArrayList(1);
        properties.add(AccessorProperty.create("BYTES_PER_ELEMENT", 7, /* ldc_method_handle(!) */ProcyonConstantHelper_a2.HANDLE, (MethodHandle)null));
        $nasgenmap$ = PropertyMap.newMap(properties);
    }
    
    NativeInt32Array$Constructor() {
        super("Int32Array", /* ldc_method_handle(!) */ProcyonConstantHelper_a3.HANDLE, NativeInt32Array$Constructor.$nasgenmap$, (Specialization[])null);
        final NativeInt32Array$Prototype nativeInt32Array$Prototype = new NativeInt32Array$Prototype();
        PrototypeObject.setConstructor(nativeInt32Array$Prototype, this);
        this.setPrototype(nativeInt32Array$Prototype);
        this.setArity(1);
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_a2__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_a2
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(int.class);
            try {
                handle = NativeInt32Array$Constructor.__PROCYON__LOOKUP_a2__.findVirtual(NativeInt32Array$Constructor.class, "G$BYTES_PER_ELEMENT", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_a2.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_a3__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_a3
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(NativeInt32Array.class, boolean.class, Object.class, Object[].class);
            try {
                handle = NativeInt32Array$Constructor.__PROCYON__LOOKUP_a3__.findStatic(NativeInt32Array.class, "constructor", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_a3.HANDLE = handle;
        }
    }
}
