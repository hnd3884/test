package jdk.nashorn.internal.objects;

import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.invoke.MethodHandle;
import jdk.nashorn.internal.runtime.Property;
import java.util.Collection;
import jdk.nashorn.internal.runtime.AccessorProperty;
import java.util.ArrayList;
import jdk.nashorn.internal.runtime.JSType;
import jdk.nashorn.internal.runtime.ScriptRuntime;
import jdk.nashorn.internal.runtime.PropertyMap;
import jdk.nashorn.internal.runtime.ScriptObject;

public final class NativeEvalError extends ScriptObject
{
    public Object instMessage;
    public Object nashornException;
    private static PropertyMap $nasgenmap$;
    
    private NativeEvalError(final Object msg, final ScriptObject proto, final PropertyMap map) {
        super(proto, map);
        if (msg != ScriptRuntime.UNDEFINED) {
            this.instMessage = JSType.toString(msg);
        }
        else {
            this.delete("message", false);
        }
        NativeError.initException(this);
    }
    
    NativeEvalError(final Object msg, final Global global) {
        this(msg, global.getEvalErrorPrototype(), NativeEvalError.$nasgenmap$);
    }
    
    private NativeEvalError(final Object msg) {
        this(msg, Global.instance());
    }
    
    @Override
    public String getClassName() {
        return "Error";
    }
    
    public static NativeEvalError constructor(final boolean newObj, final Object self, final Object msg) {
        return new NativeEvalError(msg);
    }
    
    static {
        $clinit$();
    }
    
    public static void $clinit$() {
        final ArrayList properties = new ArrayList(2);
        properties.add(AccessorProperty.create("message", 2, /* ldc_method_handle(!) */ProcyonConstantHelper_76.HANDLE, /* ldc_method_handle(!) */ProcyonConstantHelper_77.HANDLE));
        properties.add(AccessorProperty.create("nashornException", 2, /* ldc_method_handle(!) */ProcyonConstantHelper_78.HANDLE, /* ldc_method_handle(!) */ProcyonConstantHelper_79.HANDLE));
        NativeEvalError.$nasgenmap$ = PropertyMap.newMap(properties);
    }
    
    public Object G$instMessage() {
        return this.instMessage;
    }
    
    public void S$instMessage(final Object instMessage) {
        this.instMessage = instMessage;
    }
    
    public Object G$nashornException() {
        return this.nashornException;
    }
    
    public void S$nashornException(final Object nashornException) {
        this.nashornException = nashornException;
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_76__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_76
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class);
            try {
                handle = NativeEvalError.__PROCYON__LOOKUP_76__.findVirtual(NativeEvalError.class, "G$instMessage", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_76.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_77__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_77
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(void.class, Object.class);
            try {
                handle = NativeEvalError.__PROCYON__LOOKUP_77__.findVirtual(NativeEvalError.class, "S$instMessage", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_77.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_78__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_78
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class);
            try {
                handle = NativeEvalError.__PROCYON__LOOKUP_78__.findVirtual(NativeEvalError.class, "G$nashornException", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_78.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_79__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_79
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(void.class, Object.class);
            try {
                handle = NativeEvalError.__PROCYON__LOOKUP_79__.findVirtual(NativeEvalError.class, "S$nashornException", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_79.HANDLE = handle;
        }
    }
}
