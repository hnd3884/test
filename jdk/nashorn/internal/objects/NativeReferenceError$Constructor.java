package jdk.nashorn.internal.objects;

import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.invoke.MethodHandle;
import jdk.nashorn.internal.runtime.PrototypeObject;
import jdk.nashorn.internal.runtime.Specialization;
import jdk.nashorn.internal.runtime.ScriptFunction;

final class NativeReferenceError$Constructor extends ScriptFunction
{
    NativeReferenceError$Constructor() {
        super("ReferenceError", /* ldc_method_handle(!) */ProcyonConstantHelper_131.HANDLE, (Specialization[])null);
        final NativeReferenceError$Prototype nativeReferenceError$Prototype = new NativeReferenceError$Prototype();
        PrototypeObject.setConstructor(nativeReferenceError$Prototype, this);
        this.setPrototype(nativeReferenceError$Prototype);
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_131__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_131
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(NativeReferenceError.class, boolean.class, Object.class, Object.class);
            try {
                handle = NativeReferenceError$Constructor.__PROCYON__LOOKUP_131__.findStatic(NativeReferenceError.class, "constructor", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_131.HANDLE = handle;
        }
    }
}
