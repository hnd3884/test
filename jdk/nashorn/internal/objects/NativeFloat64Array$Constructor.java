package jdk.nashorn.internal.objects;

import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import jdk.nashorn.internal.runtime.PrototypeObject;
import jdk.nashorn.internal.runtime.Specialization;
import jdk.nashorn.internal.runtime.Property;
import java.util.Collection;
import java.lang.invoke.MethodHandle;
import jdk.nashorn.internal.runtime.AccessorProperty;
import java.util.ArrayList;
import jdk.nashorn.internal.runtime.PropertyMap;
import jdk.nashorn.internal.runtime.ScriptFunction;

final class NativeFloat64Array$Constructor extends ScriptFunction
{
    private static final PropertyMap $nasgenmap$;
    
    public int G$BYTES_PER_ELEMENT() {
        return NativeFloat64Array.BYTES_PER_ELEMENT;
    }
    
    static {
        final ArrayList properties = new ArrayList(1);
        properties.add(AccessorProperty.create("BYTES_PER_ELEMENT", 7, /* ldc_method_handle(!) */ProcyonConstantHelper_82.HANDLE, (MethodHandle)null));
        $nasgenmap$ = PropertyMap.newMap(properties);
    }
    
    NativeFloat64Array$Constructor() {
        super("Float64Array", /* ldc_method_handle(!) */ProcyonConstantHelper_83.HANDLE, NativeFloat64Array$Constructor.$nasgenmap$, (Specialization[])null);
        final NativeFloat64Array$Prototype nativeFloat64Array$Prototype = new NativeFloat64Array$Prototype();
        PrototypeObject.setConstructor(nativeFloat64Array$Prototype, this);
        this.setPrototype(nativeFloat64Array$Prototype);
        this.setArity(1);
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_82__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_82
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(int.class);
            try {
                handle = NativeFloat64Array$Constructor.__PROCYON__LOOKUP_82__.findVirtual(NativeFloat64Array$Constructor.class, "G$BYTES_PER_ELEMENT", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_82.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_83__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_83
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(NativeFloat64Array.class, boolean.class, Object.class, Object[].class);
            try {
                handle = NativeFloat64Array$Constructor.__PROCYON__LOOKUP_83__.findStatic(NativeFloat64Array.class, "constructor", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_83.HANDLE = handle;
        }
    }
}
