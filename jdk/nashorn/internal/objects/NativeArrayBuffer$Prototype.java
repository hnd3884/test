package jdk.nashorn.internal.objects;

import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.invoke.MethodHandle;
import jdk.nashorn.internal.runtime.ScriptFunction;
import jdk.nashorn.internal.runtime.Specialization;
import jdk.nashorn.internal.runtime.Property;
import java.util.Collection;
import jdk.nashorn.internal.runtime.AccessorProperty;
import java.util.ArrayList;
import jdk.nashorn.internal.runtime.PropertyMap;
import jdk.nashorn.internal.runtime.PrototypeObject;

final class NativeArrayBuffer$Prototype extends PrototypeObject
{
    private Object slice;
    private static final PropertyMap $nasgenmap$;
    
    public Object G$slice() {
        return this.slice;
    }
    
    public void S$slice(final Object slice) {
        this.slice = slice;
    }
    
    static {
        final ArrayList properties = new ArrayList(1);
        properties.add(AccessorProperty.create("slice", 2, /* ldc_method_handle(!) */ProcyonConstantHelper_22.HANDLE, /* ldc_method_handle(!) */ProcyonConstantHelper_23.HANDLE));
        $nasgenmap$ = PropertyMap.newMap(properties);
    }
    
    NativeArrayBuffer$Prototype() {
        super(NativeArrayBuffer$Prototype.$nasgenmap$);
        this.slice = ScriptFunction.createBuiltin("slice", /* ldc_method_handle(!) */ProcyonConstantHelper_24.HANDLE, new Specialization[] { new Specialization(/* ldc_method_handle(!) */ProcyonConstantHelper_25.HANDLE, false), new Specialization(/* ldc_method_handle(!) */ProcyonConstantHelper_26.HANDLE, false) });
    }
    
    @Override
    public String getClassName() {
        return "ArrayBuffer";
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_22__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_22
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class);
            try {
                handle = NativeArrayBuffer$Prototype.__PROCYON__LOOKUP_22__.findVirtual(NativeArrayBuffer$Prototype.class, "G$slice", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_22.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_23__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_23
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(void.class, Object.class);
            try {
                handle = NativeArrayBuffer$Prototype.__PROCYON__LOOKUP_23__.findVirtual(NativeArrayBuffer$Prototype.class, "S$slice", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_23.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_24__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_24
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(NativeArrayBuffer.class, Object.class, Object.class, Object.class);
            try {
                handle = NativeArrayBuffer$Prototype.__PROCYON__LOOKUP_24__.findStatic(NativeArrayBuffer.class, "slice", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_24.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_25__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_25
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class, Object.class, int.class, int.class);
            try {
                handle = NativeArrayBuffer$Prototype.__PROCYON__LOOKUP_25__.findStatic(NativeArrayBuffer.class, "slice", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_25.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_26__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_26
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class, Object.class, int.class);
            try {
                handle = NativeArrayBuffer$Prototype.__PROCYON__LOOKUP_26__.findStatic(NativeArrayBuffer.class, "slice", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_26.HANDLE = handle;
        }
    }
}
