package jdk.nashorn.internal.objects;

import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.invoke.MethodHandle;
import jdk.nashorn.internal.runtime.ScriptFunction;
import jdk.nashorn.internal.runtime.Specialization;
import jdk.nashorn.internal.runtime.Property;
import java.util.Collection;
import jdk.nashorn.internal.runtime.AccessorProperty;
import java.util.ArrayList;
import jdk.nashorn.internal.runtime.PropertyMap;
import jdk.nashorn.internal.runtime.PrototypeObject;

final class NativeNumber$Prototype extends PrototypeObject
{
    private Object toFixed;
    private Object toExponential;
    private Object toPrecision;
    private Object toString;
    private Object toLocaleString;
    private Object valueOf;
    private static final PropertyMap $nasgenmap$;
    
    public Object G$toFixed() {
        return this.toFixed;
    }
    
    public void S$toFixed(final Object toFixed) {
        this.toFixed = toFixed;
    }
    
    public Object G$toExponential() {
        return this.toExponential;
    }
    
    public void S$toExponential(final Object toExponential) {
        this.toExponential = toExponential;
    }
    
    public Object G$toPrecision() {
        return this.toPrecision;
    }
    
    public void S$toPrecision(final Object toPrecision) {
        this.toPrecision = toPrecision;
    }
    
    public Object G$toString() {
        return this.toString;
    }
    
    public void S$toString(final Object toString) {
        this.toString = toString;
    }
    
    public Object G$toLocaleString() {
        return this.toLocaleString;
    }
    
    public void S$toLocaleString(final Object toLocaleString) {
        this.toLocaleString = toLocaleString;
    }
    
    public Object G$valueOf() {
        return this.valueOf;
    }
    
    public void S$valueOf(final Object valueOf) {
        this.valueOf = valueOf;
    }
    
    static {
        final ArrayList properties = new ArrayList(6);
        properties.add(AccessorProperty.create("toFixed", 2, /* ldc_method_handle(!) */ProcyonConstantHelper_e2.HANDLE, /* ldc_method_handle(!) */ProcyonConstantHelper_e3.HANDLE));
        properties.add(AccessorProperty.create("toExponential", 2, /* ldc_method_handle(!) */ProcyonConstantHelper_e4.HANDLE, /* ldc_method_handle(!) */ProcyonConstantHelper_e5.HANDLE));
        properties.add(AccessorProperty.create("toPrecision", 2, /* ldc_method_handle(!) */ProcyonConstantHelper_e6.HANDLE, /* ldc_method_handle(!) */ProcyonConstantHelper_e7.HANDLE));
        properties.add(AccessorProperty.create("toString", 2, /* ldc_method_handle(!) */ProcyonConstantHelper_e8.HANDLE, /* ldc_method_handle(!) */ProcyonConstantHelper_e9.HANDLE));
        properties.add(AccessorProperty.create("toLocaleString", 2, /* ldc_method_handle(!) */ProcyonConstantHelper_ea.HANDLE, /* ldc_method_handle(!) */ProcyonConstantHelper_eb.HANDLE));
        properties.add(AccessorProperty.create("valueOf", 2, /* ldc_method_handle(!) */ProcyonConstantHelper_ec.HANDLE, /* ldc_method_handle(!) */ProcyonConstantHelper_ed.HANDLE));
        $nasgenmap$ = PropertyMap.newMap(properties);
    }
    
    NativeNumber$Prototype() {
        super(NativeNumber$Prototype.$nasgenmap$);
        this.toFixed = ScriptFunction.createBuiltin("toFixed", /* ldc_method_handle(!) */ProcyonConstantHelper_ee.HANDLE, new Specialization[] { new Specialization(/* ldc_method_handle(!) */ProcyonConstantHelper_ef.HANDLE, false) });
        this.toExponential = ScriptFunction.createBuiltin("toExponential", /* ldc_method_handle(!) */ProcyonConstantHelper_f0.HANDLE);
        this.toPrecision = ScriptFunction.createBuiltin("toPrecision", /* ldc_method_handle(!) */ProcyonConstantHelper_f1.HANDLE, new Specialization[] { new Specialization(/* ldc_method_handle(!) */ProcyonConstantHelper_f2.HANDLE, false) });
        this.toString = ScriptFunction.createBuiltin("toString", /* ldc_method_handle(!) */ProcyonConstantHelper_f3.HANDLE);
        this.toLocaleString = ScriptFunction.createBuiltin("toLocaleString", /* ldc_method_handle(!) */ProcyonConstantHelper_f4.HANDLE);
        this.valueOf = ScriptFunction.createBuiltin("valueOf", /* ldc_method_handle(!) */ProcyonConstantHelper_f5.HANDLE);
    }
    
    @Override
    public String getClassName() {
        return "Number";
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_e2__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_e2
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_e2__.findVirtual(NativeNumber$Prototype.class, "G$toFixed", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_e2.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_e3__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_e3
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(void.class, Object.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_e3__.findVirtual(NativeNumber$Prototype.class, "S$toFixed", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_e3.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_e4__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_e4
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_e4__.findVirtual(NativeNumber$Prototype.class, "G$toExponential", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_e4.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_e5__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_e5
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(void.class, Object.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_e5__.findVirtual(NativeNumber$Prototype.class, "S$toExponential", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_e5.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_e6__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_e6
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_e6__.findVirtual(NativeNumber$Prototype.class, "G$toPrecision", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_e6.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_e7__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_e7
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(void.class, Object.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_e7__.findVirtual(NativeNumber$Prototype.class, "S$toPrecision", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_e7.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_e8__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_e8
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_e8__.findVirtual(NativeNumber$Prototype.class, "G$toString", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_e8.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_e9__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_e9
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(void.class, Object.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_e9__.findVirtual(NativeNumber$Prototype.class, "S$toString", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_e9.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_ea__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_ea
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_ea__.findVirtual(NativeNumber$Prototype.class, "G$toLocaleString", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_ea.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_eb__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_eb
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(void.class, Object.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_eb__.findVirtual(NativeNumber$Prototype.class, "S$toLocaleString", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_eb.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_ec__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_ec
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_ec__.findVirtual(NativeNumber$Prototype.class, "G$valueOf", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_ec.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_ed__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_ed
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(void.class, Object.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_ed__.findVirtual(NativeNumber$Prototype.class, "S$valueOf", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_ed.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_ee__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_ee
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(String.class, Object.class, Object.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_ee__.findStatic(NativeNumber.class, "toFixed", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_ee.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_ef__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_ef
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(String.class, Object.class, int.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_ef__.findStatic(NativeNumber.class, "toFixed", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_ef.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_f0__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_f0
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(String.class, Object.class, Object.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_f0__.findStatic(NativeNumber.class, "toExponential", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_f0.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_f1__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_f1
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(String.class, Object.class, Object.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_f1__.findStatic(NativeNumber.class, "toPrecision", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_f1.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_f2__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_f2
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(String.class, Object.class, int.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_f2__.findStatic(NativeNumber.class, "toPrecision", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_f2.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_f3__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_f3
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(String.class, Object.class, Object.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_f3__.findStatic(NativeNumber.class, "toString", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_f3.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_f4__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_f4
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(String.class, Object.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_f4__.findStatic(NativeNumber.class, "toLocaleString", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_f4.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_f5__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_f5
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(double.class, Object.class);
            try {
                handle = NativeNumber$Prototype.__PROCYON__LOOKUP_f5__.findStatic(NativeNumber.class, "valueOf", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_f5.HANDLE = handle;
        }
    }
}
