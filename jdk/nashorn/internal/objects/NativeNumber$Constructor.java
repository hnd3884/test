package jdk.nashorn.internal.objects;

import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import jdk.nashorn.internal.runtime.PrototypeObject;
import jdk.nashorn.internal.runtime.Specialization;
import jdk.nashorn.internal.runtime.Property;
import java.util.Collection;
import java.lang.invoke.MethodHandle;
import jdk.nashorn.internal.runtime.AccessorProperty;
import java.util.ArrayList;
import jdk.nashorn.internal.runtime.PropertyMap;
import jdk.nashorn.internal.runtime.ScriptFunction;

final class NativeNumber$Constructor extends ScriptFunction
{
    private static final PropertyMap $nasgenmap$;
    
    public double G$MAX_VALUE() {
        return NativeNumber.MAX_VALUE;
    }
    
    public double G$MIN_VALUE() {
        return NativeNumber.MIN_VALUE;
    }
    
    public double G$NaN() {
        return NativeNumber.NaN;
    }
    
    public double G$NEGATIVE_INFINITY() {
        return NativeNumber.NEGATIVE_INFINITY;
    }
    
    public double G$POSITIVE_INFINITY() {
        return NativeNumber.POSITIVE_INFINITY;
    }
    
    static {
        final ArrayList properties = new ArrayList(5);
        properties.add(AccessorProperty.create("MAX_VALUE", 7, /* ldc_method_handle(!) */ProcyonConstantHelper_dc.HANDLE, (MethodHandle)null));
        properties.add(AccessorProperty.create("MIN_VALUE", 7, /* ldc_method_handle(!) */ProcyonConstantHelper_dd.HANDLE, (MethodHandle)null));
        properties.add(AccessorProperty.create("NaN", 7, /* ldc_method_handle(!) */ProcyonConstantHelper_de.HANDLE, (MethodHandle)null));
        properties.add(AccessorProperty.create("NEGATIVE_INFINITY", 7, /* ldc_method_handle(!) */ProcyonConstantHelper_df.HANDLE, (MethodHandle)null));
        properties.add(AccessorProperty.create("POSITIVE_INFINITY", 7, /* ldc_method_handle(!) */ProcyonConstantHelper_e0.HANDLE, (MethodHandle)null));
        $nasgenmap$ = PropertyMap.newMap(properties);
    }
    
    NativeNumber$Constructor() {
        super("Number", /* ldc_method_handle(!) */ProcyonConstantHelper_e1.HANDLE, NativeNumber$Constructor.$nasgenmap$, (Specialization[])null);
        final NativeNumber$Prototype nativeNumber$Prototype = new NativeNumber$Prototype();
        PrototypeObject.setConstructor(nativeNumber$Prototype, this);
        this.setPrototype(nativeNumber$Prototype);
        this.setArity(1);
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_dc__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_dc
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(double.class);
            try {
                handle = NativeNumber$Constructor.__PROCYON__LOOKUP_dc__.findVirtual(NativeNumber$Constructor.class, "G$MAX_VALUE", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_dc.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_dd__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_dd
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(double.class);
            try {
                handle = NativeNumber$Constructor.__PROCYON__LOOKUP_dd__.findVirtual(NativeNumber$Constructor.class, "G$MIN_VALUE", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_dd.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_de__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_de
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(double.class);
            try {
                handle = NativeNumber$Constructor.__PROCYON__LOOKUP_de__.findVirtual(NativeNumber$Constructor.class, "G$NaN", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_de.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_df__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_df
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(double.class);
            try {
                handle = NativeNumber$Constructor.__PROCYON__LOOKUP_df__.findVirtual(NativeNumber$Constructor.class, "G$NEGATIVE_INFINITY", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_df.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_e0__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_e0
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(double.class);
            try {
                handle = NativeNumber$Constructor.__PROCYON__LOOKUP_e0__.findVirtual(NativeNumber$Constructor.class, "G$POSITIVE_INFINITY", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_e0.HANDLE = handle;
        }
    }
    
    private static final MethodHandles.Lookup __PROCYON__LOOKUP_e1__ = MethodHandles.lookup();
    
    // This helper class was generated by Procyon to approximate the behavior of a
    // MethodHandle constant that cannot (currently) be represented in Java code.
    private static final class ProcyonConstantHelper_e1
    {
        static final MethodHandle HANDLE;
        
        static {
            MethodHandle handle;
            final MethodType type = MethodType.methodType(Object.class, boolean.class, Object.class, Object[].class);
            try {
                handle = NativeNumber$Constructor.__PROCYON__LOOKUP_e1__.findStatic(NativeNumber.class, "constructor", type);
            }
            catch (final ReflectiveOperationException e) {
                handle = MethodHandles.permuteArguments(MethodHandles.insertArguments(MethodHandles.throwException(type.returnType(), e.getClass()), 0, e), type);
            }
            ProcyonConstantHelper_e1.HANDLE = handle;
        }
    }
}
