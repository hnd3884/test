package jdk.jfr.internal;

import jdk.internal.org.objectweb.asm.ClassVisitor;
import jdk.internal.org.objectweb.asm.util.TraceClassVisitor;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.ByteArrayOutputStream;
import jdk.internal.org.objectweb.asm.ClassReader;
import java.util.Iterator;
import java.util.List;
import jdk.jfr.ValueDescriptor;
import jdk.internal.org.objectweb.asm.commons.Method;
import jdk.internal.org.objectweb.asm.MethodVisitor;
import jdk.internal.org.objectweb.asm.Type;

final class ASMToolkit
{
    private static Type TYPE_STRING;
    private static Type Type_THREAD;
    private static Type TYPE_CLASS;
    
    public static void invokeSpecial(final MethodVisitor methodVisitor, final String s, final Method method) {
        methodVisitor.visitMethodInsn(183, s, method.getName(), method.getDescriptor(), false);
    }
    
    public static void invokeStatic(final MethodVisitor methodVisitor, final String s, final Method method) {
        methodVisitor.visitMethodInsn(184, s, method.getName(), method.getDescriptor(), false);
    }
    
    public static void invokeVirtual(final MethodVisitor methodVisitor, final String s, final Method method) {
        methodVisitor.visitMethodInsn(182, s, method.getName(), method.getDescriptor(), false);
    }
    
    public static Type toType(final ValueDescriptor valueDescriptor) {
        final String typeName = valueDescriptor.getTypeName();
        switch (typeName) {
            case "byte": {
                return Type.BYTE_TYPE;
            }
            case "short": {
                return Type.SHORT_TYPE;
            }
            case "int": {
                return Type.INT_TYPE;
            }
            case "long": {
                return Type.LONG_TYPE;
            }
            case "double": {
                return Type.DOUBLE_TYPE;
            }
            case "float": {
                return Type.FLOAT_TYPE;
            }
            case "char": {
                return Type.CHAR_TYPE;
            }
            case "boolean": {
                return Type.BOOLEAN_TYPE;
            }
            case "java.lang.String": {
                return ASMToolkit.TYPE_STRING;
            }
            case "java.lang.Thread": {
                return ASMToolkit.Type_THREAD;
            }
            case "java.lang.Class": {
                return ASMToolkit.TYPE_CLASS;
            }
            default: {
                throw new Error("Not a valid type " + valueDescriptor.getTypeName());
            }
        }
    }
    
    public static String getDescriptor(final String s) {
        if ("int".equals(s)) {
            return "I";
        }
        if ("long".equals(s)) {
            return "J";
        }
        if ("boolean".equals(s)) {
            return "Z";
        }
        if ("float".equals(s)) {
            return "F";
        }
        if ("double".equals(s)) {
            return "D";
        }
        if ("short".equals(s)) {
            return "S";
        }
        if ("char".equals(s)) {
            return "C";
        }
        if ("byte".equals(s)) {
            return "B";
        }
        return Type.getObjectType(getInternalName(s)).getDescriptor();
    }
    
    public static String getInternalName(final String s) {
        return s.replace(".", "/");
    }
    
    public static Method makeWriteMethod(final List<EventInstrumentation.FieldInfo> list) {
        final StringBuilder sb = new StringBuilder();
        sb.append("(");
        for (final EventInstrumentation.FieldInfo fieldInfo : list) {
            if (!fieldInfo.fieldName.equals("eventThread") && !fieldInfo.fieldName.equals("stackTrace")) {
                sb.append(fieldInfo.fieldDescriptor);
            }
        }
        sb.append(")V");
        return new Method("write", sb.toString());
    }
    
    public static void logASM(final String s, final byte[] array) {
        Logger.log(LogTag.JFR_SYSTEM_BYTECODE, LogLevel.INFO, "Generated bytecode for class " + s);
        Logger.log(LogTag.JFR_SYSTEM_BYTECODE, LogLevel.TRACE, () -> {
            final ClassReader classReader = new ClassReader(array2);
            final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            final PrintWriter printWriter = new PrintWriter(byteArrayOutputStream);
            printWriter.println("Bytecode:");
            classReader.accept(new TraceClassVisitor(printWriter), 0);
            return byteArrayOutputStream.toString();
        });
    }
    
    static {
        ASMToolkit.TYPE_STRING = Type.getType(String.class);
        ASMToolkit.Type_THREAD = Type.getType(Thread.class);
        ASMToolkit.TYPE_CLASS = Type.getType(Class.class);
    }
}
