package com.me.mdm.server.tracker;

import com.adventnet.ds.query.GroupByColumn;
import com.me.mdm.server.apps.businessstore.BusinessStoreSyncConstants;
import com.adventnet.sym.server.mdm.featuresettings.MDMFeatureSettingsHandler;
import java.util.Map;
import com.adventnet.sym.server.mdm.certificates.scepserver.ScepServerUtil;
import com.adventnet.sym.server.mdm.util.MDMCommonConstants;
import com.adventnet.sym.server.mdm.group.MDMGroupHandler;
import com.me.idps.core.util.DirectoryMetricConstants;
import java.util.Hashtable;
import com.me.devicemanagement.framework.server.util.DateTimeUtil;
import com.adventnet.sym.server.mdm.util.MDMAgentBuildVersionsUtil;
import java.util.Iterator;
import com.me.mdm.server.metracker.MEMDMTrackerUtil;
import com.me.mdm.server.apps.constants.AppMgmtConstants;
import com.me.mdm.server.apps.multiversion.AppVersionDBUtil;
import com.adventnet.ds.query.Query;
import com.adventnet.ds.query.DerivedTable;
import com.me.devicemanagement.framework.server.util.SyMUtil;
import java.util.Collection;
import java.util.Arrays;
import com.adventnet.ds.query.GroupByClause;
import java.util.ArrayList;
import com.adventnet.ds.query.Join;
import com.adventnet.ds.query.SelectQueryImpl;
import com.adventnet.ds.query.Table;
import com.adventnet.ds.query.CaseExpression;
import com.adventnet.ds.query.Criteria;
import com.adventnet.ds.query.Column;
import com.adventnet.sym.server.mdm.util.MDMUtil;
import java.util.LinkedHashMap;
import java.util.logging.Level;
import com.adventnet.ds.query.SelectQuery;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Logger;

public class MDMCoreQuery
{
    private static Logger logger;
    public static final String CUSTOM_GROUP_QUERY = "CUSTOM_GROUP_QUERY";
    public static final String GEO_TRACKING_QUERY = "GEO_TRACKING_QUERY";
    public static final String CONFIGURATION_QUERY = "CONFIGURATION_QUERY";
    public static final String PROFILE_QUERY = "PROFILE_QUERY";
    public static final String APP_REPO_AND_DIST_QUERY = "APP_REPO_AND_DIST_QUERY";
    public static final String PROFILE_TO_COLLECTION_QUERY = "PROFILE_TO_COLLECTION_QUERY";
    public static final String MANAGED_DEVICE_QUERY = "MANAGED_DEVICE_QUERY";
    public static final String CUSTOMER_DETAILS_QUERY = "CUSTOMER_DETAILS_QUERY";
    public static final String LICENSE_DETAILS_QUERY = "LICENSE_DETAILS_QUERY";
    public static final String USER_MANAGEMENT_QUERY = "USER_MANAGEMENT_QUERY";
    public static final String APNS_QUERY = "APNS_QUERY";
    public static final String ANDROID_AGENT_SETTINGS_QUERY = "ANDROID_AGENT_SETTINGS_QUERY";
    public static final String APPS_QUERY = "APPS_QUERY";
    public static final String AFW_QUERY = "AFW_QUERY";
    public static final String BLACKLIST_SETTINGS_QUERY = "BLACKLIST_SETTINGS_QUERY";
    public static final String WP_SETTINGS_QUERY = "WP_SETTINGS_QUERY";
    public static final String VPP_SETTINGS_QUERY = "VPP_SETTINGS_QUERY";
    public static final String IOS_VPP_TOKEN_DETAILS_QUERY = "IOS_VPP_TOKEN_DETAILS_QUERY";
    public static final String IOS_APPS_IN_MULTIPLE_VPP_TOKEN_QUERY = "IOS_APPS_IN_MULTIPLE_VPP_TOKEN_QUERY";
    public static final String MULTIPLE_VPP_MANAGING_TECH_QUERY = "MULTIPLE_VPP_MANAGING_TECH_QUERY";
    public static final String MULTIPLE_VPP_MANAGING_RBDA_TECH_QUERY = "MULTIPLE_VPP_MANAGING_RBDA_TECH_QUERY";
    public static final String DEVICES_WITH_MULTIPLE_VPP_ASSOCIATION_QUERY = "DEVICES_WITH_MULTIPLE_VPP_ASSOCIATION_QUERY";
    public static final String GROUPS_WITH_MULTIPLE_VPP_ASSOCIATION_QUERY = "GROUPS_WITH_MULTIPLE_VPP_ASSOCIATION_QUERY";
    public static final String REMOTE_SESSION_QUERY = "REMOTE_SESSION_QUERY";
    public static final String LOSTMODE_QUERY = "LOSTMODE_QUERY";
    public static final String CONTENT_MGMT_QUERY = "CONTENT_MGMT_QUERY";
    public static final String ENROLMENT_SETTINGS_QUERY = "ENROLMENT_SETTINGS_QUERY";
    public static final String WINDOWS_MEMDM_SETTINGS_QUERY = "WINDOWS_MEMDM_SETTINGS_QUERY";
    public static final String DEPROVISION_TRACKING_QUERY = "DEPROVISION_TRACKING_QUERY";
    public static final String DEPROVISION_RETIRED_DURATION_TRACKING_QUERY = "DEPROVISION_RETIRED_DURATION_TRACKING_QUERY";
    public static final String IN_STOCK_RETIRE_TRACKING_QUERY = "IN_STOCK_RETIRE_TRACKING_QUERY";
    public static final String OSUPDATE_QUERY = "OSUPDATE_QUERY";
    public static final String ANNOUNCEMENT_QUERY = "ANNOUNCEMENT_QUERY";
    public static final String BULK_GROUP_ACTIONS_QUERY = "BULK_GROUP_ACTIONS_QUERY";
    public static final String BULK_DEVICE_ACTIONS_QUERY = "BULK_DEVICE_ACTIONS_QUERY";
    public static final String PENDING_OS_QUERY = "PENDING_OS_QUERY";
    public static final String APP_TRASH_QUERY = "APP_TRASH_QUERY";
    public static final String CUSTOMER_PARAM_QUERY = "CUSTOMER_PARAM_QUERY";
    public static final String APP_COUNT_QUERY = "APP_COUNT_QUERY";
    public static final String ACCOUNT_CONFIGURED_QUERY = "ACCOUNT_CONFIGURED_QUERY";
    public static final String DEP_QUERY = "DEP_QUERY";
    public static final String TERMS_QUERY = "TERMS_QUERY";
    public static final String DEVICE_PRIVACY_QUERY = "DEVICE_PRIVACY_QUERY";
    public static final String SECURITY_COMMANDS_QUERY = "SECURITY_COMMANDS_QUERY";
    public static final String SELF_ENROLL_LIMIT_TRACKING_QUERY = "SELF_ENROLL_LIMIT_TRACKING_QUERY";
    public static final String DEVICE_WITHOUT_REQUEST_TRACKING_QUERY = "DEVICE_WITHOUT_REQUEST_TRACKING_QUERY";
    public static final String BLACKLIST_QUERY = "BLACKLIST_QUERY";
    public static final String DIRECTORY_TRACKING_QUERY = "DIRECTORY_TRACKING_QUERY";
    public static final String MDM_GROUPS_QUERY = "MDM_GROUPS_QUERY";
    public static final String DEVICE_COMPLIANCE_TRACKING_QUERY = "DEVICE_COMPLIANCE_TRACKING_QUERY";
    public static final String GEO_FENCE_TRACKING_QUERY = "GEO_FENCE_TRACKING_QUERY";
    public static final String DEVICE_COMPLIANCE_DEVICES_DISTRIBUTION_QUERY = "DEVICE_COMPLIANCE_DEVICES_DISTRIBUTION_QUERY";
    public static final String DEVICE_COMPLIANCE_GROUPS_DISTRIBUTION_QUERY = "DEVICE_COMPLIANCE_GROUPS_DISTRIBUTION_QUERY";
    public static final String DEVICE_COMPLIANCE_QUERY = "DEVICE_COMPLIANCE_QUERY";
    public static final String DEVICE_COMPLIANCE_RULE_TYPE_QUERY = "DEVICE_COMPLIANCE_RULE_TYPE_QUERY";
    public static final String DEVICE_COMPLIANCE_ACTION_TYPE_QUERY = "DEVICE_COMPLIANCE_ACTION_TYPE_QUERY";
    public static final String GEO_FENCE_REPOSITORY_QUERY = "GEO_FENCE_REPOSITORY_QUERY";
    public static final String DEVICE_COMPLIANCE_ERROR_QUERY = "DEVICE_COMPLIANCE_ERROR_QUERY";
    public static final String DEVICE_OS_SUMMARY_QUERY = "DEVICE_OS_SUMMARY_QUERY";
    public static final String EMAIL_CHOOSER = "EMAIL_PREFERENCE_QUERY";
    public static final String SCEP_CERTIFICATE_COUNT = "SCEP_CERTIFICATE_COUNT";
    public static final String AUTO_APP_UPDATE_SUMMARY_QUERY = "AUTO_APP_UPDATE_SUMMARY_QUERY";
    public static final String AUTO_APP_DEVICE_UPDATE_SUMMARY_QUERY = "AUTO_APP_DEVICE_UPDATE_SUMMARY_QUERY";
    public static final String AUTO_APP_CONFIGURED_QUERY = "AUTO_APP_CONFIGURED_QUERY";
    public static final String AZURE_MAM_POLICY_COUNT = "AZURE_MAM_POLICY_SUCCESS";
    public static final String CERTIFCATE_REPO = "CERTIFCATE_REPO";
    public static final String APP_CONFIG_POLICY_QUERY = "APP_CONFIG_POLICY_QUERY";
    public static final String CERTIFCATE_REPO_INDIVIDUAL = "CERTIFCATE_REPO_INDIVIDUAL";
    public static final String FEATURE_SETTING = "FEATURE_SETTING";
    public static final String MIGRATION_SUMMARY_COUNT = "MIGRATION_SUMMARY_COUNT";
    public static final String RECOVERY_LOCK_ENABLED_COUNT = "RECOVERY_LOCK_ENABLED_COUNT";
    public static final String MULTI_TRACK_PLAYSTORE_APP = "MULTI_TRACK_PLAYSTORE_APP";
    public static final List<String> CUSTOMER_PARAMS_TRACKING_LIST;
    public static MDMCoreQuery mdmCoreQuery;
    public HashMap<String, SelectQuery> selectQueryHashMap;
    
    public static MDMCoreQuery getInstance() {
        try {
            if (MDMCoreQuery.mdmCoreQuery == null) {
                MDMCoreQuery.mdmCoreQuery = new MDMCoreQuery();
            }
        }
        catch (final Exception e) {
            MDMCoreQuery.logger.log(Level.SEVERE, "Exception in MDMCoreQuery getInstance:", e);
            throw e;
        }
        return MDMCoreQuery.mdmCoreQuery;
    }
    
    private MDMCoreQuery() {
        (this.selectQueryHashMap = new LinkedHashMap<String, SelectQuery>()).put("CUSTOM_GROUP_QUERY", this.customGroupQuery());
        this.selectQueryHashMap.put("GEO_TRACKING_QUERY", this.geoTrackingQuery());
        this.selectQueryHashMap.put("CONFIGURATION_QUERY", this.getNewConfigurationQuery());
        this.selectQueryHashMap.put("PROFILE_QUERY", this.profileQuery());
        this.selectQueryHashMap.put("APP_REPO_AND_DIST_QUERY", this.appQuery());
        this.selectQueryHashMap.put("PROFILE_TO_COLLECTION_QUERY", this.profileToCollectionQuery());
        this.selectQueryHashMap.put("MANAGED_DEVICE_QUERY", this.managedDeviceQuery());
        this.selectQueryHashMap.put("APNS_QUERY", this.apnsCheckQuery());
        this.selectQueryHashMap.put("ANDROID_AGENT_SETTINGS_QUERY", this.androidAgentSettingsQuery());
        this.selectQueryHashMap.put("REMOTE_SESSION_QUERY", this.remoteQuery());
        this.selectQueryHashMap.put("LOSTMODE_QUERY", this.lostModeQuery());
        this.selectQueryHashMap.put("AFW_QUERY", this.afwErrorCodeQuery());
        this.selectQueryHashMap.put("APPS_QUERY", this.appsQuery());
        this.selectQueryHashMap.put("BLACKLIST_SETTINGS_QUERY", this.blackListSettingQuery());
        this.selectQueryHashMap.put("WP_SETTINGS_QUERY", this.wpSettingQuery());
        this.selectQueryHashMap.put("VPP_SETTINGS_QUERY", this.vppSettingsQuery());
        this.selectQueryHashMap.put("IOS_VPP_TOKEN_DETAILS_QUERY", this.getIOSBusinessDetailsQuery());
        this.selectQueryHashMap.put("IOS_APPS_IN_MULTIPLE_VPP_TOKEN_QUERY", this.getQueryForIOSAppsInMultipleVppToken());
        this.selectQueryHashMap.put("MULTIPLE_VPP_MANAGING_TECH_QUERY", this.getQueryForTechWithMultipleVPP());
        this.selectQueryHashMap.put("MULTIPLE_VPP_MANAGING_RBDA_TECH_QUERY", this.getQueryForTechWithMultipleVPPWithRBDA());
        this.selectQueryHashMap.put("DEVICES_WITH_MULTIPLE_VPP_ASSOCIATION_QUERY", this.getIOSBSDeviceAssociationQuery());
        this.selectQueryHashMap.put("GROUPS_WITH_MULTIPLE_VPP_ASSOCIATION_QUERY", this.getIOSBSGroupAssociationQuery());
        this.selectQueryHashMap.put("CONTENT_MGMT_QUERY", this.getContentMgmtQuery());
        this.selectQueryHashMap.put("ENROLMENT_SETTINGS_QUERY", this.enrollmentSettingQuery());
        this.selectQueryHashMap.put("WINDOWS_MEMDM_SETTINGS_QUERY", this.windowsMeMdmSettingsQuery());
        this.selectQueryHashMap.put("DEPROVISION_TRACKING_QUERY", this.deprovisionTrackingQuery());
        this.selectQueryHashMap.put("IN_STOCK_RETIRE_TRACKING_QUERY", this.managedStatusTrackingQuery());
        this.selectQueryHashMap.put("OSUPDATE_QUERY", this.osUpdateMgmtQuery());
        this.selectQueryHashMap.put("PENDING_OS_QUERY", this.pendingUpdatesQuery());
        this.selectQueryHashMap.put("APP_TRASH_QUERY", this.appTrashCount());
        this.selectQueryHashMap.put("CUSTOMER_PARAM_QUERY", this.getCustomerParams());
        this.selectQueryHashMap.put("DEP_QUERY", this.depQuery());
        this.selectQueryHashMap.put("TERMS_QUERY", this.termsQuery());
        this.selectQueryHashMap.put("ACCOUNT_CONFIGURED_QUERY", this.accountConfigQuery());
        this.selectQueryHashMap.put("DEVICE_PRIVACY_QUERY", this.devicePrivacyQuery());
        this.selectQueryHashMap.put("SECURITY_COMMANDS_QUERY", this.securityCommandsQuery());
        this.selectQueryHashMap.put("BLACKLIST_QUERY", this.getBlacklistQuery());
        this.selectQueryHashMap.put("SELF_ENROLL_LIMIT_TRACKING_QUERY", this.getSelfEnrollLimitQuery());
        this.selectQueryHashMap.put("DEPROVISION_RETIRED_DURATION_TRACKING_QUERY", this.deprovisionStatusTrackingQuery());
        this.selectQueryHashMap.put("DEVICE_WITHOUT_REQUEST_TRACKING_QUERY", this.deviceWithoutRequestTrackingQuery());
        this.selectQueryHashMap.put("MDM_GROUPS_QUERY", this.getMDMGroupsTrackingQuery());
        this.selectQueryHashMap.put("DEVICE_COMPLIANCE_DEVICES_DISTRIBUTION_QUERY", this.deviceComplianceDevicesDistributionQuery());
        this.selectQueryHashMap.put("DEVICE_COMPLIANCE_GROUPS_DISTRIBUTION_QUERY", this.deviceComplianceGroupsDistributionQuery());
        this.selectQueryHashMap.put("DEVICE_COMPLIANCE_QUERY", this.deviceComplianceQuery());
        this.selectQueryHashMap.put("DEVICE_COMPLIANCE_RULE_TYPE_QUERY", this.deviceComplianceRuleTypeQuery());
        this.selectQueryHashMap.put("DEVICE_COMPLIANCE_ACTION_TYPE_QUERY", this.deviceComplianceActionTypeQuery());
        this.selectQueryHashMap.put("GEO_FENCE_REPOSITORY_QUERY", this.geoFenceRepositoryQuery());
        this.selectQueryHashMap.put("DEVICE_COMPLIANCE_ERROR_QUERY", this.getDeviceComplianceErrorQuery());
        this.selectQueryHashMap.put("DEVICE_OS_SUMMARY_QUERY", this.getOSSummaryDetails());
        this.selectQueryHashMap.put("USER_IN_TRASH_COUNT", this.getUserInTrashCount());
        this.selectQueryHashMap.put("EMAIL_PREFERENCE_QUERY", this.getEmailClientPrefsDetails());
        this.selectQueryHashMap.put("SCEP_CERTIFICATE_COUNT", this.getScepCertCountQuery());
        this.selectQueryHashMap.put("AUTO_APP_UPDATE_SUMMARY_QUERY", this.getAutoUpdateAppDistDetails());
        this.selectQueryHashMap.put("AUTO_APP_DEVICE_UPDATE_SUMMARY_QUERY", this.getAutoUpdateDeviceDistDetails());
        this.selectQueryHashMap.put("AUTO_APP_CONFIGURED_QUERY", this.isAppAutoUpdateConfigured());
        this.selectQueryHashMap.put("AZURE_MAM_POLICY_SUCCESS", this.getAzureMamPropsCountQuery());
        this.selectQueryHashMap.put("CERTIFCATE_REPO", this.getCertificateRepoSelectQuery());
        this.selectQueryHashMap.put("APP_CONFIG_POLICY_QUERY", this.getAppConfigPolicyQuery());
        this.selectQueryHashMap.put("CERTIFCATE_REPO_INDIVIDUAL", this.getIndividualCertServerQuery());
        this.selectQueryHashMap.put("FEATURE_SETTING", this.getFeatureSettingDetailsQuery());
        this.selectQueryHashMap.put("MIGRATION_SUMMARY_COUNT", this.getMigrationSummaryStatus());
        this.selectQueryHashMap.put("ANNOUNCEMENT_QUERY", this.getAnnouncementQuery());
        this.selectQueryHashMap.put("BULK_GROUP_ACTIONS_QUERY", this.getGroupBulkActionsQuery());
        this.selectQueryHashMap.put("BULK_DEVICE_ACTIONS_QUERY", this.getDeviceBulkActionsQuery());
        this.selectQueryHashMap.put("RECOVERY_LOCK_ENABLED_COUNT", this.getRecoveryLockEnabledQuery());
        this.selectQueryHashMap.put("MULTI_TRACK_PLAYSTORE_APP", this.getMultiTrackPlayStoreAppQuery());
    }
    
    public SelectQuery getMDMQueryMap(final String queryNumber) {
        if (!MDMUtil.isStringEmpty(queryNumber) && queryNumber.equals("DIRECTORY_TRACKING_QUERY") && !this.selectQueryHashMap.containsKey("DIRECTORY_TRACKING_QUERY")) {
            this.selectQueryHashMap.put("DIRECTORY_TRACKING_QUERY", this.getDirectoryQuery());
        }
        return (SelectQuery)getInstance().selectQueryHashMap.get(queryNumber).clone();
    }
    
    private SelectQuery apnsCheckQuery() {
        final Criteria apnsCreatedCriteria = new Criteria(new Column("APNSCertificateInfo", "CERTIFICATE_ID"), (Object)null, 1);
        final CaseExpression apnsCreatedExpression = new CaseExpression("APNS_CREATED");
        apnsCreatedExpression.addWhen(apnsCreatedCriteria, (Object)1);
        apnsCreatedExpression.elseVal((Object)0);
        final SelectQuery apnsCertificateQuery = (SelectQuery)new SelectQueryImpl(new Table("CustomerInfo"));
        apnsCertificateQuery.addJoin(new Join("CustomerInfo", "APNSCertificateInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CREATED_BY" }, 1));
        apnsCertificateQuery.addJoin(new Join("APNSCertificateInfo", "APNSCertificateDetails", new String[] { "CERTIFICATE_ID" }, new String[] { "CERTIFICATE_ID" }, 1));
        apnsCertificateQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        apnsCertificateQuery.addSelectColumn((Column)apnsCreatedExpression);
        final Column apnsCreatedTimeColumn = new Column("APNSCertificateDetails", "CREATION_DATE");
        apnsCreatedTimeColumn.setColumnAlias("APNS_Created_Time");
        apnsCertificateQuery.addSelectColumn(apnsCreatedTimeColumn);
        return apnsCertificateQuery;
    }
    
    private SelectQuery customGroupQuery() {
        final SelectQuery customGroupQuery = (SelectQuery)new SelectQueryImpl(new Table("CustomerInfo"));
        customGroupQuery.addJoin(new Join("CustomerInfo", "Resource", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        customGroupQuery.addJoin(new Join("Resource", "CustomGroup", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        customGroupQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        final Column resourceColumn = new Column("CustomGroup", "RESOURCE_ID").count();
        resourceColumn.setColumnAlias("CUSTOM_GROUP_COUNT");
        customGroupQuery.addSelectColumn(resourceColumn);
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        customGroupQuery.setGroupByClause(groupByColumn);
        return customGroupQuery;
    }
    
    private SelectQuery geoTrackingQuery() {
        final SelectQuery geoTrackingQuery = (SelectQuery)new SelectQueryImpl(new Table("LocationSettings"));
        geoTrackingQuery.addJoin(new Join("LocationSettings", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        geoTrackingQuery.addSelectColumn(new Column("LocationSettings", "CUSTOMER_ID"));
        geoTrackingQuery.addSelectColumn(new Column("LocationSettings", "IS_LOCATION_TRACKING"));
        geoTrackingQuery.addSelectColumn(new Column("LocationSettings", "RESOURCE_CRITERIA"));
        geoTrackingQuery.addSelectColumn(new Column("LocationSettings", "TRACKING_STATUS"));
        geoTrackingQuery.addSelectColumn(new Column("LocationSettings", "LOCATION_RADIUS"));
        geoTrackingQuery.addSelectColumn(new Column("LocationSettings", "LOCATION_INTERVAL"));
        geoTrackingQuery.addSelectColumn(new Column("LocationSettings", "LOCATION_HISTORY_STATUS"));
        geoTrackingQuery.addSelectColumn(new Column("LocationSettings", "LOCATION_ACCURACY"));
        return geoTrackingQuery;
    }
    
    public SelectQuery remoteQuery() {
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final Column remoteCountColumn = new Column("CommandHistory", "RESOURCE_ID").count();
        remoteCountColumn.setColumnAlias("remoteMaxCountColumn");
        final Column innerCustId = new Column("CustomerInfo", "CUSTOMER_ID");
        innerCustId.setColumnAlias("innercustomerid");
        final SelectQuery innerQuery = SyMUtil.formSelectQuery("CommandHistory", (Criteria)null, new ArrayList((Collection<? extends E>)Arrays.asList(remoteCountColumn, innerCustId)), new ArrayList((Collection<? extends E>)Arrays.asList(Column.getColumn("CustomerInfo", "CUSTOMER_ID"), Column.getColumn("CommandHistory", "RESOURCE_ID"))), (ArrayList)null, new ArrayList((Collection<? extends E>)Arrays.asList(new Join("CommandHistory", "RemoteSessionCommandHistory", new String[] { "COMMAND_HISTORY_ID" }, new String[] { "COMMAND_HISTORY_ID" }, 2), new Join("CommandHistory", "Resource", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2), new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2))), (Criteria)null);
        final DerivedTable innerTable = new DerivedTable("innertable", (Query)innerQuery);
        final SelectQuery middleQuery = (SelectQuery)new SelectQueryImpl((Table)innerTable);
        final Column middleTableRemoteMaxCountColumn = new Column(innerTable.getTableAlias(), remoteCountColumn.getColumnAlias()).maximum();
        middleTableRemoteMaxCountColumn.setColumnAlias("middletableremotemax");
        middleQuery.addSelectColumn(middleTableRemoteMaxCountColumn);
        final Column middleCustColumn = new Column("innertable", "innercustomerid");
        middleCustColumn.setColumnAlias("middlecustid");
        middleQuery.addSelectColumn(middleCustColumn);
        middleQuery.addGroupByColumn(middleCustColumn);
        final DerivedTable middleTable = new DerivedTable("middletable", (Query)middleQuery);
        final Criteria remoteSuccess = new Criteria(new Column("RemoteSessionCommandHistory", "STATUS"), (Object)new Integer[] { 3, 6 }, 8);
        final Criteria remoteFailure = new Criteria(new Column("RemoteSessionCommandHistory", "STATUS"), (Object)new Integer[] { 3, 6 }, 9);
        final Criteria remoteSession = new Criteria(new Column("RemoteSessionCommandHistory", "COMMAND_HISTORY_ID"), (Object)null, 1);
        final Criteria remoteReqSent = new Criteria(new Column("RemoteSessionCommandHistory", "STATUS"), (Object)new Integer(1), 0);
        final Criteria remoteReqReceived = new Criteria(new Column("RemoteSessionCommandHistory", "STATUS"), (Object)new Integer(2), 0);
        final Criteria remoteReqRejected = new Criteria(new Column("RemoteSessionCommandHistory", "STATUS"), (Object)new Integer(4), 0);
        final Criteria agentNotUpgraded = new Criteria(new Column("RemoteSessionCommandHistory", "STATUS"), (Object)new Integer(5), 0);
        final Criteria remoteExceptionAtAgent = new Criteria(new Column("RemoteSessionCommandHistory", "STATUS"), (Object)new Integer(7), 0);
        final Criteria customerIdCriteria = new Criteria(Column.getColumn("CustomerInfo", "CUSTOMER_ID"), (Object)Column.getColumn("Resource", "CUSTOMER_ID"), 0);
        final Criteria iosCriteria = new Criteria(new Column("ManagedDevice", "PLATFORM_TYPE"), (Object)1, 0);
        final Criteria androidCriteria = new Criteria(new Column("ManagedDevice", "PLATFORM_TYPE"), (Object)2, 0);
        final Criteria androidRemoteSession = remoteSession.and(androidCriteria);
        final Criteria iosRemoteSession = remoteSession.and(iosCriteria);
        final CaseExpression remoteSessionExpression = new CaseExpression("REMOTE_SESSION_COUNT");
        remoteSessionExpression.addWhen(androidRemoteSession, (Object)new Column("RemoteSessionCommandHistory", "COMMAND_HISTORY_ID"));
        final CaseExpression remoteSuccessExpression = new CaseExpression("REMOTE_SESSION_SUCCESS_COUNT");
        remoteSuccessExpression.addWhen(androidRemoteSession.and(remoteSuccess), (Object)new Column("RemoteSessionCommandHistory", "COMMAND_HISTORY_ID"));
        final CaseExpression remoteFailureExpression = new CaseExpression("REMOTE_SESSION_FAILURE_COUNT");
        remoteFailureExpression.addWhen(androidRemoteSession.and(remoteFailure), (Object)new Column("RemoteSessionCommandHistory", "COMMAND_HISTORY_ID"));
        final CaseExpression remoteReqSentExpression = new CaseExpression("REMOTE_REQUEST_SENT");
        remoteReqSentExpression.addWhen(androidRemoteSession.and(remoteReqSent), (Object)new Column("RemoteSessionCommandHistory", "COMMAND_HISTORY_ID"));
        final CaseExpression remoteReqReceivedExpression = new CaseExpression("REMOTE_REQUEST_RECEIVED");
        remoteReqReceivedExpression.addWhen(androidRemoteSession.and(remoteReqReceived), (Object)new Column("RemoteSessionCommandHistory", "COMMAND_HISTORY_ID"));
        final CaseExpression remoteReqRejectedExpression = new CaseExpression("REMOTE_REQUEST_REJECTED");
        remoteReqRejectedExpression.addWhen(androidRemoteSession.and(remoteReqRejected), (Object)new Column("RemoteSessionCommandHistory", "COMMAND_HISTORY_ID"));
        final CaseExpression remoteNotSupportedExpression = new CaseExpression("REMOTE_NOT_SUPPORTED");
        remoteNotSupportedExpression.addWhen(androidRemoteSession.and(agentNotUpgraded), (Object)new Column("RemoteSessionCommandHistory", "COMMAND_HISTORY_ID"));
        final CaseExpression remoteExceptionExpression = new CaseExpression("REMOTE_EXCEPTION_AT_AGENT");
        remoteExceptionExpression.addWhen(androidRemoteSession.and(remoteExceptionAtAgent), (Object)new Column("RemoteSessionCommandHistory", "COMMAND_HISTORY_ID"));
        final CaseExpression remoteSessionExpressioniOS = new CaseExpression("IOS_REMOTE_SESSION_COUNT");
        remoteSessionExpressioniOS.addWhen(iosRemoteSession, (Object)new Column("RemoteSessionCommandHistory", "COMMAND_HISTORY_ID"));
        final CaseExpression remoteSuccessExpressioniOS = new CaseExpression("IOS_REMOTE_SESSION_SUCCESS_COUNT");
        remoteSuccessExpressioniOS.addWhen(iosRemoteSession.and(remoteSuccess), (Object)new Column("RemoteSessionCommandHistory", "COMMAND_HISTORY_ID"));
        final CaseExpression remoteFailureExpressioniOS = new CaseExpression("IOS_REMOTE_SESSION_FAILURE_COUNT");
        remoteFailureExpressioniOS.addWhen(iosRemoteSession.and(remoteExceptionAtAgent), (Object)new Column("RemoteSessionCommandHistory", "COMMAND_HISTORY_ID"));
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("RemoteSessionCommandHistory"));
        selectQuery.addJoin(new Join("RemoteSessionCommandHistory", "CommandHistory", new String[] { "COMMAND_HISTORY_ID" }, new String[] { "COMMAND_HISTORY_ID" }, 2));
        selectQuery.addJoin(new Join("CommandHistory", "Resource", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        selectQuery.addJoin(new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        selectQuery.addJoin(new Join("Resource", "ManagedDevice", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        selectQuery.addJoin(new Join(Table.getTable("CustomerInfo"), (Table)middleTable, customerIdCriteria, 1));
        final Column maxRemotePerCustomer = new Column("middletable", middleTableRemoteMaxCountColumn.getColumnAlias()).maximum();
        maxRemotePerCustomer.setColumnAlias("MAX_REMOTE_COUNT");
        maxRemotePerCustomer.setType(4);
        selectQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        selectQuery.addSelectColumn(maxRemotePerCustomer);
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(remoteSessionExpression, 4, "REMOTE_SESSION_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(remoteSuccessExpression, 4, "REMOTE_SESSION_SUCCESS_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(remoteFailureExpression, 4, "REMOTE_SESSION_FAILURE_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(remoteReqSentExpression, 4, "REMOTE_REQUEST_SENT"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(remoteReqReceivedExpression, 4, "REMOTE_REQUEST_RECEIVED"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(remoteReqRejectedExpression, 4, "REMOTE_REQUEST_REJECTED"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(remoteNotSupportedExpression, 4, "REMOTE_NOT_SUPPORTED"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(remoteExceptionExpression, 4, "REMOTE_EXCEPTION_AT_AGENT"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(remoteSessionExpressioniOS, 4, "IOS_REMOTE_SESSION_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(remoteSuccessExpressioniOS, 4, "IOS_REMOTE_SESSION_SUCCESS_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(remoteFailureExpressioniOS, 4, "IOS_REMOTE_SESSION_FAILURE_COUNT"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        selectQuery.setGroupByClause(groupByColumn);
        return selectQuery;
    }
    
    private SelectQuery profileToCollectionQuery() {
        SelectQuery profileToCollectionQuery = (SelectQuery)new SelectQueryImpl(new Table("Profile"));
        profileToCollectionQuery.addJoin(new Join("Profile", "ProfileToCustomerRel", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2));
        profileToCollectionQuery.addJoin(new Join("ProfileToCustomerRel", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        profileToCollectionQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        profileToCollectionQuery = this.addCollnDistributionQuery(profileToCollectionQuery);
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        profileToCollectionQuery.setGroupByClause(groupByColumn);
        return profileToCollectionQuery;
    }
    
    private SelectQuery getAnnouncementQuery() {
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("Profile"));
        final Criteria isAnnouncementProfile = new Criteria(Column.getColumn("Profile", "PROFILE_TYPE"), (Object)9, 0);
        final Criteria failedAnnouncement = new Criteria(Column.getColumn("CollnToResources", "STATUS"), (Object)new Integer[] { 7, 11, 10 }, 8);
        final Criteria isAnnouncementNeedAckButton = new Criteria(Column.getColumn("AnnouncementDetail", "NEEDS_ACKNOWLEDGEMENT"), (Object)true, 0);
        final Criteria isAnnouncementDistributed = new Criteria(Column.getColumn("CollnToResources", "RESOURCE_ID"), (Object)null, 1);
        final CaseExpression createdAnnouncementProfile = new CaseExpression("ANNOUNCEMENT_PROFILE_COUNT");
        createdAnnouncementProfile.addWhen(isAnnouncementProfile, (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression announcementDistributed = new CaseExpression("ANNOUNCEMENT_DISTRIBUTED_COUNT");
        announcementDistributed.addWhen(isAnnouncementProfile.and(isAnnouncementDistributed), (Object)new Column("CollnToResources", "COLLECTION_ID"));
        final CaseExpression announcementNeedsAck = new CaseExpression("ANNOUNCEMENT_NEED_ACK_BUTTON");
        announcementNeedsAck.addWhen(isAnnouncementProfile.and(isAnnouncementNeedAckButton), (Object)new Column("AnnouncementDetail", "ANNOUNCEMENT_ID"));
        final CaseExpression announcementFailureCount = new CaseExpression("ANNOUNCEMENT_FAILURE_COUNT");
        announcementFailureCount.addWhen(isAnnouncementProfile.and(failedAnnouncement), (Object)new Column("CollnToResources", "RESOURCE_ID"));
        selectQuery.addJoin(new Join("Profile", "ProfileToCustomerRel", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2));
        selectQuery.addJoin(new Join("Profile", "ProfileToCollection", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2));
        selectQuery.addJoin(new Join("ProfileToCollection", "CollnToResources", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 1));
        selectQuery.addJoin(new Join("ProfileToCustomerRel", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        selectQuery.addJoin(new Join("ProfileToCollection", "CfgDataToCollection", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 2));
        selectQuery.addJoin(new Join("CfgDataToCollection", "ConfigData", new String[] { "CONFIG_DATA_ID" }, new String[] { "CONFIG_DATA_ID" }, 2));
        selectQuery.addJoin(new Join("ConfigData", "ConfigDataItem", new String[] { "CONFIG_DATA_ID" }, new String[] { "CONFIG_DATA_ID" }, 2));
        selectQuery.addJoin(new Join("ConfigDataItem", "AnnouncementConfigData", new String[] { "CONFIG_DATA_ITEM_ID" }, new String[] { "CONFIG_DATA_ITEM_ID" }, 2));
        selectQuery.addJoin(new Join("AnnouncementConfigData", "Announcement", new String[] { "ANNOUNCEMENT_ID" }, new String[] { "ANNOUNCEMENT_ID" }, 2));
        selectQuery.addJoin(new Join("Announcement", "AnnouncementDetail", new String[] { "ANNOUNCEMENT_ID" }, new String[] { "ANNOUNCEMENT_ID" }, 2));
        final MDMTrackerUtil trackerQueryUtil = new MDMTrackerUtil();
        selectQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdAnnouncementProfile, 4, "ANNOUNCEMENT_PROFILE_COUNT"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(announcementDistributed, 4, "ANNOUNCEMENT_DISTRIBUTED_COUNT"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(announcementNeedsAck, 4, "ANNOUNCEMENT_NEED_ACK_BUTTON"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(announcementFailureCount, 4, "ANNOUNCEMENT_FAILURE_COUNT"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        selectQuery.setGroupByClause(groupByColumn);
        return selectQuery;
    }
    
    private SelectQuery getGroupBulkActionsQuery() {
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("GroupActionHistory"));
        final Criteria notNullGroupActionToCollection = new Criteria(Column.getColumn("GroupActionToCollection", "COLLECTION_ID"), (Object)null, 1);
        final Criteria isRestartAction = new Criteria(Column.getColumn("GroupActionHistory", "ACTION_ID"), (Object)1, 0);
        final Criteria isShutdownAction = new Criteria(Column.getColumn("GroupActionHistory", "ACTION_ID"), (Object)0, 0);
        final Criteria isResetAppsAction = new Criteria(Column.getColumn("GroupActionHistory", "ACTION_ID"), (Object)2, 0);
        final Criteria isScheduledShutdownAction = new Criteria(Column.getColumn("GroupActionHistory", "ACTION_ID"), (Object)0, 0).and(new Criteria(Column.getColumn("GroupActionToCollection", "COLLECTION_ID"), (Object)null, 1));
        final Criteria isScheduledRestartAction = isRestartAction.and(new Criteria(Column.getColumn("GroupActionToCollection", "COLLECTION_ID"), (Object)null, 1));
        final Criteria isRepeat = notNullGroupActionToCollection.and(new Criteria(Column.getColumn("ScheduledCommandToCollection", "EXECUTION_TIME"), (Object)null, 0));
        final Criteria isOnce = notNullGroupActionToCollection.and(new Criteria(Column.getColumn("ScheduledCommandToCollection", "EXECUTION_TIME"), (Object)null, 1));
        final Criteria isDiffrentTimeZone = notNullGroupActionToCollection.and(new Criteria(Column.getColumn("ScheduledTimeZone", "TIME_ZONE"), (Object)null, 1));
        final CaseExpression restartAction = new CaseExpression("GROUP_DEVICE_ACTION_COUNT");
        restartAction.addWhen(isRestartAction, (Object)new Column("GroupActionHistory", "GROUP_ACTION_ID"));
        final CaseExpression shutdownAction = new CaseExpression("GROUP_DEVICE_ACTION_COUNT");
        shutdownAction.addWhen(isShutdownAction, (Object)new Column("GroupActionHistory", "GROUP_ACTION_ID"));
        final CaseExpression resetAppsAction = new CaseExpression("GROUP_RESET_APPS_ACTION_COUNT");
        resetAppsAction.addWhen(isResetAppsAction, (Object)new Column("GroupActionHistory", "GROUP_ACTION_ID"));
        final CaseExpression scheduledRestartAction = new CaseExpression("GROUP_SCHEDULED_RESTART_ACTION_COUNT");
        scheduledRestartAction.addWhen(isScheduledRestartAction, (Object)new Column("GroupActionHistory", "GROUP_ACTION_ID"));
        final CaseExpression scheduledShutdownAction = new CaseExpression("GROUP_SCHEDULED_SHUTDOWN_ACTION_COUNT");
        scheduledShutdownAction.addWhen(isScheduledShutdownAction, (Object)new Column("GroupActionHistory", "GROUP_ACTION_ID"));
        final CaseExpression scheduledRepeatAction = new CaseExpression("GROUP_SCHEDULED_REPEAT_ACTION_COUNT");
        scheduledRepeatAction.addWhen(isRepeat, (Object)new Column("GroupActionHistory", "GROUP_ACTION_ID"));
        final CaseExpression scheduledOnceAction = new CaseExpression("GROUP_SCHEDULED_ONCE_ACTION_COUNT");
        scheduledOnceAction.addWhen(isOnce, (Object)new Column("GroupActionHistory", "GROUP_ACTION_ID"));
        final CaseExpression diffrentTimeZoneAction = new CaseExpression("GROUP_SCHEDULED_DIFFRENT_TIMEZONE_ACTION_COUNT");
        diffrentTimeZoneAction.addWhen(isDiffrentTimeZone, (Object)new Column("ScheduledTimeZone", "TIME_ZONE"));
        selectQuery.addJoin(new Join("GroupActionHistory", "CustomGroup", new String[] { "GROUP_ID" }, new String[] { "RESOURCE_ID" }, 1));
        selectQuery.addJoin(new Join("CustomGroup", "Resource", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 1));
        selectQuery.addJoin(new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        selectQuery.addJoin(new Join("GroupActionHistory", "GroupActionToCollection", new String[] { "GROUP_ACTION_ID" }, new String[] { "GROUP_ACTION_ID" }, 1));
        selectQuery.addJoin(new Join("GroupActionToCollection", "ScheduledCommandToCollection", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 1));
        selectQuery.addJoin(new Join("GroupActionToCollection", "ScheduledTimeZone", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 1));
        final MDMTrackerUtil trackerQueryUtil = new MDMTrackerUtil();
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(restartAction, 4, "RESTART_GROUP_ACTION_COUNT"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(shutdownAction, 4, "SHUTDOWN_GROUP_ACTION_COUNT"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(resetAppsAction, 4, "RESET_APPS_GROUP_ACTION_COUNT"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(scheduledRestartAction, 4, "SCHEDULED_RESTART_GROUP_ACTION_COUNT"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(scheduledShutdownAction, 4, "SCHEDULED_SHUTDOWN_GROUP_ACTION_COUNT"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(scheduledRepeatAction, 4, "REAPEAT_GROUP_ACTION_COUNT"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(scheduledOnceAction, 4, "ONCE_GROUP_ACTION_COUNT"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(diffrentTimeZoneAction, 4, "DIFFRENT_TIMEZONE_GROUP_ACTION_COUNT"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        selectQuery.setGroupByClause(groupByColumn);
        return selectQuery;
    }
    
    private SelectQuery getDeviceBulkActionsQuery() {
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("DeviceActionHistory"));
        final Criteria isRestartAction = new Criteria(Column.getColumn("DeviceActionHistory", "ACTION_ID"), (Object)1, 0);
        final Criteria isShutdownAction = new Criteria(Column.getColumn("DeviceActionHistory", "ACTION_ID"), (Object)0, 0);
        final Criteria isResetAppsAction = new Criteria(Column.getColumn("DeviceActionHistory", "ACTION_ID"), (Object)2, 0);
        final CaseExpression restartAction = new CaseExpression("DEVICE_RESTART_ACTION_COUNT");
        restartAction.addWhen(isRestartAction, (Object)new Column("DeviceActionHistory", "DEVICE_ACTION_ID"));
        final CaseExpression shutdownAction = new CaseExpression("DEVICE_SHUTDOWN_ACTION_COUNT");
        shutdownAction.addWhen(isShutdownAction, (Object)new Column("DeviceActionHistory", "DEVICE_ACTION_ID"));
        final CaseExpression resetAppsAction = new CaseExpression("DEVICE_RESET_APPS_ACTION_COUNT");
        resetAppsAction.addWhen(isResetAppsAction, (Object)new Column("DeviceActionHistory", "DEVICE_ACTION_ID"));
        selectQuery.addJoin(new Join("DeviceActionHistory", "CommandHistory", new String[] { "COMMAND_HISTORY_ID" }, new String[] { "COMMAND_HISTORY_ID" }, 1));
        selectQuery.addJoin(new Join("CommandHistory", "Resource", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 1));
        selectQuery.addJoin(new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        final MDMTrackerUtil trackerQueryUtil = new MDMTrackerUtil();
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(restartAction, 4, "RESTART_DEVICE_ACTION_COUNT"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(shutdownAction, 4, "SHUTDOWN_DEVICE_ACTION_COUNT"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(resetAppsAction, 4, "RESET_APPS_DEVICE_ACTION_COUNT"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        selectQuery.setGroupByClause(groupByColumn);
        return selectQuery;
    }
    
    private SelectQuery osUpdateMgmtQuery() {
        final Column profileIDColumn = new Column("Profile", "PROFILE_ID");
        final Criteria isCreatedProfile = new Criteria(new Column("Profile", "PROFILE_ID"), (Object)new Column("RecentProfileToColln", "PROFILE_ID"), 0);
        final Criteria isGroupAssociatedProfile = new Criteria(new Column("Profile", "PROFILE_ID"), (Object)new Column("RecentProfileForGroup", "PROFILE_ID"), 0);
        final Criteria isDeviceAssociatedProfile = new Criteria(new Column("Profile", "PROFILE_ID"), (Object)new Column("RecentProfileForResource", "PROFILE_ID"), 0);
        final Criteria isOSUpdateProfile = new Criteria(new Column("Profile", "PROFILE_TYPE"), (Object)3, 0);
        final Criteria isIosPlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)1, 0);
        final Criteria isAndroidPlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)2, 0);
        final Criteria isChromePlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)4, 0);
        final Criteria isWindowPolicy = new Criteria(new Column("DeploymentWindowTemplate", "DEPLOYMENT_TEMPLATE_ID"), (Object)null, 1);
        final Criteria isNotifyPolicy = new Criteria(new Column("DeploymentNotifTemplate", "DEPLOYMENT_TEMPLATE_ID"), (Object)null, 1);
        final Criteria isForceInstallPolicy = new Criteria(new Column("OSUpdatePolicy", "POLICY_TYPE"), (Object)2, 0);
        final Criteria isDifferInstallPolicy = new Criteria(new Column("OSUpdatePolicy", "POLICY_TYPE"), (Object)3, 0);
        final Criteria isRuggedPolicy = new Criteria(new Column("OSUpdatePolicy", "POLICY_TYPE"), (Object)4, 0);
        final CaseExpression createdMDMProfile = new CaseExpression("OS_PROFILE_COUNT");
        createdMDMProfile.addWhen(isCreatedProfile.and(isOSUpdateProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdAndroidProfile = new CaseExpression("ANDROID_OS_PROFILE_COUNT");
        createdAndroidProfile.addWhen(isCreatedProfile.and(isOSUpdateProfile).and(isAndroidPlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdIosProfile = new CaseExpression("IOS_OS_PROFILE_COUNT");
        createdIosProfile.addWhen(isCreatedProfile.and(isOSUpdateProfile).and(isIosPlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdChromeProfile = new CaseExpression("CHROME_OS_PROFILE_COUNT");
        createdChromeProfile.addWhen(isCreatedProfile.and(isOSUpdateProfile).and(isChromePlatform), (Object)profileIDColumn);
        final Criteria isAssoicatedProfile = isGroupAssociatedProfile.or(isDeviceAssociatedProfile).and(isOSUpdateProfile);
        final CaseExpression associatedMDMProfile = new CaseExpression("ASSOCIATED_OS_PROFILE_COUNT");
        associatedMDMProfile.addWhen(isAssoicatedProfile, (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedAndroidOSProfile = new CaseExpression("ASSOCIATED_ANDROID_OS_PROFILE_COUNT");
        associatedAndroidOSProfile.addWhen(isAssoicatedProfile.and(isAndroidPlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedIosOSProfile = new CaseExpression("ASSOCIATED_IOS_OS_PROFILE_COUNT");
        associatedIosOSProfile.addWhen(isAssoicatedProfile.and(isIosPlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedChromeOSProfile = new CaseExpression("ASSOCIATED_CHROME_OS_PROFILE_COUNT");
        associatedChromeOSProfile.addWhen(isAssoicatedProfile.and(isChromePlatform), (Object)profileIDColumn);
        final CaseExpression associatedWindowProfile = new CaseExpression("ASSOCIATED_WINDOW_POLICY_OS_PROFILE_COUNT");
        associatedWindowProfile.addWhen(isGroupAssociatedProfile.or(isDeviceAssociatedProfile).and(isOSUpdateProfile).and(isWindowPolicy), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedNotifyProfile = new CaseExpression("ASSOCIATED_NOTIFY_POLICY_OS_PROFILE_COUNT");
        associatedNotifyProfile.addWhen(isGroupAssociatedProfile.or(isDeviceAssociatedProfile).and(isOSUpdateProfile).and(isNotifyPolicy), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedForceProfile = new CaseExpression("ASSOCIATED_FORCE_POLICY_OS_PROFILE_COUNT");
        associatedForceProfile.addWhen(isGroupAssociatedProfile.or(isDeviceAssociatedProfile).and(isOSUpdateProfile).and(isForceInstallPolicy), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedDifferProfile = new CaseExpression("ASSOCIATED_DIFFER_POLICY_OS_PROFILE_COUNT");
        associatedDifferProfile.addWhen(isGroupAssociatedProfile.or(isDeviceAssociatedProfile).and(isOSUpdateProfile).and(isDifferInstallPolicy), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedRuggedProfile = new CaseExpression("RUGGED_POLICY_OS_PROFILE_COUNT");
        associatedRuggedProfile.addWhen(isOSUpdateProfile.and(isRuggedPolicy), (Object)new Column("Profile", "PROFILE_ID"));
        final SelectQuery osProfileQuery = (SelectQuery)new SelectQueryImpl(new Table("Profile"));
        osProfileQuery.addJoin(new Join("Profile", "RecentProfileToColln", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1));
        osProfileQuery.addJoin(new Join("Profile", "RecentPubProfileToColln", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1));
        osProfileQuery.addJoin(new Join("Profile", "RecentProfileForGroup", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1));
        osProfileQuery.addJoin(new Join("Profile", "RecentProfileForResource", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1));
        osProfileQuery.addJoin(new Join("Profile", "ProfileToCustomerRel", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2));
        osProfileQuery.addJoin(new Join("ProfileToCustomerRel", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        osProfileQuery.addJoin(new Join("RecentProfileToColln", "OSUpdatePolicy", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 2));
        osProfileQuery.addJoin(new Join("OSUpdatePolicy", "DeploymentTempToOSUpdate", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 1));
        osProfileQuery.addJoin(new Join("DeploymentTempToOSUpdate", "MdmDeploymentTemplate", new String[] { "DEPLOYMENT_TEMPLATE_ID" }, new String[] { "DEPLOYMENT_TEMPLATE_ID" }, 1));
        osProfileQuery.addJoin(new Join("MdmDeploymentTemplate", "DeploymentWindowTemplate", new String[] { "DEPLOYMENT_TEMPLATE_ID" }, new String[] { "DEPLOYMENT_TEMPLATE_ID" }, 1));
        osProfileQuery.addJoin(new Join("MdmDeploymentTemplate", "DeploymentNotifTemplate", new String[] { "DEPLOYMENT_TEMPLATE_ID" }, new String[] { "DEPLOYMENT_TEMPLATE_ID" }, 1));
        final MDMTrackerUtil trackerQueryUtil = new MDMTrackerUtil();
        osProfileQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        osProfileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdMDMProfile, 4, "OS_PROFILE_COUNT"));
        osProfileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdAndroidProfile, 4, "ANDROID_OS_PROFILE_COUNT"));
        osProfileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdIosProfile, 4, "IOS_OS_PROFILE_COUNT"));
        osProfileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdChromeProfile, 4, "CHROME_OS_PROFILE_COUNT"));
        osProfileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedMDMProfile, 4, "ASSOCIATED_OS_PROFILE_COUNT"));
        osProfileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedAndroidOSProfile, 4, "ASSOCIATED_ANDROID_OS_PROFILE_COUNT"));
        osProfileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedIosOSProfile, 4, "ASSOCIATED_IOS_OS_PROFILE_COUNT"));
        osProfileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedWindowProfile, 4, "ASSOCIATED_WINDOW_POLICY_OS_PROFILE_COUNT"));
        osProfileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedNotifyProfile, 4, "ASSOCIATED_NOTIFY_POLICY_OS_PROFILE_COUNT"));
        osProfileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedForceProfile, 4, "ASSOCIATED_FORCE_POLICY_OS_PROFILE_COUNT"));
        osProfileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedDifferProfile, 4, "ASSOCIATED_DIFFER_POLICY_OS_PROFILE_COUNT"));
        osProfileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedChromeOSProfile, 4, "ASSOCIATED_CHROME_OS_PROFILE_COUNT"));
        osProfileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedRuggedProfile, 4, "RUGGED_OS_PROFILE_COUNT"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        osProfileQuery.setGroupByClause(groupByColumn);
        return osProfileQuery;
    }
    
    private SelectQuery pendingUpdatesQuery() {
        final Criteria isIosPlatform = new Criteria(new Column("ManagedDevice", "PLATFORM_TYPE"), (Object)1, 0);
        final Criteria isAndroidPlatform = new Criteria(new Column("ManagedDevice", "PLATFORM_TYPE"), (Object)2, 0);
        final CaseExpression androidCount = new CaseExpression("PENDING_ANDROID_DEVICE");
        androidCount.addWhen(isAndroidPlatform, (Object)new Column("ManagedDevice", "RESOURCE_ID"));
        final CaseExpression iosCount = new CaseExpression("PENDING_IOS_DEVICE");
        androidCount.addWhen(isIosPlatform, (Object)new Column("ManagedDevice", "RESOURCE_ID"));
        final SelectQuery osUpdatePendingQuery = (SelectQuery)new SelectQueryImpl(new Table("DeviceAvailableOSUpdates"));
        osUpdatePendingQuery.addJoin(new Join("DeviceAvailableOSUpdates", "ManagedDevice", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        osUpdatePendingQuery.addJoin(new Join("ManagedDevice", "Resource", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        osUpdatePendingQuery.addJoin(new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        final MDMTrackerUtil trackerQueryUtil = new MDMTrackerUtil();
        osUpdatePendingQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        osUpdatePendingQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(androidCount, 4, "PENDING_ANDROID_COUNT"));
        osUpdatePendingQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(iosCount, 4, "PENDING_IOS_COUNT"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        osUpdatePendingQuery.setGroupByClause(groupByColumn);
        return osUpdatePendingQuery;
    }
    
    public Column getSumCaseExpressionColumn(final CaseExpression expression, final int datatype, final String columnAlias) {
        final Column selectColumn = (Column)Column.createFunction("SUM", new Object[] { expression });
        selectColumn.setType(datatype);
        selectColumn.setColumnAlias(columnAlias);
        return selectColumn;
    }
    
    public Column getSumColumn(final Column column, final String columnAlias) {
        final Column summationCol = column.summation();
        summationCol.setColumnAlias(columnAlias);
        return summationCol;
    }
    
    @Deprecated
    private SelectQuery profileassociatedQuery() {
        final Criteria isMDMAppProfile = new Criteria(new Column("Profile", "PROFILE_TYPE"), (Object)2, 0);
        final Criteria isMDMProfile = new Criteria(new Column("Profile", "PROFILE_TYPE"), (Object)1, 0);
        final Criteria isIosPlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)1, 0);
        final Criteria isAndroidPlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)2, 0);
        final Criteria isWindowsPlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)3, 0);
        final Criteria isGroupAssociatedProfile = new Criteria(new Column("Profile", "PROFILE_ID"), (Object)new Column("RecentProfileForGroup", "PROFILE_ID"), 0);
        final Criteria isDeviceAssociatedProfile = new Criteria(new Column("Profile", "PROFILE_ID"), (Object)new Column("RecentProfileForResource", "PROFILE_ID"), 0);
        final CaseExpression groupAssociatedAppProfile = new CaseExpression("ASSOCIATED_APP_COUNT");
        groupAssociatedAppProfile.addWhen(isGroupAssociatedProfile.and(isMDMAppProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression groupAssociatedMDMProfile = new CaseExpression("ASSOCIATED_PROFILE_COUNT");
        groupAssociatedMDMProfile.addWhen(isGroupAssociatedProfile.and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression groupAssociatedIOSProfile = new CaseExpression("ASSOCIATED_IOS_PROFILE_COUNT");
        groupAssociatedIOSProfile.addWhen(isGroupAssociatedProfile.and(isIosPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression groupAssociatedAndroidProfile = new CaseExpression("ASSOCIATED_ANDROID_PROFILE_COUNT");
        groupAssociatedAndroidProfile.addWhen(isGroupAssociatedProfile.and(isAndroidPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression groupAssociatedWindowsProfile = new CaseExpression("ASSOCIATED_WINDOWS_PROFILE_COUNT");
        groupAssociatedWindowsProfile.addWhen(isGroupAssociatedProfile.and(isWindowsPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression groupAssociatedIosAppRepCount = new CaseExpression("ASSOCIATED_IOS_APP_REPOSITORY_COUNT");
        groupAssociatedIosAppRepCount.addWhen(isGroupAssociatedProfile.and(isIosPlatform).and(isMDMAppProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression groupAssociatedAndroidAppRepCount = new CaseExpression("ASSOCIATED_ANDROID_APP_REPOSITORY_COUNT");
        groupAssociatedAndroidAppRepCount.addWhen(isGroupAssociatedProfile.and(isAndroidPlatform).and(isMDMAppProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression groupAssociatedWindowsAppRepCount = new CaseExpression("ASSOCIATED_WINDOWS_APP_REPOSITORY_COUNT");
        groupAssociatedWindowsAppRepCount.addWhen(isGroupAssociatedProfile.and(isWindowsPlatform).and(isMDMAppProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression deviceAssociatedAppProfile = new CaseExpression("ASSOCIATED_APP_COUNT");
        deviceAssociatedAppProfile.addWhen(isDeviceAssociatedProfile.and(isMDMAppProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression deviceAssociatedMDMProfile = new CaseExpression("ASSOCIATED_PROFILE_COUNT");
        deviceAssociatedMDMProfile.addWhen(isDeviceAssociatedProfile.and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression deviceAssociatedIOSProfile = new CaseExpression("ASSOCIATED_IOS_PROFILE_COUNT");
        deviceAssociatedIOSProfile.addWhen(isDeviceAssociatedProfile.and(isIosPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression deviceAssociatedAndroidProfile = new CaseExpression("ASSOCIATED_ANDROID_PROFILE_COUNT");
        deviceAssociatedAndroidProfile.addWhen(isDeviceAssociatedProfile.and(isAndroidPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression deviceAssociatedWindowsProfile = new CaseExpression("ASSOCIATED_WINDOWS_PROFILE_COUNT");
        deviceAssociatedWindowsProfile.addWhen(isDeviceAssociatedProfile.and(isWindowsPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression deviceAssociatedIosAppRepCount = new CaseExpression("ASSOCIATED_IOS_APP_REPOSITORY_COUNT");
        deviceAssociatedIosAppRepCount.addWhen(isDeviceAssociatedProfile.and(isIosPlatform).and(isMDMAppProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression deviceAssociatedAndroidAppRepCount = new CaseExpression("ASSOCIATED_ANDROID_APP_REPOSITORY_COUNT");
        deviceAssociatedAndroidAppRepCount.addWhen(isDeviceAssociatedProfile.and(isAndroidPlatform).and(isMDMAppProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression deviceAssociatedWindowsAppRepCount = new CaseExpression("ASSOCIATED_WINDOWS_APP_REPOSITORY_COUNT");
        deviceAssociatedWindowsAppRepCount.addWhen(isDeviceAssociatedProfile.and(isWindowsPlatform).and(isMDMAppProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final SelectQuery profileToGroupQuery = (SelectQuery)new SelectQueryImpl(new Table("Profile"));
        profileToGroupQuery.addSelectColumn(Column.getColumn("Profile", "PROFILE_ID"));
        profileToGroupQuery.addSelectColumn(this.getSumCaseExpressionColumn(groupAssociatedIOSProfile, 4, "ASSOCIATED_IOS_PROFILE_COUNT"));
        profileToGroupQuery.addSelectColumn(this.getSumCaseExpressionColumn(groupAssociatedAndroidProfile, 4, "ASSOCIATED_ANDROID_PROFILE_COUNT"));
        profileToGroupQuery.addSelectColumn(this.getSumCaseExpressionColumn(groupAssociatedWindowsProfile, 4, "ASSOCIATED_WINDOWS_PROFILE_COUNT"));
        profileToGroupQuery.addSelectColumn(this.getSumCaseExpressionColumn(groupAssociatedIosAppRepCount, 4, "ASSOCIATED_IOS_APP_REPOSITORY_COUNT"));
        profileToGroupQuery.addSelectColumn(this.getSumCaseExpressionColumn(groupAssociatedAndroidAppRepCount, 4, "ASSOCIATED_ANDROID_APP_REPOSITORY_COUNT"));
        profileToGroupQuery.addSelectColumn(this.getSumCaseExpressionColumn(groupAssociatedWindowsAppRepCount, 4, "ASSOCIATED_WINDOWS_APP_REPOSITORY_COUNT"));
        profileToGroupQuery.addSelectColumn(this.getSumCaseExpressionColumn(groupAssociatedMDMProfile, 4, "ASSOCIATED_PROFILE_COUNT"));
        profileToGroupQuery.addSelectColumn(this.getSumCaseExpressionColumn(groupAssociatedAppProfile, 4, "ASSOCIATED_APP_COUNT"));
        profileToGroupQuery.addJoin(new Join("Profile", "RecentProfileForGroup", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1));
        profileToGroupQuery.addGroupByColumn(Column.getColumn("Profile", "PROFILE_ID"));
        final SelectQuery profileToResourceQuery = (SelectQuery)new SelectQueryImpl(new Table("Profile"));
        profileToResourceQuery.addSelectColumn(Column.getColumn("Profile", "PROFILE_ID"));
        profileToResourceQuery.addJoin(new Join("Profile", "RecentProfileForResource", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1));
        profileToResourceQuery.addGroupByColumn(Column.getColumn("Profile", "PROFILE_ID"));
        profileToResourceQuery.addSelectColumn(this.getSumCaseExpressionColumn(deviceAssociatedIOSProfile, 4, "ASSOCIATED_IOS_PROFILE_COUNT"));
        profileToResourceQuery.addSelectColumn(this.getSumCaseExpressionColumn(deviceAssociatedAndroidProfile, 4, "ASSOCIATED_ANDROID_PROFILE_COUNT"));
        profileToResourceQuery.addSelectColumn(this.getSumCaseExpressionColumn(deviceAssociatedWindowsProfile, 4, "ASSOCIATED_WINDOWS_PROFILE_COUNT"));
        profileToResourceQuery.addSelectColumn(this.getSumCaseExpressionColumn(deviceAssociatedIosAppRepCount, 4, "ASSOCIATED_IOS_APP_REPOSITORY_COUNT"));
        profileToResourceQuery.addSelectColumn(this.getSumCaseExpressionColumn(deviceAssociatedAndroidAppRepCount, 4, "ASSOCIATED_ANDROID_APP_REPOSITORY_COUNT"));
        profileToResourceQuery.addSelectColumn(this.getSumCaseExpressionColumn(deviceAssociatedWindowsAppRepCount, 4, "ASSOCIATED_WINDOWS_APP_REPOSITORY_COUNT"));
        profileToResourceQuery.addSelectColumn(this.getSumCaseExpressionColumn(deviceAssociatedMDMProfile, 4, "ASSOCIATED_PROFILE_COUNT"));
        profileToResourceQuery.addSelectColumn(this.getSumCaseExpressionColumn(deviceAssociatedAppProfile, 4, "ASSOCIATED_APP_COUNT"));
        final Criteria isCreatedProfile = new Criteria(new Column("Profile", "PROFILE_ID"), (Object)new Column("RecentProfileToColln", "PROFILE_ID"), 0);
        final Criteria isPublishedProfile = new Criteria(new Column("Profile", "PROFILE_ID"), (Object)new Column("RecentPubProfileToColln", "PROFILE_ID"), 0);
        final CaseExpression createdMDMProfile = new CaseExpression("PROFILE_COUNT");
        createdMDMProfile.addWhen(isCreatedProfile.and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression publishedMDMProfile = new CaseExpression("PUBLISHED_PROFILE_COUNT");
        publishedMDMProfile.addWhen(isPublishedProfile.and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression publishedAppProfile = new CaseExpression("PUBLISHED_APP_COUNT");
        publishedAppProfile.addWhen(isPublishedProfile.and(isMDMAppProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdIOSProfile = new CaseExpression("CREATED_IOS_PROFILE_COUNT");
        createdIOSProfile.addWhen(isCreatedProfile.and(isIosPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdAndroidProfile = new CaseExpression("CREATED_ANDROID_PROFILE_COUNT");
        createdAndroidProfile.addWhen(isCreatedProfile.and(isAndroidPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdWindowsProfile = new CaseExpression("CREATED_WINDOWS_PROFILE_COUNT");
        createdWindowsProfile.addWhen(isCreatedProfile.and(isWindowsPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression publishedIOSProfile = new CaseExpression("PUBLISHED_IOS_PROFILE_COUNT");
        publishedIOSProfile.addWhen(isPublishedProfile.and(isIosPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression publishedAndroidProfile = new CaseExpression("PUBLISHED_ANDROID_PROFILE_COUNT");
        publishedAndroidProfile.addWhen(isPublishedProfile.and(isAndroidPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression publishedWindowsProfile = new CaseExpression("PUBLISHED_WINDOWS_PROFILE_COUNT");
        publishedWindowsProfile.addWhen(isPublishedProfile.and(isWindowsPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdIosAppRepCount = new CaseExpression("CREATED_IOS_APP_REPOSITORY_COUNT");
        createdIosAppRepCount.addWhen(isCreatedProfile.and(isIosPlatform).and(isMDMAppProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdAndroidAppRepCount = new CaseExpression("CREATED_ANDROID_APP_REPOSITORY_COUNT");
        createdAndroidAppRepCount.addWhen(isCreatedProfile.and(isAndroidPlatform).and(isMDMAppProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdWindowsAppRepCount = new CaseExpression("CREATED_WINDOWS_APP_REPOSITORY_COUNT");
        createdWindowsAppRepCount.addWhen(isCreatedProfile.and(isWindowsPlatform).and(isMDMAppProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final SelectQuery associationQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("Profile"));
        final DerivedTable profileToGroupQuerySubTable = new DerivedTable("ProfileToGroupQuery", (Query)profileToGroupQuery);
        associationQuery.addJoin(new Join(Table.getTable("Profile"), (Table)profileToGroupQuerySubTable, new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1));
        final DerivedTable profileToResourceQuerySubTable = new DerivedTable("ProfileToResourceQuery", (Query)profileToResourceQuery);
        associationQuery.addJoin(new Join(Table.getTable("Profile"), (Table)profileToResourceQuerySubTable, new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1));
        associationQuery.addJoin(new Join("Profile", "RecentProfileToColln", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1));
        associationQuery.addJoin(new Join("Profile", "RecentPubProfileToColln", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1));
        associationQuery.addJoin(new Join(Table.getTable("Profile"), Table.getTable("ProfileToCustomerRel"), new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2));
        associationQuery.addJoin(new Join(Table.getTable("ProfileToCustomerRel"), Table.getTable("CustomerInfo"), new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        final Criteria associatedProfileToDevice = new Criteria(Column.getColumn(profileToResourceQuerySubTable.getTableName(), "ASSOCIATED_PROFILE_COUNT"), (Object)0, 5);
        final Criteria associatedProfileToGroup = new Criteria(Column.getColumn(profileToGroupQuerySubTable.getTableName(), "ASSOCIATED_PROFILE_COUNT"), (Object)0, 5);
        final Criteria associatedAppToDevice = new Criteria(Column.getColumn(profileToResourceQuerySubTable.getTableName(), "ASSOCIATED_APP_COUNT"), (Object)0, 5);
        final Criteria associatedAppToGroup = new Criteria(Column.getColumn(profileToGroupQuerySubTable.getTableName(), "ASSOCIATED_APP_COUNT"), (Object)0, 5);
        final Criteria associatedIOSProfileToDevice = new Criteria(Column.getColumn(profileToResourceQuerySubTable.getTableName(), "ASSOCIATED_IOS_PROFILE_COUNT"), (Object)0, 5);
        final Criteria associatedIOSProfileToGroup = new Criteria(Column.getColumn(profileToGroupQuerySubTable.getTableName(), "ASSOCIATED_IOS_PROFILE_COUNT"), (Object)0, 5);
        final Criteria associatedAndroidProfileToDevice = new Criteria(Column.getColumn(profileToResourceQuerySubTable.getTableName(), "ASSOCIATED_ANDROID_PROFILE_COUNT"), (Object)0, 5);
        final Criteria associatedAndroidProfileToGroup = new Criteria(Column.getColumn(profileToGroupQuerySubTable.getTableName(), "ASSOCIATED_ANDROID_PROFILE_COUNT"), (Object)0, 5);
        final Criteria associatedWinProfileToDevice = new Criteria(Column.getColumn(profileToResourceQuerySubTable.getTableName(), "ASSOCIATED_WINDOWS_PROFILE_COUNT"), (Object)0, 5);
        final Criteria associatedWinProfileToGroup = new Criteria(Column.getColumn(profileToGroupQuerySubTable.getTableName(), "ASSOCIATED_WINDOWS_PROFILE_COUNT"), (Object)0, 5);
        final Criteria associatedIOSAppToDevice = new Criteria(Column.getColumn(profileToResourceQuerySubTable.getTableName(), "ASSOCIATED_IOS_APP_REPOSITORY_COUNT"), (Object)0, 5);
        final Criteria associatedIOSAppToGroup = new Criteria(Column.getColumn(profileToGroupQuerySubTable.getTableName(), "ASSOCIATED_IOS_APP_REPOSITORY_COUNT"), (Object)0, 5);
        final Criteria associatedAndroidAppToDevice = new Criteria(Column.getColumn(profileToResourceQuerySubTable.getTableName(), "ASSOCIATED_ANDROID_APP_REPOSITORY_COUNT"), (Object)0, 5);
        final Criteria associatedAndroidAppToGroup = new Criteria(Column.getColumn(profileToGroupQuerySubTable.getTableName(), "ASSOCIATED_ANDROID_APP_REPOSITORY_COUNT"), (Object)0, 5);
        final Criteria associatedWinAppToDevice = new Criteria(Column.getColumn(profileToResourceQuerySubTable.getTableName(), "ASSOCIATED_WINDOWS_APP_REPOSITORY_COUNT"), (Object)0, 5);
        final Criteria associatedWinAppToGroup = new Criteria(Column.getColumn(profileToGroupQuerySubTable.getTableName(), "ASSOCIATED_WINDOWS_APP_REPOSITORY_COUNT"), (Object)0, 5);
        final CaseExpression associatedMDMProfile = new CaseExpression("ASSOCIATED_PROFILE_COUNT");
        associatedMDMProfile.addWhen(associatedProfileToGroup.or(associatedProfileToDevice), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedAppProfile = new CaseExpression("ASSOCIATED_APP_COUNT");
        associatedAppProfile.addWhen(associatedAppToDevice.or(associatedAppToGroup), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedIOSProfile = new CaseExpression("ASSOCIATED_IOS_PROFILE_COUNT");
        associatedIOSProfile.addWhen(associatedIOSProfileToDevice.or(associatedIOSProfileToGroup), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedAndroidProfile = new CaseExpression("ASSOCIATED_ANDROID_PROFILE_COUNT");
        associatedAndroidProfile.addWhen(associatedAndroidProfileToDevice.or(associatedAndroidProfileToGroup), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedWindowsProfile = new CaseExpression("ASSOCIATED_WINDOWS_PROFILE_COUNT");
        associatedWindowsProfile.addWhen(associatedWinProfileToDevice.or(associatedWinProfileToGroup), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedIosAppRepCount = new CaseExpression("ASSOCIATED_IOS_APP_REPOSITORY_COUNT");
        associatedIosAppRepCount.addWhen(associatedIOSAppToDevice.or(associatedIOSAppToGroup), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedAndroidAppRepCount = new CaseExpression("ASSOCIATED_ANDROID_APP_REPOSITORY_COUNT");
        associatedAndroidAppRepCount.addWhen(associatedAndroidAppToDevice.or(associatedAndroidAppToGroup), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedWindowsAppRepCount = new CaseExpression("ASSOCIATED_WINDOWS_APP_REPOSITORY_COUNT");
        associatedWindowsAppRepCount.addWhen(associatedWinAppToDevice.or(associatedWinAppToGroup), (Object)new Column("Profile", "PROFILE_ID"));
        final MDMTrackerUtil trackerQueryUtil = new MDMTrackerUtil();
        associationQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdMDMProfile, 4, "PROFILE_COUNT"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(publishedMDMProfile, 4, "PUBLISHED_PROFILE_COUNT"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedMDMProfile, 4, "ASSOCIATED_PROFILE_COUNT"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(publishedAppProfile, 4, "PUBLISHED_APP_COUNT"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedAppProfile, 4, "ASSOCIATED_APP_COUNT"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdIOSProfile, 4, "CREATED_IOS_PROFILE_COUNT"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdAndroidProfile, 4, "CREATED_ANDROID_PROFILE_COUNT"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdWindowsProfile, 4, "CREATED_WINDOWS_PROFILE_COUNT"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(publishedIOSProfile, 4, "PUBLISHED_IOS_PROFILE_COUNT"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(publishedAndroidProfile, 4, "PUBLISHED_ANDROID_PROFILE_COUNT"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(publishedWindowsProfile, 4, "PUBLISHED_WINDOWS_PROFILE_COUNT"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedIOSProfile, 4, "ASSOCIATED_IOS_PROFILE_COUNT"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedAndroidProfile, 4, "ASSOCIATED_ANDROID_PROFILE_COUNT"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedWindowsProfile, 4, "ASSOCIATED_WINDOWS_PROFILE_COUNT"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdIosAppRepCount, 4, "CREATED_IOS_APP_REPOSITORY_COUNT"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdAndroidAppRepCount, 4, "CREATED_ANDROID_APP_REPOSITORY_COUNT"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdWindowsAppRepCount, 4, "CREATED_WINDOWS_APP_REPOSITORY_COUNT"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedIosAppRepCount, 4, "ASSOCIATED_IOS_APP_REPOSITORY_COUNT"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedAndroidAppRepCount, 4, "ASSOCIATED_ANDROID_APP_REPOSITORY_COUNT"));
        associationQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedWindowsAppRepCount, 4, "ASSOCIATED_WINDOWS_APP_REPOSITORY_COUNT"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        associationQuery.setGroupByClause(groupByColumn);
        return associationQuery;
    }
    
    private SelectQuery appQuery() {
        final Criteria isProductionApp = AppVersionDBUtil.getInstance().getApprovedAppVersionCriteria();
        final Criteria isBetaApp = AppVersionDBUtil.getInstance().getNonApprovedAppVersionCriteria();
        final Criteria isProductionAppAssociatedForGroup = new Criteria(new Column("ApprovedAppCollnGroupToAppGrpColln", "APP_VERSION_STATUS"), (Object)AppMgmtConstants.APP_VERSION_APPROVED, 0);
        final Criteria isBetaAppAssociatedForGroup = new Criteria(new Column("ApprovedAppCollnGroupToAppGrpColln", "APP_VERSION_STATUS"), (Object)null, 0);
        final Criteria associatedCollnNotNullForGroup = new Criteria(new Column("ApprovedAppCollnGroupToAppGrpColln", "COLLECTION_ID"), (Object)null, 1);
        final Criteria isGroupAssociatedProfile = new Criteria(new Column("AppGroupToCollection", "APP_GROUP_ID"), (Object)new Column("MdAppCatalogToGroup", "APP_GROUP_ID"), 0);
        final Criteria isProductionAppAssociatedForRes = new Criteria(new Column("ApprovedAppCollnResourceToAppGrpColln", "APP_VERSION_STATUS"), (Object)AppMgmtConstants.APP_VERSION_APPROVED, 0);
        final Criteria isBetaAppAssociatedForRes = new Criteria(new Column("ApprovedAppCollnResourceToAppGrpColln", "APP_VERSION_STATUS"), (Object)null, 0);
        final Criteria associatedCollnNotNullForResource = new Criteria(new Column("ApprovedAppCollnResourceToAppGrpColln", "COLLECTION_ID"), (Object)null, 1);
        final Criteria isDeviceAssociatedProfile = new Criteria(new Column("AppGroupToCollection", "APP_GROUP_ID"), (Object)new Column("MdAppCatalogToResource", "APP_GROUP_ID"), 0);
        final Criteria isIosPlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)1, 0);
        final Criteria isAndroidPlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)2, 0);
        final Criteria isWindowsPlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)3, 0);
        final Criteria isChromePlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)4, 0);
        final CaseExpression publishedApp = new CaseExpression("PUBLISHED_APP_COUNT");
        publishedApp.addWhen(isProductionApp, (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression publishedBetaApp = new CaseExpression("PUBLISHED_BETA_APP_COUNT");
        publishedBetaApp.addWhen(isBetaApp, (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedApp = new CaseExpression("ASSOCIATED_APP_COUNT");
        associatedApp.addWhen(isGroupAssociatedProfile.and(isProductionAppAssociatedForGroup).and(associatedCollnNotNullForGroup).or(isDeviceAssociatedProfile.and(isProductionAppAssociatedForRes).and(associatedCollnNotNullForResource)), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedBetaApp = new CaseExpression("ASSOCIATED_BETA_APP_COUNT");
        associatedBetaApp.addWhen(isGroupAssociatedProfile.and(isBetaAppAssociatedForGroup).and(associatedCollnNotNullForGroup).or(isDeviceAssociatedProfile.and(isBetaAppAssociatedForRes).and(associatedCollnNotNullForResource)), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdIosAppRepCount = new CaseExpression("CREATED_IOS_APP_REPOSITORY_COUNT");
        createdIosAppRepCount.addWhen(isProductionApp.and(isIosPlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdAndroidAppRepCount = new CaseExpression("CREATED_ANDROID_APP_REPOSITORY_COUNT");
        createdAndroidAppRepCount.addWhen(isProductionApp.and(isAndroidPlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdWindowsAppRepCount = new CaseExpression("CREATED_WINDOWS_APP_REPOSITORY_COUNT");
        createdWindowsAppRepCount.addWhen(isProductionApp.and(isWindowsPlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdChromeAppRepCount = new CaseExpression("CREATED_CHROME_APP_REPOSITORY_COUNT");
        createdChromeAppRepCount.addWhen(isProductionApp.and(isChromePlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedIosAppRepCount = new CaseExpression("ASSOCIATED_IOS_APP_REPOSITORY_COUNT");
        associatedIosAppRepCount.addWhen(isGroupAssociatedProfile.and(isProductionAppAssociatedForGroup).and(associatedCollnNotNullForGroup).or(isDeviceAssociatedProfile.and(isProductionAppAssociatedForRes).and(associatedCollnNotNullForResource)).and(isIosPlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedAndroidAppRepCount = new CaseExpression("ASSOCIATED_ANDROID_APP_REPOSITORY_COUNT");
        associatedAndroidAppRepCount.addWhen(isGroupAssociatedProfile.and(isProductionAppAssociatedForGroup).and(associatedCollnNotNullForGroup).or(isDeviceAssociatedProfile.and(isProductionAppAssociatedForRes).and(associatedCollnNotNullForResource)).and(isAndroidPlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedWindowsAppRepCount = new CaseExpression("ASSOCIATED_WINDOWS_APP_REPOSITORY_COUNT");
        associatedWindowsAppRepCount.addWhen(isGroupAssociatedProfile.and(isProductionAppAssociatedForGroup).and(associatedCollnNotNullForGroup).or(isDeviceAssociatedProfile.and(isProductionAppAssociatedForRes).and(associatedCollnNotNullForResource)).and(isWindowsPlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedChromeAppRepCount = new CaseExpression("ASSOCIATED_CHROME_APP_REPOSITORY_COUNT");
        associatedChromeAppRepCount.addWhen(isGroupAssociatedProfile.and(isProductionAppAssociatedForGroup).and(associatedCollnNotNullForGroup).or(isDeviceAssociatedProfile.and(isProductionAppAssociatedForRes).and(associatedCollnNotNullForResource)).and(isChromePlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdBetaIosAppRepCount = new CaseExpression("CREATED_IOS_BETA_APP_REPOSITORY_COUNT");
        createdBetaIosAppRepCount.addWhen(isBetaApp.and(isIosPlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdBetaAndroidAppRepCount = new CaseExpression("CREATED_ANDROID_BETA_APP_REPOSITORY_COUNT");
        createdBetaAndroidAppRepCount.addWhen(isBetaApp.and(isAndroidPlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdBetaWindowsAppRepCount = new CaseExpression("CREATED_WINDOWS_BETA_APP_REPOSITORY_COUNT");
        createdBetaWindowsAppRepCount.addWhen(isBetaApp.and(isWindowsPlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdBetaChromeAppRepCount = new CaseExpression("CREATED_CHROME_BETA_APP_REPOSITORY_COUNT");
        createdBetaChromeAppRepCount.addWhen(isBetaApp.and(isChromePlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedBetaIosAppRepCount = new CaseExpression("ASSOCIATED_IOS_BETA_APP_REPOSITORY_COUNT");
        associatedBetaIosAppRepCount.addWhen(isGroupAssociatedProfile.and(isBetaAppAssociatedForGroup).and(associatedCollnNotNullForGroup).or(isDeviceAssociatedProfile.and(isBetaAppAssociatedForRes).and(associatedCollnNotNullForResource)).and(isIosPlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedBetaAndroidAppRepCount = new CaseExpression("ASSOCIATED_ANDROID_BETA_APP_REPOSITORY_COUNT");
        associatedBetaAndroidAppRepCount.addWhen(isGroupAssociatedProfile.and(isBetaAppAssociatedForGroup).and(associatedCollnNotNullForGroup).or(isDeviceAssociatedProfile.and(isBetaAppAssociatedForRes).and(associatedCollnNotNullForResource)).and(isAndroidPlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedBetaWindowsAppRepCount = new CaseExpression("ASSOCIATED_WINDOWS_BETA_APP_REPOSITORY_COUNT");
        associatedBetaWindowsAppRepCount.addWhen(isGroupAssociatedProfile.and(isBetaAppAssociatedForGroup).and(associatedCollnNotNullForGroup).or(isDeviceAssociatedProfile.and(isBetaAppAssociatedForRes).and(associatedCollnNotNullForResource)).and(isWindowsPlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedBetaChromeAppRepCount = new CaseExpression("ASSOCIATED_CHROME_BETA_APP_REPOSITORY_COUNT");
        associatedBetaChromeAppRepCount.addWhen(isGroupAssociatedProfile.and(isBetaAppAssociatedForGroup).and(associatedCollnNotNullForGroup).or(isDeviceAssociatedProfile.and(isBetaAppAssociatedForRes).and(associatedCollnNotNullForResource)).and(isChromePlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final SelectQuery appQuery = (SelectQuery)new SelectQueryImpl(new Table("Profile"));
        appQuery.addJoin(new Join("Profile", "ProfileToCollection", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2));
        appQuery.addJoin(new Join("ProfileToCollection", "AppGroupToCollection", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 2));
        appQuery.addJoin(new Join("AppGroupToCollection", "AppReleaseLabel", new String[] { "RELEASE_LABEL_ID" }, new String[] { "RELEASE_LABEL_ID" }, 2));
        appQuery.addJoin(new Join("AppGroupToCollection", "MdAppCatalogToGroup", new String[] { "APP_GROUP_ID" }, new String[] { "APP_GROUP_ID" }, 1));
        appQuery.addJoin(new Join("MdAppCatalogToGroup", "MdAppToCollection", new String[] { "APPROVED_APP_ID" }, new String[] { "APP_ID" }, "MdAppCatalogToGroup", "ApprovedAppCollnGroup", 1));
        appQuery.addJoin(new Join("MdAppToCollection", "AppGroupToCollection", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, "ApprovedAppCollnGroup", "ApprovedAppCollnGroupToAppGrpColln", 1));
        appQuery.addJoin(new Join("AppGroupToCollection", "MdAppCatalogToResource", new String[] { "APP_GROUP_ID" }, new String[] { "APP_GROUP_ID" }, 1));
        appQuery.addJoin(new Join("MdAppCatalogToResource", "MdAppToCollection", new String[] { "APPROVED_APP_ID" }, new String[] { "APP_ID" }, "MdAppCatalogToGroup", "ApprovedAppCollnResource", 1));
        appQuery.addJoin(new Join("MdAppToCollection", "AppGroupToCollection", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, "ApprovedAppCollnResource", "ApprovedAppCollnResourceToAppGrpColln", 1));
        appQuery.addJoin(new Join("Profile", "ProfileToCustomerRel", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2));
        appQuery.addJoin(new Join("ProfileToCustomerRel", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        final MDMTrackerUtil trackerQueryUtil = new MDMTrackerUtil();
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(publishedApp, 4, "PUBLISHED_APP_COUNT"));
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(publishedBetaApp, 4, "PUBLISHED_BETA_APP_COUNT"));
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedApp, 4, "ASSOCIATED_APP_COUNT"));
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedBetaApp, 4, "ASSOCIATED_BETA_APP_COUNT"));
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdIosAppRepCount, 4, "CREATED_IOS_APP_REPOSITORY_COUNT"));
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdAndroidAppRepCount, 4, "CREATED_ANDROID_APP_REPOSITORY_COUNT"));
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdWindowsAppRepCount, 4, "CREATED_WINDOWS_APP_REPOSITORY_COUNT"));
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdChromeAppRepCount, 4, "CREATED_CHROME_APP_REPOSITORY_COUNT"));
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedIosAppRepCount, 4, "ASSOCIATED_IOS_APP_REPOSITORY_COUNT"));
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedAndroidAppRepCount, 4, "ASSOCIATED_ANDROID_APP_REPOSITORY_COUNT"));
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedWindowsAppRepCount, 4, "ASSOCIATED_WINDOWS_APP_REPOSITORY_COUNT"));
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedChromeAppRepCount, 4, "ASSOCIATED_CHROME_APP_REPOSITORY_COUNT"));
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdBetaIosAppRepCount, 4, "CREATED_IOS_BETA_APP_REPOSITORY_COUNT"));
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdBetaAndroidAppRepCount, 4, "CREATED_ANDROID_BETA_APP_REPOSITORY_COUNT"));
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdBetaWindowsAppRepCount, 4, "CREATED_WINDOWS_BETA_APP_REPOSITORY_COUNT"));
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdBetaChromeAppRepCount, 4, "CREATED_CHROME_BETA_APP_REPOSITORY_COUNT"));
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedBetaIosAppRepCount, 4, "ASSOCIATED_IOS_BETA_APP_REPOSITORY_COUNT"));
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedBetaAndroidAppRepCount, 4, "ASSOCIATED_ANDROID_BETA_APP_REPOSITORY_COUNT"));
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedBetaWindowsAppRepCount, 4, "ASSOCIATED_WINDOWS_BETA_APP_REPOSITORY_COUNT"));
        appQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedBetaChromeAppRepCount, 4, "ASSOCIATED_CHROME_BETA_APP_REPOSITORY_COUNT"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final Criteria profileTypeAppCriteria = new Criteria(new Column("Profile", "PROFILE_TYPE"), (Object)2, 0);
        appQuery.setCriteria(profileTypeAppCriteria);
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        appQuery.setGroupByClause(groupByColumn);
        return appQuery;
    }
    
    private SelectQuery profileQuery() {
        final Criteria isCreatedProfile = new Criteria(new Column("Profile", "PROFILE_ID"), (Object)new Column("RecentProfileToColln", "PROFILE_ID"), 0);
        final Criteria isPublishedProfile = new Criteria(new Column("Profile", "PROFILE_ID"), (Object)new Column("RecentPubProfileToColln", "PROFILE_ID"), 0);
        final Criteria isGroupAssociatedProfile = new Criteria(new Column("Profile", "PROFILE_ID"), (Object)new Column("RecentProfileForGroup", "PROFILE_ID"), 0);
        final Criteria isDeviceAssociatedProfile = new Criteria(new Column("Profile", "PROFILE_ID"), (Object)new Column("RecentProfileForResource", "PROFILE_ID"), 0);
        final Criteria isMDMProfile = new Criteria(new Column("Profile", "PROFILE_TYPE"), (Object)1, 0);
        final Criteria isIosPlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)1, 0);
        final Criteria isAndroidPlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)2, 0);
        final Criteria isWindowsPlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)3, 0);
        final Criteria isChromePlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)4, 0);
        final Criteria isMacPlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)6, 0);
        final Criteria isTVOSPlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)7, 0);
        final CaseExpression createdMDMProfile = new CaseExpression("PROFILE_COUNT");
        createdMDMProfile.addWhen(isCreatedProfile.and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression publishedMDMProfile = new CaseExpression("PUBLISHED_PROFILE_COUNT");
        publishedMDMProfile.addWhen(isPublishedProfile.and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedMDMProfile = new CaseExpression("ASSOCIATED_PROFILE_COUNT");
        associatedMDMProfile.addWhen(isGroupAssociatedProfile.or(isDeviceAssociatedProfile).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdIOSProfile = new CaseExpression("CREATED_IOS_PROFILE_COUNT");
        createdIOSProfile.addWhen(isCreatedProfile.and(isIosPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdAndroidProfile = new CaseExpression("CREATED_ANDROID_PROFILE_COUNT");
        createdAndroidProfile.addWhen(isCreatedProfile.and(isAndroidPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdWindowsProfile = new CaseExpression("CREATED_WINDOWS_PROFILE_COUNT");
        createdWindowsProfile.addWhen(isCreatedProfile.and(isWindowsPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdChromeProfile = new CaseExpression("CREATED_CHROME_PROFILE_COUNT");
        createdChromeProfile.addWhen(isCreatedProfile.and(isChromePlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdMacProfile = new CaseExpression("CREATED_MACOS_PROFILE_COUNT");
        createdMacProfile.addWhen(isCreatedProfile.and(isMacPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression createdTVOSProfile = new CaseExpression("CREATED_TVOS_PROFILE_COUNT");
        createdTVOSProfile.addWhen(isCreatedProfile.and(isTVOSPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression publishedIOSProfile = new CaseExpression("PUBLISHED_IOS_PROFILE_COUNT");
        publishedIOSProfile.addWhen(isPublishedProfile.and(isIosPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression publishedAndroidProfile = new CaseExpression("PUBLISHED_ANDROID_PROFILE_COUNT");
        publishedAndroidProfile.addWhen(isPublishedProfile.and(isAndroidPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression publishedWindowsProfile = new CaseExpression("PUBLISHED_WINDOWS_PROFILE_COUNT");
        publishedWindowsProfile.addWhen(isPublishedProfile.and(isWindowsPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression publishedChromeProfile = new CaseExpression("PUBLISHED_CHROME_PROFILE_COUNT");
        publishedChromeProfile.addWhen(isPublishedProfile.and(isChromePlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression publishedMacProfile = new CaseExpression("PUBLISHED_MACOS_PROFILE_COUNT");
        publishedMacProfile.addWhen(isPublishedProfile.and(isMacPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression publishedTVOSProfile = new CaseExpression("PUBLISHED_TVOS_PROFILE_COUNT");
        publishedTVOSProfile.addWhen(isPublishedProfile.and(isTVOSPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedIOSProfile = new CaseExpression("ASSOCIATED_IOS_PROFILE_COUNT");
        associatedIOSProfile.addWhen(isGroupAssociatedProfile.or(isDeviceAssociatedProfile).and(isIosPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedAndroidProfile = new CaseExpression("ASSOCIATED_ANDROID_PROFILE_COUNT");
        associatedAndroidProfile.addWhen(isGroupAssociatedProfile.or(isDeviceAssociatedProfile).and(isAndroidPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedWindowsProfile = new CaseExpression("ASSOCIATED_WINDOWS_PROFILE_COUNT");
        associatedWindowsProfile.addWhen(isGroupAssociatedProfile.or(isDeviceAssociatedProfile).and(isWindowsPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedChromeProfile = new CaseExpression("ASSOCIATED_CHROME_PROFILE_COUNT");
        associatedChromeProfile.addWhen(isGroupAssociatedProfile.or(isDeviceAssociatedProfile).and(isChromePlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedMacProfile = new CaseExpression("ASSOCIATED_MACOS_PROFILE_COUNT");
        associatedMacProfile.addWhen(isGroupAssociatedProfile.or(isDeviceAssociatedProfile).and(isMacPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression associatedTVOSProfile = new CaseExpression("ASSOCIATED_TVOS_PROFILE_COUNT");
        associatedTVOSProfile.addWhen(isGroupAssociatedProfile.or(isDeviceAssociatedProfile).and(isTVOSPlatform).and(isMDMProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final SelectQuery profileQuery = (SelectQuery)new SelectQueryImpl(new Table("Profile"));
        profileQuery.addJoin(new Join("Profile", "RecentProfileToColln", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1));
        profileQuery.addJoin(new Join("Profile", "RecentPubProfileToColln", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1));
        profileQuery.addJoin(new Join("Profile", "RecentProfileForGroup", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1));
        profileQuery.addJoin(new Join("Profile", "RecentProfileForResource", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1));
        profileQuery.addJoin(new Join("Profile", "ProfileToCustomerRel", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2));
        profileQuery.addJoin(new Join("ProfileToCustomerRel", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        final MDMTrackerUtil trackerQueryUtil = new MDMTrackerUtil();
        profileQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdMDMProfile, 4, "PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(publishedMDMProfile, 4, "PUBLISHED_PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedMDMProfile, 4, "ASSOCIATED_PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdIOSProfile, 4, "CREATED_IOS_PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdAndroidProfile, 4, "CREATED_ANDROID_PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdWindowsProfile, 4, "CREATED_WINDOWS_PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdChromeProfile, 4, "CREATED_CHROME_PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdMacProfile, 4, "CREATED_MACOS_PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(createdTVOSProfile, 4, "CREATED_TVOS_PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(publishedIOSProfile, 4, "PUBLISHED_IOS_PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(publishedAndroidProfile, 4, "PUBLISHED_ANDROID_PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(publishedWindowsProfile, 4, "PUBLISHED_WINDOWS_PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(publishedChromeProfile, 4, "PUBLISHED_CHROME_PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(publishedMacProfile, 4, "PUBLISHED_MACOS_PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(publishedTVOSProfile, 4, "PUBLISHED_TVOS_PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedIOSProfile, 4, "ASSOCIATED_IOS_PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedAndroidProfile, 4, "ASSOCIATED_ANDROID_PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedWindowsProfile, 4, "ASSOCIATED_WINDOWS_PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedChromeProfile, 4, "ASSOCIATED_CHROME_PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedMacProfile, 4, "ASSOCIATED_MACOS_PROFILE_COUNT"));
        profileQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(associatedTVOSProfile, 4, "ASSOCIATED_TVOS_PROFILE_COUNT"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final Criteria profileTypeCriteria = new Criteria(Column.getColumn("Profile", "PROFILE_TYPE"), (Object)1, 0);
        profileQuery.setCriteria(profileTypeCriteria);
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        profileQuery.setGroupByClause(groupByColumn);
        return profileQuery;
    }
    
    private SelectQuery managedDeviceQuery() {
        final Criteria iosCriteria = new Criteria(new Column("ManagedDevice", "PLATFORM_TYPE"), (Object)1, 0);
        final Criteria androidCriteria = new Criteria(new Column("ManagedDevice", "PLATFORM_TYPE"), (Object)2, 0);
        final Criteria windowsPhoneCriteria = new Criteria(new Column("ManagedDevice", "PLATFORM_TYPE"), (Object)3, 0);
        final Criteria chromeCriteria = new Criteria(new Column("ManagedDevice", "PLATFORM_TYPE"), (Object)4, 0);
        final Criteria unManagedCriteria = new Criteria(new Column("ManagedDevice", "MANAGED_STATUS"), (Object)4, 0);
        final Criteria managedCriteria = new Criteria(new Column("ManagedDevice", "MANAGED_STATUS"), (Object)2, 0);
        final Criteria enrollmentIosCriteria = new Criteria(new Column("DeviceEnrollmentRequest", "PLATFORM_TYPE"), (Object)1, 0);
        final Criteria enrollmentAndroidCriteria = new Criteria(new Column("DeviceEnrollmentRequest", "PLATFORM_TYPE"), (Object)2, 0);
        final Criteria enrollmentWPCriteria = new Criteria(new Column("DeviceEnrollmentRequest", "PLATFORM_TYPE"), (Object)3, 0);
        final Criteria enrollmentNeutralTypeCriteria = new Criteria(new Column("DeviceEnrollmentRequest", "PLATFORM_TYPE"), (Object)0, 0);
        final Criteria inviteCriteria = new Criteria(new Column("DeviceEnrollmentRequest", "ENROLLMENT_TYPE"), (Object)1, 0);
        final Criteria selfEnrollCriteria = new Criteria(new Column("DeviceEnrollmentRequest", "ENROLLMENT_TYPE"), (Object)2, 0);
        final Criteria adminEnrollCriteria = new Criteria(new Column("DeviceEnrollmentRequest", "ENROLLMENT_TYPE"), (Object)3, 0);
        final Criteria isActiveDevice = new Criteria(new Column("EnrollmentRequestToDevice", "MANAGED_DEVICE_ID"), (Object)new Column("ManagedDevice", "RESOURCE_ID"), 0);
        final Criteria depEnrollment = new Criteria(new Column("EnrollmentTemplate", "TEMPLATE_TYPE"), (Object)10, 0);
        final Criteria configuratorEnrollment = new Criteria(new Column("EnrollmentTemplate", "TEMPLATE_TYPE"), (Object)11, 0);
        final Criteria nfcEnrollment = new Criteria(new Column("EnrollmentTemplate", "TEMPLATE_TYPE"), (Object)20, 0);
        final Criteria chromeEnrollment = new Criteria(new Column("EnrollmentTemplate", "TEMPLATE_TYPE"), (Object)40, 0);
        final Criteria knoxEnrollment = new Criteria(new Column("EnrollmentTemplate", "TEMPLATE_TYPE"), (Object)21, 0);
        final Criteria wicdEnrollment = new Criteria(new Column("EnrollmentTemplate", "TEMPLATE_TYPE"), (Object)30, 0);
        final Criteria qrEnrollment = new Criteria(new Column("EnrollmentTemplate", "TEMPLATE_TYPE"), (Object)22, 0);
        final Criteria laptopEnrollment = new Criteria(new Column("EnrollmentTemplate", "TEMPLATE_TYPE"), (Object)31, 0);
        final Criteria azureADEnrollment = new Criteria(new Column("EnrollmentTemplate", "TEMPLATE_TYPE"), (Object)32, 0);
        final Criteria winmmEnrollment = new Criteria(new Column("EnrollmentTemplate", "TEMPLATE_TYPE"), (Object)33, 0);
        final Criteria unassignedCriteria = new Criteria(new Column("ManagedDevice", "MANAGED_STATUS"), (Object)5, 0);
        final Criteria androidAgentVersionCriteria = this.getAndroidAgentVersionCriteria();
        final Criteria errorCodecriteria = new Criteria(new Column("DeviceEnrollmentRequest", "REQUEST_STATUS"), (Object)0, 0);
        final Criteria iosPlatformcriteria = new Criteria(new Column("DeviceEnrollmentRequest", "PLATFORM_TYPE"), (Object)1, 0);
        final Criteria androidPlatformCriteria = new Criteria(new Column("DeviceEnrollmentRequest", "PLATFORM_TYPE"), (Object)2, 0);
        final Criteria windowsPlatformCriteria = new Criteria(new Column("DeviceEnrollmentRequest", "PLATFORM_TYPE"), (Object)3, 0);
        final Criteria chromePlatformCriteria = new Criteria(new Column("DeviceEnrollmentRequest", "PLATFORM_TYPE"), (Object)4, 0);
        final Criteria requestSuccess = new Criteria(new Column("DeviceEnrollmentRequest", "REQUEST_STATUS"), (Object)3, 0);
        final Criteria passcodeAuthMode = new Criteria(new Column("DeviceEnrollmentRequest", "AUTH_MODE"), (Object)1, 0);
        final Criteria adAuthMode = new Criteria(new Column("DeviceEnrollmentRequest", "AUTH_MODE"), (Object)2, 0);
        final Criteria bothAuthMode = new Criteria(new Column("DeviceEnrollmentRequest", "AUTH_MODE"), (Object)3, 0);
        final Criteria modelDevicesCriteria = new Criteria(new Column("MdModelInfo", "MODEL_TYPE"), (Object)new Integer[] { 1, 2, 0 }, 8);
        final Criteria modelTVCriteria = new Criteria(new Column("MdModelInfo", "MODEL_TYPE"), (Object)new Integer[] { 5 }, 8);
        final Criteria modelComputerCriteria = new Criteria(new Column("MdModelInfo", "MODEL_TYPE"), (Object)new Integer[] { 3, 4 }, 8);
        final Criteria modelTabletCriteria = new Criteria(new Column("MdModelInfo", "MODEL_TYPE"), (Object)2, 0);
        final Criteria isMultiUserCriteria = new Criteria(new Column("MdDeviceInfo", "IS_MULTIUSER"), (Object)true, 0);
        final CaseExpression sharedIpadExpr = new CaseExpression("SHARED_IPAD_COUNT");
        sharedIpadExpr.addWhen(iosCriteria.and(modelTabletCriteria).and(isMultiUserCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression managedIOSExpression = new CaseExpression("MANAGED_IOS_DEVICE_COUNT");
        managedIOSExpression.addWhen(iosCriteria.and(managedCriteria).and(modelDevicesCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression managedApleTVExpression = new CaseExpression("MANAGED_APPLETV_DEVICE_COUNT");
        managedApleTVExpression.addWhen(iosCriteria.and(managedCriteria).and(modelTVCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression managedMacExpression = new CaseExpression("MANAGED_MAC_DEVICE_COUNT");
        managedMacExpression.addWhen(iosCriteria.and(managedCriteria).and(modelComputerCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression managedAndroidExpression = new CaseExpression("MANAGED_ANDROID_DEVICE_COUNT");
        managedAndroidExpression.addWhen(androidCriteria.and(managedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression managedWindowsPhoneExpression = new CaseExpression("MANAGED_WINDOWS_PHONE_DEVICE_COUNT");
        managedWindowsPhoneExpression.addWhen(windowsPhoneCriteria.and(managedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression managedChromeExpression = new CaseExpression("MANAGED_CHROME_DEVICE_COUNT");
        managedChromeExpression.addWhen(chromeCriteria.and(managedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression unManagedIOSExpression = new CaseExpression("UNMANAGED_IOS_DEVICE_COUNT");
        unManagedIOSExpression.addWhen(iosCriteria.and(unManagedCriteria).and(modelDevicesCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression unManagedAppleTVExpression = new CaseExpression("UNMANAGED_APPLETV_DEVICE_COUNT");
        unManagedAppleTVExpression.addWhen(iosCriteria.and(unManagedCriteria).and(modelTVCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression unManagedMACExpression = new CaseExpression("UNMANAGED_MAC_DEVICE_COUNT");
        unManagedMACExpression.addWhen(iosCriteria.and(unManagedCriteria).and(modelComputerCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression unManagedAndroidExpression = new CaseExpression("UNMANAGED_ANDROID_DEVICE_COUNT");
        unManagedAndroidExpression.addWhen(androidCriteria.and(unManagedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression unManagedWindowsPhoneExpression = new CaseExpression("UNMANAGED_WINDOWS_PHONE_DEVICE_COUNT");
        unManagedWindowsPhoneExpression.addWhen(windowsPhoneCriteria.and(unManagedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression unManagedChromeExpression = new CaseExpression("UNMANAGED_CHROME_DEVICE_COUNT");
        unManagedChromeExpression.addWhen(chromeCriteria.and(unManagedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression managedDeviceExpression = new CaseExpression("MANAGED_DEVICE_COUNT");
        managedDeviceExpression.addWhen(managedCriteria, (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression unManagedDeviceExpression = new CaseExpression("UNMANAGED_DEVICE_COUNT");
        unManagedDeviceExpression.addWhen(unManagedCriteria, (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosRequestExpression = new CaseExpression("IOS_REQ");
        iosRequestExpression.addWhen(enrollmentIosCriteria, (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosExpression = new CaseExpression("IOS_DEVICE_COUNT");
        iosExpression.addWhen(iosCriteria, (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosInviteRequestExpression = new CaseExpression("IOS_INVITE_REQ");
        iosInviteRequestExpression.addWhen(enrollmentIosCriteria.and(inviteCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosInviteDeviceExpression = new CaseExpression("IOS_INVITE_DEVICE_COUNT");
        iosInviteDeviceExpression.addWhen(isActiveDevice.and(iosCriteria).and(inviteCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosInviteManagedDeviceExpression = new CaseExpression("IOS_INVITE_MANAGED_DEVICE_COUNT");
        iosInviteManagedDeviceExpression.addWhen(isActiveDevice.and(iosCriteria).and(inviteCriteria).and(managedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosInviteUnManagedDeviceExpression = new CaseExpression("IOS_INVITE_UNMANAGED_DEVICE_COUNT");
        iosInviteUnManagedDeviceExpression.addWhen(isActiveDevice.and(iosCriteria).and(inviteCriteria).and(unManagedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosSelfRequestExpression = new CaseExpression("IOS_SELF_REQ");
        iosSelfRequestExpression.addWhen(enrollmentIosCriteria.and(selfEnrollCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosSelfDeviceExpression = new CaseExpression("IOS_SELF_DEVICE_COUNT");
        iosSelfDeviceExpression.addWhen(isActiveDevice.and(iosCriteria).and(selfEnrollCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosSelfManagedDeviceExpression = new CaseExpression("IOS_SELF_MANAGED_DEVICE_COUNT");
        iosSelfManagedDeviceExpression.addWhen(isActiveDevice.and(iosCriteria).and(selfEnrollCriteria).and(managedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosSelfUnManagedDeviceExpression = new CaseExpression("IOS_SELF_UNMANAGED_DEVICE_COUNT");
        iosSelfUnManagedDeviceExpression.addWhen(isActiveDevice.and(iosCriteria).and(selfEnrollCriteria).and(unManagedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosAdminRequestExpression = new CaseExpression("IOS_ADMIN_REQ");
        iosAdminRequestExpression.addWhen(enrollmentIosCriteria.and(adminEnrollCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosAdminDeviceExpression = new CaseExpression("IOS_ADMIN_DEVICE_COUNT");
        iosAdminDeviceExpression.addWhen(isActiveDevice.and(iosCriteria).and(adminEnrollCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosAdminManagedDeviceExpression = new CaseExpression("IOS_ADMIN_MANAGED_DEVICE_COUNT");
        iosAdminManagedDeviceExpression.addWhen(isActiveDevice.and(iosCriteria).and(adminEnrollCriteria).and(managedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosAdminUnManagedDeviceExpression = new CaseExpression("IOS_ADMIN_UNMANAGED_DEVICE_COUNT");
        iosAdminUnManagedDeviceExpression.addWhen(isActiveDevice.and(iosCriteria).and(adminEnrollCriteria).and(unManagedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosDepAdminRequestExpression = new CaseExpression("IOS_ADMIN_DEP_REQ");
        iosDepAdminRequestExpression.addWhen(enrollmentIosCriteria.and(adminEnrollCriteria).and(depEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosDepAdminDeviceExpression = new CaseExpression("IOS_ADMIN_DEP_DEVICE_COUNT");
        iosDepAdminDeviceExpression.addWhen(isActiveDevice.and(iosCriteria).and(adminEnrollCriteria).and(depEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosDepAdminManagedDeviceExpression = new CaseExpression("IOS_ADMIN_DEP_MANAGED_DEVICE_COUNT");
        iosDepAdminManagedDeviceExpression.addWhen(isActiveDevice.and(iosCriteria).and(adminEnrollCriteria).and(managedCriteria).and(depEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosDepAdminUnManagedDeviceExpression = new CaseExpression("IOS_ADMIN_DEP_UNMANAGED_DEVICE_COUNT");
        iosDepAdminUnManagedDeviceExpression.addWhen(isActiveDevice.and(iosCriteria).and(adminEnrollCriteria).and(unManagedCriteria).and(depEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosConfiguratorAdminRequestExpression = new CaseExpression("IOS_ADMIN_CONFIG_REQ");
        iosConfiguratorAdminRequestExpression.addWhen(enrollmentIosCriteria.and(adminEnrollCriteria).and(configuratorEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosConfiguratorAdminDeviceExpression = new CaseExpression("IOS_ADMIN_CONFIG_DEVICE_COUNT");
        iosConfiguratorAdminDeviceExpression.addWhen(isActiveDevice.and(iosCriteria).and(adminEnrollCriteria).and(configuratorEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosConfiguratorAdminManagedDeviceExpression = new CaseExpression("IOS_ADMIN_CONFIG_MANAGED_DEVICE_COUNT");
        iosConfiguratorAdminManagedDeviceExpression.addWhen(isActiveDevice.and(iosCriteria).and(adminEnrollCriteria).and(managedCriteria).and(configuratorEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosConfiguratorAdminUnManagedDeviceExpression = new CaseExpression("IOS_ADMIN_CONFIG_UNMANAGED_DEVICE_COUNT");
        iosConfiguratorAdminUnManagedDeviceExpression.addWhen(isActiveDevice.and(iosCriteria).and(adminEnrollCriteria).and(unManagedCriteria).and(configuratorEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andRequestExpression = new CaseExpression("AND_REQ");
        andRequestExpression.addWhen(enrollmentAndroidCriteria, (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andExpression = new CaseExpression("AND_DEVICE_COUNT");
        andExpression.addWhen(androidCriteria, (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andInviteRequestExpression = new CaseExpression("AND_INVITE_REQ");
        andInviteRequestExpression.addWhen(enrollmentAndroidCriteria.and(inviteCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andInviteDeviceExpression = new CaseExpression("AND_INVITE_DEVICE_COUNT");
        andInviteDeviceExpression.addWhen(isActiveDevice.and(androidCriteria).and(inviteCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andInviteManagedDeviceExpression = new CaseExpression("AND_INVITE_MANAGED_DEVICE_COUNT");
        andInviteManagedDeviceExpression.addWhen(isActiveDevice.and(androidCriteria).and(inviteCriteria).and(managedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andInviteUnManagedDeviceExpression = new CaseExpression("AND_INVITE_UNMANAGED_DEVICE_COUNT");
        andInviteUnManagedDeviceExpression.addWhen(isActiveDevice.and(androidCriteria).and(inviteCriteria).and(unManagedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andSelfRequestExpression = new CaseExpression("AND_SELF_REQ");
        andSelfRequestExpression.addWhen(enrollmentAndroidCriteria.and(selfEnrollCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andSelfDeviceExpression = new CaseExpression("AND_SELF_DEVICE_COUNT");
        andSelfDeviceExpression.addWhen(isActiveDevice.and(androidCriteria).and(selfEnrollCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andSelfManagedDeviceExpression = new CaseExpression("AND_SELF_MANAGED_DEVICE_COUNT");
        andSelfManagedDeviceExpression.addWhen(isActiveDevice.and(androidCriteria).and(selfEnrollCriteria).and(managedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andSelfUnManagedDeviceExpression = new CaseExpression("AND_SELF_UNMANAGED_DEVICE_COUNT");
        andSelfUnManagedDeviceExpression.addWhen(isActiveDevice.and(androidCriteria).and(selfEnrollCriteria).and(unManagedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andAdminRequestExpression = new CaseExpression("AND_ADMIN_REQ");
        andAdminRequestExpression.addWhen(enrollmentAndroidCriteria.and(adminEnrollCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andAdminDeviceExpression = new CaseExpression("AND_ADMIN_DEVICE_COUNT");
        andAdminDeviceExpression.addWhen(isActiveDevice.and(androidCriteria).and(adminEnrollCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andAdminManagedDeviceExpression = new CaseExpression("AND_ADMIN_MANAGED_DEVICE_COUNT");
        andAdminManagedDeviceExpression.addWhen(isActiveDevice.and(androidCriteria).and(adminEnrollCriteria).and(managedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andAdminUnManagedDeviceExpression = new CaseExpression("AND_ADMIN_UNMANAGED_DEVICE_COUNT");
        andAdminUnManagedDeviceExpression.addWhen(isActiveDevice.and(androidCriteria).and(adminEnrollCriteria).and(unManagedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andNfcAdminRequestExpression = new CaseExpression("AND_ADMIN_NFC_REQ");
        andNfcAdminRequestExpression.addWhen(enrollmentAndroidCriteria.and(adminEnrollCriteria).and(nfcEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andNfcAdminDeviceExpression = new CaseExpression("AND_ADMIN_NFC_DEVICE_COUNT");
        andNfcAdminDeviceExpression.addWhen(isActiveDevice.and(androidCriteria).and(adminEnrollCriteria).and(nfcEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andNfcAdminManagedDeviceExpression = new CaseExpression("AND_ADMIN_NFC_MANAGED_DEVICE_COUNT");
        andNfcAdminManagedDeviceExpression.addWhen(isActiveDevice.and(androidCriteria).and(adminEnrollCriteria).and(managedCriteria).and(nfcEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andNfcAdminUnManagedDeviceExpression = new CaseExpression("AND_ADMIN_NFC_UNMANAGED_DEVICE_COUNT");
        andNfcAdminUnManagedDeviceExpression.addWhen(isActiveDevice.and(androidCriteria).and(adminEnrollCriteria).and(unManagedCriteria).and(nfcEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andKnoxAdminRequestExpression = new CaseExpression("AND_ADMIN_KNOX_REQ");
        andKnoxAdminRequestExpression.addWhen(enrollmentAndroidCriteria.and(adminEnrollCriteria).and(knoxEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andKnoxAdminDeviceExpression = new CaseExpression("AND_ADMIN_KNOX_DEVICE_COUNT");
        andKnoxAdminDeviceExpression.addWhen(isActiveDevice.and(androidCriteria).and(adminEnrollCriteria).and(knoxEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andKnoxAdminManagedDeviceExpression = new CaseExpression("AND_ADMIN_KNOX_MANAGED_DEVICE_COUNT");
        andKnoxAdminManagedDeviceExpression.addWhen(isActiveDevice.and(androidCriteria).and(adminEnrollCriteria).and(managedCriteria).and(knoxEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andKnoxAdminUnManagedDeviceExpression = new CaseExpression("AND_ADMIN_KNOX_UNMANAGED_DEVICE_COUNT");
        andKnoxAdminUnManagedDeviceExpression.addWhen(isActiveDevice.and(androidCriteria).and(adminEnrollCriteria).and(unManagedCriteria).and(knoxEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression wpWICDAdminManagedDeviceExpression = new CaseExpression("WP_ADMIN_WICD_MANAGED_DEVICE_COUNT");
        wpWICDAdminManagedDeviceExpression.addWhen(isActiveDevice.and(windowsPhoneCriteria).and(adminEnrollCriteria).and(managedCriteria).and(wicdEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression wpWICDAdminUnManagedDeviceExpression = new CaseExpression("WP_ADMIN_WICD_UNMANAGED_DEVICE_COUNT");
        wpWICDAdminUnManagedDeviceExpression.addWhen(isActiveDevice.and(windowsPhoneCriteria).and(adminEnrollCriteria).and(unManagedCriteria).and(wicdEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression wpLaptopAdminManagedDeviceExpression = new CaseExpression("WP_ADMIN_LAPTOP_MANAGED_DEVICE_COUNT");
        wpLaptopAdminManagedDeviceExpression.addWhen(isActiveDevice.and(windowsPhoneCriteria).and(adminEnrollCriteria).and(managedCriteria).and(laptopEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression wpLaptopAdminUnManagedDeviceExpression = new CaseExpression("WP_ADMIN_LAPTOP_UNMANAGED_DEVICE_COUNT");
        wpLaptopAdminUnManagedDeviceExpression.addWhen(isActiveDevice.and(windowsPhoneCriteria).and(adminEnrollCriteria).and(unManagedCriteria).and(laptopEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression wpAzureADAdminManagedDeviceExpression = new CaseExpression("WP_ADMIN_AZURE_MANAGED_DEVICE_COUNT");
        wpAzureADAdminManagedDeviceExpression.addWhen(isActiveDevice.and(windowsPhoneCriteria).and(adminEnrollCriteria).and(managedCriteria).and(azureADEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression winmmADAdminManagedDeviceExpression = new CaseExpression("WP_ADMIN_MM_MANAGED_DEVICE_COUNT");
        winmmADAdminManagedDeviceExpression.addWhen(isActiveDevice.and(windowsPhoneCriteria).and(adminEnrollCriteria).and(managedCriteria).and(winmmEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression wpAzureADAdminUnManagedDeviceExpression = new CaseExpression("WP_ADMIN_AZURE_UNMANAGED_DEVICE_COUNT");
        wpAzureADAdminUnManagedDeviceExpression.addWhen(isActiveDevice.and(windowsPhoneCriteria).and(adminEnrollCriteria).and(unManagedCriteria).and(azureADEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression neutralInviteRequestExpression = new CaseExpression("NEUTRAL_INVITE_REQ");
        neutralInviteRequestExpression.addWhen(enrollmentNeutralTypeCriteria.and(inviteCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression winmmAdminUnManagedDeviceExpression = new CaseExpression("WP_ADMIN_MM_UNMANAGED_DEVICE_COUNT");
        winmmAdminUnManagedDeviceExpression.addWhen(isActiveDevice.and(windowsPhoneCriteria).and(adminEnrollCriteria).and(unManagedCriteria).and(winmmEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression wpRequestExpression = new CaseExpression("WP_REQ");
        wpRequestExpression.addWhen(enrollmentWPCriteria, (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression wpExpression = new CaseExpression("WP_DEVICE_COUNT");
        wpExpression.addWhen(windowsPhoneCriteria, (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression wpInviteRequestExpression = new CaseExpression("WP_INVITE_REQ");
        wpInviteRequestExpression.addWhen(enrollmentWPCriteria.and(inviteCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression wpInviteDeviceExpression = new CaseExpression("WP_INVITE_DEVICE_COUNT");
        wpInviteDeviceExpression.addWhen(isActiveDevice.and(windowsPhoneCriteria).and(inviteCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression wpInviteManagedDeviceExpression = new CaseExpression("WP_INVITE_MANAGED_DEVICE_COUNT");
        wpInviteManagedDeviceExpression.addWhen(isActiveDevice.and(windowsPhoneCriteria).and(inviteCriteria).and(managedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression wpInviteUnManagedDeviceExpression = new CaseExpression("WP_INVITE_UNMANAGED_DEVICE_COUNT");
        wpInviteUnManagedDeviceExpression.addWhen(isActiveDevice.and(windowsPhoneCriteria).and(inviteCriteria).and(unManagedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression wpSelfRequestExpression = new CaseExpression("WP_SELF_REQ");
        wpSelfRequestExpression.addWhen(enrollmentWPCriteria.and(selfEnrollCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression wpSelfDeviceExpression = new CaseExpression("WP_SELF_DEVICE_COUNT");
        wpSelfDeviceExpression.addWhen(isActiveDevice.and(windowsPhoneCriteria).and(selfEnrollCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression wpSelfManagedDeviceExpression = new CaseExpression("WP_SELF_MANAGED_DEVICE_COUNT");
        wpSelfManagedDeviceExpression.addWhen(isActiveDevice.and(windowsPhoneCriteria).and(selfEnrollCriteria).and(managedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression wpSelfUnManagedDeviceExpression = new CaseExpression("WP_SELF_UNMANAGED_DEVICE_COUNT");
        wpSelfUnManagedDeviceExpression.addWhen(isActiveDevice.and(windowsPhoneCriteria).and(selfEnrollCriteria).and(unManagedCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosDepUnassignedExpression = new CaseExpression("IOS_DEP_UNASSIGNED_COUNT");
        iosDepUnassignedExpression.addWhen(unassignedCriteria.and(iosCriteria).and(depEnrollment).and(isActiveDevice), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosConfiguratorUnassignedExpression = new CaseExpression("IOS_CONFIGURATOR_UNASSIGNED_COUNT");
        iosConfiguratorUnassignedExpression.addWhen(unassignedCriteria.and(iosCriteria).and(configuratorEnrollment).and(isActiveDevice), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andNfcAdminUnassignedExpression = new CaseExpression("AND_NFC_UNASSIGNED_COUNT");
        andNfcAdminUnassignedExpression.addWhen(unassignedCriteria.and(androidCriteria).and(nfcEnrollment).and(isActiveDevice), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression chromeUnassignedExpression = new CaseExpression("CHROME_UNASSIGNED_COUNT");
        chromeUnassignedExpression.addWhen(unassignedCriteria.and(chromeCriteria).and(chromeEnrollment).and(isActiveDevice), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression andKnoxAdminUnassignedExpression = new CaseExpression("AND_KNOX_UNASSIGNED_COUNT");
        andKnoxAdminUnassignedExpression.addWhen(unassignedCriteria.and(androidCriteria).and(knoxEnrollment).and(isActiveDevice), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression failedRequest = new CaseExpression("ENROLLMENT_REQUEST_FAILED_COUNT");
        failedRequest.addWhen(errorCodecriteria, (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression androidFailedRequest = new CaseExpression("ANDROID_ENROLLMENT_REQUEST_FAILED_COUNT");
        androidFailedRequest.addWhen(errorCodecriteria.and(androidPlatformCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression iosFailedRequest = new CaseExpression("IOS_ENROLLMENT_REQUEST_FAILED_COUNT");
        iosFailedRequest.addWhen(errorCodecriteria.and(iosPlatformcriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression windowsFailedRequest = new CaseExpression("WINDOWS_ENROLLMENT_REQUEST_FAILED_COUNT");
        windowsFailedRequest.addWhen(errorCodecriteria.and(windowsPlatformCriteria), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression androidAgentVersionExpr = new CaseExpression("LOWER_AGENT_VERSION_COUNT");
        androidAgentVersionExpr.addWhen(managedCriteria.and(androidAgentVersionCriteria), (Object)new Column("Resource", "RESOURCE_ID"));
        final CaseExpression wpWICDUnassignedExpression = new CaseExpression("WP_WICD_UNASSIGNED_COUNT");
        wpWICDUnassignedExpression.addWhen(unassignedCriteria.and(windowsPhoneCriteria).and(wicdEnrollment).and(isActiveDevice), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression wpLaptopUnassignedExpression = new CaseExpression("WP_LAPTOP_UNASSIGNED_COUNT");
        wpLaptopUnassignedExpression.addWhen(unassignedCriteria.and(windowsPhoneCriteria).and(laptopEnrollment).and(isActiveDevice), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression wpAzureUnassignedExpression = new CaseExpression("WP_AZURE_UNASSIGNED_COUNT");
        wpAzureUnassignedExpression.addWhen(unassignedCriteria.and(windowsPhoneCriteria).and(azureADEnrollment).and(isActiveDevice), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression qrEnrollmentCountExpression = new CaseExpression("ANDROID_ADMIN_QR_ENROLLMENT_COUNT");
        qrEnrollmentCountExpression.addWhen(isActiveDevice.and(adminEnrollCriteria).and(managedCriteria).and(qrEnrollment), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression otpSuccessRequest = new CaseExpression("PASSCODE_ENROLLMENT_SUCCESS_COUNT");
        otpSuccessRequest.addWhen(requestSuccess.and(passcodeAuthMode), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression adSuccessRequest = new CaseExpression("AD_ENROLLMENT_SUCCESS_COUNT");
        adSuccessRequest.addWhen(requestSuccess.and(adAuthMode), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final CaseExpression bothSuccessRequest = new CaseExpression("BOTH_ENROLLMENT_SUCCESS_COUNT");
        bothSuccessRequest.addWhen(requestSuccess.and(bothAuthMode), (Object)new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID"));
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final SelectQuery managedDeviceQuery = (SelectQuery)new SelectQueryImpl(new Table("DeviceEnrollmentRequest"));
        managedDeviceQuery.addJoin(new Join("DeviceEnrollmentRequest", "ManagedUser", new String[] { "MANAGED_USER_ID" }, new String[] { "MANAGED_USER_ID" }, 2));
        managedDeviceQuery.addJoin(new Join("DeviceEnrollmentRequest", "EnrollmentRequestToDevice", new String[] { "ENROLLMENT_REQUEST_ID" }, new String[] { "ENROLLMENT_REQUEST_ID" }, 1));
        managedDeviceQuery.addJoin(new Join("EnrollmentRequestToDevice", "ManagedDevice", new String[] { "MANAGED_DEVICE_ID" }, new String[] { "RESOURCE_ID" }, 1));
        managedDeviceQuery.addJoin(new Join("ManagedDevice", "MdDeviceInfo", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 1));
        managedDeviceQuery.addJoin(new Join("MdDeviceInfo", "MdModelInfo", new String[] { "MODEL_ID" }, new String[] { "MODEL_ID" }, 1));
        managedDeviceQuery.addJoin(new Join("DeviceEnrollmentRequest", "EnrollmentTemplateToRequest", new String[] { "ENROLLMENT_REQUEST_ID" }, new String[] { "ENROLLMENT_REQUEST_ID" }, 1));
        managedDeviceQuery.addJoin(new Join("EnrollmentTemplateToRequest", "EnrollmentTemplate", new String[] { "TEMPLATE_ID" }, new String[] { "TEMPLATE_ID" }, 1));
        managedDeviceQuery.addJoin(new Join("ManagedUser", "Resource", new String[] { "MANAGED_USER_ID" }, new String[] { "RESOURCE_ID" }, 2));
        managedDeviceQuery.addJoin(new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        managedDeviceQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        final Column eridCount = new Column("DeviceEnrollmentRequest", "ENROLLMENT_REQUEST_ID").count();
        eridCount.setColumnAlias("TOTAL_REQUEST_COUNT");
        managedDeviceQuery.addSelectColumn(eridCount);
        final Column resourceCount = new Column("ManagedDevice", "RESOURCE_ID").count();
        resourceCount.setColumnAlias("TOTAL_DEVICE_COUNT");
        managedDeviceQuery.addSelectColumn(resourceCount);
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(managedDeviceExpression, 4, "MANAGED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(unManagedDeviceExpression, 4, "UNMANAGED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(managedIOSExpression, 4, "IOS_MANAGED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(managedAndroidExpression, 4, "ANDROID_MANAGED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(managedWindowsPhoneExpression, 4, "WP_MANAGED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(managedMacExpression, 4, "MAC_MANAGED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(managedApleTVExpression, 4, "APPLETV_MANAGED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(unManagedIOSExpression, 4, "IOS_UNMANAGED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(unManagedAndroidExpression, 4, "ANDROID_UNMANAGED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(unManagedWindowsPhoneExpression, 4, "WP_UNMANAGED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(unManagedChromeExpression, 4, "CHROME_UNMANAGED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(unManagedAppleTVExpression, 4, "APPLETV_UNMANAGED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(unManagedMACExpression, 4, "MAC_UNMANAGED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosRequestExpression, 4, "IOS_REQ"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosExpression, 4, "IOS_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosInviteRequestExpression, 4, "IOS_INVITE_REQ"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosInviteDeviceExpression, 4, "IOS_INVITE_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosInviteManagedDeviceExpression, 4, "IOS_INVITE_MANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosInviteUnManagedDeviceExpression, 4, "IOS_INVITE_UNMANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosSelfRequestExpression, 4, "IOS_SELF_REQ"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosSelfDeviceExpression, 4, "IOS_SELF_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosSelfManagedDeviceExpression, 4, "IOS_SELF_MANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosSelfUnManagedDeviceExpression, 4, "IOS_SELF_UNMANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosAdminRequestExpression, 4, "IOS_ADMIN_REQ"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosAdminDeviceExpression, 4, "IOS_ADMIN_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosAdminManagedDeviceExpression, 4, "IOS_ADMIN_MANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosAdminUnManagedDeviceExpression, 4, "IOS_ADMIN_UNMANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosDepAdminRequestExpression, 4, "IOS_ADMIN_DEP_REQ"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosDepAdminDeviceExpression, 4, "IOS_ADMIN_DEP_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosDepAdminManagedDeviceExpression, 4, "IOS_ADMIN_DEP_MANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosDepAdminUnManagedDeviceExpression, 4, "IOS_ADMIN_DEP_UNMANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosConfiguratorAdminRequestExpression, 4, "IOS_ADMIN_CONFIG_REQ"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosConfiguratorAdminDeviceExpression, 4, "IOS_ADMIN_CONFIG_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosConfiguratorAdminManagedDeviceExpression, 4, "IOS_ADMIN_CONFIG_MANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosConfiguratorAdminUnManagedDeviceExpression, 4, "IOS_ADMIN_CONFIG_UNMANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andRequestExpression, 4, "AND_REQ"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andExpression, 4, "AND_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andInviteRequestExpression, 4, "AND_INVITE_REQ"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andInviteDeviceExpression, 4, "AND_INVITE_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andInviteManagedDeviceExpression, 4, "AND_INVITE_MANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andInviteUnManagedDeviceExpression, 4, "AND_INVITE_UNMANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andSelfRequestExpression, 4, "AND_SELF_REQ"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andSelfDeviceExpression, 4, "AND_SELF_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andSelfManagedDeviceExpression, 4, "AND_SELF_MANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andSelfUnManagedDeviceExpression, 4, "AND_SELF_UNMANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andAdminRequestExpression, 4, "AND_ADMIN_REQ"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andAdminDeviceExpression, 4, "AND_ADMIN_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andAdminManagedDeviceExpression, 4, "AND_ADMIN_MANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andAdminUnManagedDeviceExpression, 4, "AND_ADMIN_UNMANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andNfcAdminRequestExpression, 4, "AND_ADMIN_NFC_REQ"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andNfcAdminDeviceExpression, 4, "AND_ADMIN_NFC_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andNfcAdminManagedDeviceExpression, 4, "AND_ADMIN_NFC_MANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andNfcAdminUnManagedDeviceExpression, 4, "AND_ADMIN_NFC_UNMANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andKnoxAdminRequestExpression, 4, "AND_ADMIN_KNOX_REQ"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andKnoxAdminDeviceExpression, 4, "AND_ADMIN_KNOX_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andKnoxAdminManagedDeviceExpression, 4, "AND_ADMIN_KNOX_MANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andKnoxAdminUnManagedDeviceExpression, 4, "AND_ADMIN_KNOX_UNMANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(wpRequestExpression, 4, "WP_REQ"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(wpExpression, 4, "WP_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(wpInviteRequestExpression, 4, "WP_INVITE_REQ"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(wpInviteDeviceExpression, 4, "WP_INVITE_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(wpInviteManagedDeviceExpression, 4, "WP_INVITE_MANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(wpInviteUnManagedDeviceExpression, 4, "WP_INVITE_UNMANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(wpSelfRequestExpression, 4, "WP_SELF_REQ"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(wpSelfDeviceExpression, 4, "WP_SELF_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(wpSelfManagedDeviceExpression, 4, "WP_SELF_MANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(wpSelfUnManagedDeviceExpression, 4, "WP_SELF_UNMANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andNfcAdminUnassignedExpression, 4, "AND_NFC_UNASSIGNED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(chromeUnassignedExpression, 4, "CHROME_UNASSIGNED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(andKnoxAdminUnassignedExpression, 4, "AND_KNOX_UNASSIGNED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosDepUnassignedExpression, 4, "IOS_DEP_UNASSIGNED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosConfiguratorUnassignedExpression, 4, "IOS_CONFIGURATOR_UNASSIGNED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(failedRequest, 4, "ENROLLMENT_REQUEST_FAILED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(androidFailedRequest, 4, "ANDROID_ENROLLMENT_REQUEST_FAILED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosFailedRequest, 4, "IOS_ENROLLMENT_REQUEST_FAILED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(windowsFailedRequest, 4, "WINDOWS_ENROLLMENT_REQUEST_FAILED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(androidAgentVersionExpr, 4, "LOWER_AGENT_VERSION_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(otpSuccessRequest, 4, "PASSCODE_ENROLLMENT_SUCCESS_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(adSuccessRequest, 4, "AD_ENROLLMENT_SUCCESS_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(bothSuccessRequest, 4, "BOTH_ENROLLMENT_SUCCESS_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(wpWICDUnassignedExpression, 4, "WP_WICD_UNASSIGNED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(wpLaptopUnassignedExpression, 4, "WP_LAPTOP_UNASSIGNED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(wpAzureUnassignedExpression, 4, "WP_AZURE_UNASSIGNED_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(wpWICDAdminManagedDeviceExpression, 4, "WP_ADMIN_WICD_MANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(wpWICDAdminUnManagedDeviceExpression, 4, "WP_ADMIN_WICD_UNMANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(wpLaptopAdminManagedDeviceExpression, 4, "WP_ADMIN_LAPTOP_MANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(wpLaptopAdminUnManagedDeviceExpression, 4, "WP_ADMIN_LAPTOP_UNMANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(wpAzureADAdminManagedDeviceExpression, 4, "WP_ADMIN_AZURE_MANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(winmmADAdminManagedDeviceExpression, 4, "WP_ADMIN_MM_MANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(wpAzureADAdminUnManagedDeviceExpression, 4, "WP_ADMIN_AZURE_UNMANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(winmmAdminUnManagedDeviceExpression, 4, "WP_ADMIN_MM_UNMANAGED_DEVICE_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(qrEnrollmentCountExpression, 4, "ANDROID_ADMIN_QR_ENROLLMENT_COUNT"));
        managedDeviceQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)sharedIpadExpr));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        managedDeviceQuery.setGroupByClause(groupByColumn);
        return managedDeviceQuery;
    }
    
    private SelectQuery configurationQuery() {
        final Criteria iosPasscodePolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)172, 0);
        final Criteria iosRestrictionsPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)173, 0);
        final Criteria iosEmailPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)174, 0);
        final Criteria iosExchangeActiveSyncPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)175, 0);
        final Criteria iosVPNPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)176, 0);
        final Criteria iosWIFIPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)177, 0);
        final Criteria iosLDAPPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)178, 0);
        final Criteria iosCaldavPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)179, 0);
        final Criteria iosSubscribedCalendarPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)180, 0);
        final Criteria iosCarddavPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)181, 0);
        final Criteria iosWebclipsPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)182, 0);
        final Criteria iosAppLockPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)183, 0);
        final Criteria iosGlobalHttpProxyPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)184, 0);
        final Criteria androidPasscodePolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)185, 0);
        final Criteria androidRestrictionsPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)186, 0);
        final Criteria iosAPNPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)187, 0);
        final Criteria iosWebContentFilterPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)188, 0);
        final Criteria appPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)301, 0);
        final Criteria androidEmailPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)553, 0);
        final Criteria androidExchangeActiveSyncPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)554, 0);
        final Criteria androidWIFIPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)556, 0);
        final Criteria androidKioskPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)557, 0);
        final Criteria androidWallpaperPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)558, 0);
        final Criteria androidHttpProxyPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)559, 0);
        final Criteria windowsPasscodePolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)601, 0);
        final Criteria windowsEmailPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)602, 0);
        final Criteria windowsExchangeActiveSyncPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)603, 0);
        final Criteria windowsRestrictionsPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)604, 0);
        final Criteria windowsWIFIPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)605, 0);
        final Criteria androidEFRPPolicy = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)565, 0);
        final CaseExpression iosPasscodeExpression = new CaseExpression("IOS_PASSCODE_POLICY");
        iosPasscodeExpression.addWhen(iosPasscodePolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression iosRestrictionExpression = new CaseExpression("IOS_RESTRICTIONS_POLICY");
        iosRestrictionExpression.addWhen(iosRestrictionsPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression iosEmailExpression = new CaseExpression("IOS_EMAIL_POLICY");
        iosEmailExpression.addWhen(iosEmailPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression iosExchangeActiveSyncExpression = new CaseExpression("IOS_EXCHANGE_ACTIVE_SYNC_POLICY");
        iosExchangeActiveSyncExpression.addWhen(iosExchangeActiveSyncPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression iosVPNExpression = new CaseExpression("IOS_VPN_POLICY");
        iosVPNExpression.addWhen(iosVPNPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression iosWIFIExpression = new CaseExpression("IOS_WIFI_POLICY");
        iosWIFIExpression.addWhen(iosWIFIPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression iosLDAPExpression = new CaseExpression("IOS_LDAP_POLICY");
        iosLDAPExpression.addWhen(iosLDAPPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression iosCalDavExpression = new CaseExpression("IOS_CALDAV_POLICY");
        iosCalDavExpression.addWhen(iosCaldavPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression iosSubscribedCalendarExpression = new CaseExpression("IOS_SUBSCRIBED_CALENDAR_POLICY");
        iosSubscribedCalendarExpression.addWhen(iosSubscribedCalendarPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression iosCarddavExpression = new CaseExpression("IOS_CARDDAV_POLICY");
        iosCarddavExpression.addWhen(iosCarddavPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression iosWebClipsExpression = new CaseExpression("IOS_WEBCLIPS_POLICY");
        iosWebClipsExpression.addWhen(iosWebclipsPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression iosAppLockExpression = new CaseExpression("IOS_APP_LOCK_POLICY");
        iosAppLockExpression.addWhen(iosAppLockPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression iosGlobalHttpProxyExpression = new CaseExpression("IOS_GLOBAL_HTTP_PROXY_POLICY");
        iosGlobalHttpProxyExpression.addWhen(iosGlobalHttpProxyPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression androidPasscodeExpression = new CaseExpression("ANDROID_PASSCODE_POLICY");
        androidPasscodeExpression.addWhen(androidPasscodePolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression androidRestrictionsExpression = new CaseExpression("ANDROID_RESTRICTIONS_POLICY");
        androidRestrictionsExpression.addWhen(androidRestrictionsPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression iosAPNExpression = new CaseExpression("IOS_APN_POLICY");
        iosAPNExpression.addWhen(iosAPNPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression iosWebContentFilterExpression = new CaseExpression("IOS_WEB_CONTENT_FILTER_POLICY");
        iosWebContentFilterExpression.addWhen(iosWebContentFilterPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression appExpression = new CaseExpression("APP_POLICY");
        appExpression.addWhen(appPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression androidEmailExpression = new CaseExpression("ANDROID_EMAIL_POLICY");
        androidEmailExpression.addWhen(androidEmailPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression androidExchangeActiveSyncExpression = new CaseExpression("ANDROID_EXCHANGE_ACTIVE_SYNC_POLICY");
        androidExchangeActiveSyncExpression.addWhen(androidExchangeActiveSyncPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression androidWIFIExpression = new CaseExpression("ANDROID_WIFI_POLICY");
        androidWIFIExpression.addWhen(androidWIFIPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression androidKioskExpression = new CaseExpression("ANDROID_KIOSK_POLICY");
        androidKioskExpression.addWhen(androidKioskPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression androidWallpaperExpression = new CaseExpression("ANDROID_WALLPAPER_POLICY");
        androidWallpaperExpression.addWhen(androidWallpaperPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression androidHttpProxyExpression = new CaseExpression("ANDROID_HTTP_PROXY_POLICY");
        androidHttpProxyExpression.addWhen(androidHttpProxyPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression windowsPasscodeExpression = new CaseExpression("WINDOWS_PASSCODE_POLICY");
        windowsPasscodeExpression.addWhen(windowsPasscodePolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression windowsEmailExpression = new CaseExpression("WINDOWS_EMAIL_POLICY");
        windowsEmailExpression.addWhen(windowsEmailPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression windowsExchangeActiveSyncExpression = new CaseExpression("WINDOWS_EXCHANGE_ACTIVE_SYNC_POLICY");
        windowsExchangeActiveSyncExpression.addWhen(windowsExchangeActiveSyncPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression windowsRestrictionsExpression = new CaseExpression("WINDOWS_RESTRICTIONS_POLICY");
        windowsRestrictionsExpression.addWhen(windowsRestrictionsPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression windowsWIFIExpression = new CaseExpression("WINDOWS_WIFI_POLICY");
        windowsWIFIExpression.addWhen(windowsWIFIPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final CaseExpression androidEFRPExpression = new CaseExpression("ANDROID_EFRP_POLICY");
        androidEFRPExpression.addWhen(androidEFRPPolicy, (Object)new Column("ConfigData", "CONFIG_DATA_ID"));
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final SelectQueryImpl configurationQuery = new SelectQueryImpl(new Table("CustomerInfo"));
        configurationQuery.addJoin(new Join("CustomerInfo", "CollnToCustomerRel", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        configurationQuery.addJoin(new Join("CollnToCustomerRel", "Collection", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 2));
        configurationQuery.addJoin(new Join("Collection", "CfgDataToCollection", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 2));
        configurationQuery.addJoin(new Join("CfgDataToCollection", "ConfigData", new String[] { "CONFIG_DATA_ID" }, new String[] { "CONFIG_DATA_ID" }, 2));
        configurationQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosPasscodeExpression, 4, "IOS_PASSCODE_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosRestrictionExpression, 4, "IOS_RESTRICTIONS_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosEmailExpression, 4, "IOS_EMAIL_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosExchangeActiveSyncExpression, 4, "IOS_EXCHANGE_ACTIVE_SYNC_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosVPNExpression, 4, "IOS_VPN_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosWIFIExpression, 4, "IOS_WIFI_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosLDAPExpression, 4, "IOS_LDAP_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosCalDavExpression, 4, "IOS_CALDAV_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosSubscribedCalendarExpression, 4, "IOS_SUBSCRIBED_CALENDAR_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosCarddavExpression, 4, "IOS_CARDDAV_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosWebClipsExpression, 4, "IOS_WEBCLIPS_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosAppLockExpression, 4, "IOS_APP_LOCK_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosGlobalHttpProxyExpression, 4, "IOS_GLOBAL_HTTP_PROXY_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(androidPasscodeExpression, 4, "ANDROID_PASSCODE_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(androidRestrictionsExpression, 4, "ANDROID_RESTRICTIONS_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosAPNExpression, 4, "IOS_APN_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosWebContentFilterExpression, 4, "IOS_WEB_CONTENT_FILTER_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(appExpression, 4, "APP_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(androidEmailExpression, 4, "ANDROID_EMAIL_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(androidExchangeActiveSyncExpression, 4, "ANDROID_EXCHANGE_ACTIVE_SYNC_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(androidWIFIExpression, 4, "ANDROID_WIFI_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(androidKioskExpression, 4, "ANDROID_KIOSK_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(androidWallpaperExpression, 4, "ANDROID_WALLPAPER_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(androidHttpProxyExpression, 4, "ANDROID_HTTP_PROXY_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(windowsPasscodeExpression, 4, "WINDOWS_PASSCODE_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(windowsEmailExpression, 4, "WINDOWS_EMAIL_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(windowsExchangeActiveSyncExpression, 4, "WINDOWS_EXCHANGE_ACTIVE_SYNC_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(windowsRestrictionsExpression, 4, "WINDOWS_RESTRICTIONS_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(windowsWIFIExpression, 4, "WINDOWS_WIFI_POLICY"));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(androidEFRPExpression, 4, "ANDROID_EFRP_POLICY"));
        final ArrayList groupByColumnsList = new ArrayList();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        configurationQuery.setGroupByClause(groupByColumn);
        return (SelectQuery)configurationQuery;
    }
    
    private SelectQuery lostModeQuery() {
        final Criteria lostModeActivationInitiatedCri = new Criteria(Column.getColumn("LostModeTrackInfo", "TRACKING_STATUS"), (Object)1, 0);
        final Criteria lostModeActivatedCri = new Criteria(Column.getColumn("LostModeTrackInfo", "TRACKING_STATUS"), (Object)2, 0);
        final Criteria lostModeActivationFailedCri = new Criteria(Column.getColumn("LostModeTrackInfo", "TRACKING_STATUS"), (Object)3, 0);
        final Criteria lostModeDeactivationInitiatedCri = new Criteria(Column.getColumn("LostModeTrackInfo", "TRACKING_STATUS"), (Object)4, 0);
        final Criteria lostModeDeactivatedCri = new Criteria(Column.getColumn("LostModeTrackInfo", "TRACKING_STATUS"), (Object)5, 0);
        final Criteria lostModeDeactivationFailedCri = new Criteria(Column.getColumn("LostModeTrackInfo", "TRACKING_STATUS"), (Object)6, 0);
        final CaseExpression lostModeActivationInitiatedExpression = new CaseExpression("LOST_MODE_ACTIVATION_INIT");
        lostModeActivationInitiatedExpression.addWhen(lostModeActivationInitiatedCri, (Object)new Column("LostModeTrackInfo", "RESOURCE_ID"));
        final CaseExpression lostModeActivatedExpression = new CaseExpression("LOST_MODE_ACTIVATED");
        lostModeActivatedExpression.addWhen(lostModeActivatedCri, (Object)new Column("LostModeTrackInfo", "RESOURCE_ID"));
        final CaseExpression lostModeActivationFailedExpression = new CaseExpression("LOST_MODE_ACTIVATION_FAILED");
        lostModeActivationFailedExpression.addWhen(lostModeActivationFailedCri, (Object)new Column("LostModeTrackInfo", "RESOURCE_ID"));
        final CaseExpression lostModeDeactivationInitiatedExpression = new CaseExpression("LOST_MODE_DEACTIVATION_INIT");
        lostModeDeactivationInitiatedExpression.addWhen(lostModeDeactivationInitiatedCri, (Object)new Column("LostModeTrackInfo", "RESOURCE_ID"));
        final CaseExpression lostModeDeactivatedExpression = new CaseExpression("LOST_MODE_DEACTIVATED");
        lostModeDeactivatedExpression.addWhen(lostModeDeactivatedCri, (Object)new Column("LostModeTrackInfo", "RESOURCE_ID"));
        final CaseExpression lostModeDeactivationFailedExpression = new CaseExpression("LOST_MODE_DEACTIVATION_FAILED");
        lostModeDeactivationFailedExpression.addWhen(lostModeDeactivationFailedCri, (Object)new Column("LostModeTrackInfo", "RESOURCE_ID"));
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final SelectQuery lostModeQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("CustomerInfo"));
        lostModeQuery.addJoin(new Join(Table.getTable("CustomerInfo"), Table.getTable("Resource"), new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        lostModeQuery.addJoin(new Join(Table.getTable("Resource"), Table.getTable("ManagedDevice"), new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        lostModeQuery.addJoin(new Join(Table.getTable("ManagedDevice"), Table.getTable("LostModeTrackInfo"), new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        lostModeQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        lostModeQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(lostModeActivationInitiatedExpression, 4, "LOST_MODE_ACTIVATION_INIT"));
        lostModeQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(lostModeActivatedExpression, 4, "LOST_MODE_ACTIVATED"));
        lostModeQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(lostModeActivationFailedExpression, 4, "LOST_MODE_ACTIVATION_FAILED"));
        lostModeQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(lostModeDeactivationInitiatedExpression, 4, "LOST_MODE_DEACTIVATION_INIT"));
        lostModeQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(lostModeDeactivatedExpression, 4, "LOST_MODE_DEACTIVATED"));
        lostModeQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(lostModeDeactivationFailedExpression, 4, "LOST_MODE_DEACTIVATION_FAILED"));
        final ArrayList groupByColumnsList = new ArrayList();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        lostModeQuery.setGroupByClause(groupByColumn);
        return lostModeQuery;
    }
    
    private SelectQuery afwErrorCodeQuery() {
        final Criteria accountStatusFailedCri = new Criteria(Column.getColumn("AFWAccountStatus", "ACCOUNT_STATUS"), (Object)3, 0);
        final Criteria accountSuccessCriteria = new Criteria(Column.getColumn("AFWAccountStatus", "ACCOUNT_STATUS"), (Object)2, 0);
        final Criteria accountInProgressCriteria = new Criteria(Column.getColumn("AFWAccountStatus", "ACCOUNT_STATUS"), (Object)1, 0);
        final Criteria accountInitiatedCriteria = new Criteria(Column.getColumn("AFWAccountStatus", "ACCOUNT_STATUS"), (Object)4, 0);
        final Criteria playStoreFailCri = new Criteria(Column.getColumn("AFWAccountStatus", "ERROR_CODE"), (Object)new Integer(-1), 0);
        final Criteria unKnownErrorCri = new Criteria(Column.getColumn("AFWAccountStatus", "ERROR_CODE"), (Object)new Integer(-2), 0);
        final Criteria deviceIsNeitherInProfileOwnerOrDeviceOwnerCri = new Criteria(Column.getColumn("AFWAccountStatus", "ERROR_CODE"), (Object)new Integer(74001), 0);
        final Criteria playStoreNotFoundCri = new Criteria(Column.getColumn("AFWAccountStatus", "ERROR_CODE"), (Object)new Integer(74002), 0);
        final Criteria playStoreSignatureMismatchCri = new Criteria(Column.getColumn("AFWAccountStatus", "ERROR_CODE"), (Object)new Integer(74003), 0);
        final Criteria playServiceNotFounfCri = new Criteria(Column.getColumn("AFWAccountStatus", "ERROR_CODE"), (Object)new Integer(74004), 0);
        final Criteria userInteractionRequiredCri = new Criteria(Column.getColumn("AFWAccountStatus", "ERROR_CODE"), (Object)new Integer(74005), 0);
        final Criteria unexpectedResultFromAccountManagerCri = new Criteria(Column.getColumn("AFWAccountStatus", "ERROR_CODE"), (Object)new Integer(74006), 0);
        final Criteria exceprionWhileAddingAccountCri = new Criteria(Column.getColumn("AFWAccountStatus", "ERROR_CODE"), (Object)new Integer(74007), 0);
        final Criteria firstAccountReadyTimeOutCri = new Criteria(Column.getColumn("AFWAccountStatus", "ERROR_CODE"), (Object)new Integer(74008), 0);
        final Criteria failedToRemoveAccountCri = new Criteria(Column.getColumn("AFWAccountStatus", "ERROR_CODE"), (Object)new Integer(74009), 0);
        final Criteria notProfileDeviceOwnerC = new Criteria(Column.getColumn("AFWAccountStatus", "ERROR_CODE"), (Object)84008, 0);
        final Criteria notProfileDeviceOwnerSamsungC = new Criteria(Column.getColumn("AFWAccountStatus", "ERROR_CODE"), (Object)84009, 0);
        final Criteria accountExpiredC = new Criteria(Column.getColumn("AFWAccountStatus", "ERROR_CODE"), (Object)84010, 0);
        final Criteria deviceOwnerProvisionInProgressCri = new Criteria(Column.getColumn("AFWAccountStatus", "ERROR_CODE"), (Object)74010, 0);
        final Criteria retriedCriteria = new Criteria(Column.getColumn("AFWAccountStatus", "ATTEMPT_COUNT"), (Object)0, 5);
        final CaseExpression playStoreFailCount = new CaseExpression("AFW_AccAdditionFailedSummary");
        playStoreFailCount.addWhen(accountStatusFailedCri.and(playStoreFailCri), (Object)new Column("AFWAccountStatus", "RESOURCE_ID"));
        final CaseExpression unKnownErrorCount = new CaseExpression("AFW_Unknown_Error_Count");
        unKnownErrorCount.addWhen(accountStatusFailedCri.and(unKnownErrorCri), (Object)new Column("AFWAccountStatus", "RESOURCE_ID"));
        final CaseExpression deviceIsNeitherInProfileOwnerOrDeviceOwnerCount = new CaseExpression("AFW_Device_Neither_In_Profile_Owner_Or_Device_Owner_Count");
        deviceIsNeitherInProfileOwnerOrDeviceOwnerCount.addWhen(accountStatusFailedCri.and(deviceIsNeitherInProfileOwnerOrDeviceOwnerCri), (Object)new Column("AFWAccountStatus", "RESOURCE_ID"));
        final CaseExpression playStoreNotFoundCount = new CaseExpression("AFW_PlayStore_Not_Found");
        playStoreNotFoundCount.addWhen(accountStatusFailedCri.and(playStoreNotFoundCri), (Object)new Column("AFWAccountStatus", "RESOURCE_ID"));
        final CaseExpression playStoreSignatureMismatchCount = new CaseExpression("AFW_Playstore_Sign_Mismatch_Count");
        playStoreSignatureMismatchCount.addWhen(accountStatusFailedCri.and(playStoreSignatureMismatchCri), (Object)new Column("AFWAccountStatus", "RESOURCE_ID"));
        final CaseExpression playServiceNotFounfCount = new CaseExpression("AFW_First_Account_Ready_TimeOut_Count");
        playServiceNotFounfCount.addWhen(accountStatusFailedCri.and(playServiceNotFounfCri), (Object)new Column("AFWAccountStatus", "RESOURCE_ID"));
        final CaseExpression userInteractionRequiredCount = new CaseExpression("AFW_User_Interaction_Required_Count");
        userInteractionRequiredCount.addWhen(accountStatusFailedCri.and(userInteractionRequiredCri), (Object)new Column("AFWAccountStatus", "RESOURCE_ID"));
        final CaseExpression unexpectedResultFromAccountManagerCount = new CaseExpression("AFW_Unexpected_Result_FromAccount_Manager_Count");
        unexpectedResultFromAccountManagerCount.addWhen(accountStatusFailedCri.and(unexpectedResultFromAccountManagerCri), (Object)new Column("AFWAccountStatus", "RESOURCE_ID"));
        final CaseExpression exceptionWhileAddingAccountCount = new CaseExpression("AFW_Exception_While_Adding_Account_Count");
        exceptionWhileAddingAccountCount.addWhen(accountStatusFailedCri.and(exceprionWhileAddingAccountCri), (Object)new Column("AFWAccountStatus", "RESOURCE_ID"));
        final CaseExpression firstAccountReadyTimeOutCount = new CaseExpression("PlayServices_Not_Found_Count");
        firstAccountReadyTimeOutCount.addWhen(accountStatusFailedCri.and(firstAccountReadyTimeOutCri), (Object)new Column("AFWAccountStatus", "RESOURCE_ID"));
        final CaseExpression failedToRemoveAccountCount = new CaseExpression("AFW_Failed_To_Remove_Account_Count");
        failedToRemoveAccountCount.addWhen(accountStatusFailedCri.and(failedToRemoveAccountCri), (Object)new Column("AFWAccountStatus", "RESOURCE_ID"));
        final CaseExpression notProfileDeviceOwnerCount = new CaseExpression("AFW_Not_Profile_Device_Owner_Count");
        notProfileDeviceOwnerCount.addWhen(accountStatusFailedCri.and(notProfileDeviceOwnerC), (Object)new Column("AFWAccountStatus", "RESOURCE_ID"));
        final CaseExpression notProfileDeviceOwnerSamsungCount = new CaseExpression("AFW_Not_Profile_Device_Owner_Samsung_Count");
        notProfileDeviceOwnerSamsungCount.addWhen(accountStatusFailedCri.and(notProfileDeviceOwnerSamsungC), (Object)new Column("AFWAccountStatus", "RESOURCE_ID"));
        final CaseExpression accountExpiredCount = new CaseExpression("AFW_Account_Expired_Count");
        accountExpiredCount.addWhen(accountStatusFailedCri.and(accountExpiredC), (Object)new Column("AFWAccountStatus", "RESOURCE_ID"));
        final CaseExpression deviceOwnerProvisionInProgressCount = new CaseExpression("AFW_Device_Owner_Provisioning_Inprogres");
        deviceOwnerProvisionInProgressCount.addWhen(accountStatusFailedCri.and(deviceOwnerProvisionInProgressCri), (Object)new Column("AFWAccountStatus", "RESOURCE_ID"));
        final CaseExpression accountFailedOnRetry = new CaseExpression("AFW_AccFailedOnRetry");
        accountFailedOnRetry.addWhen(accountStatusFailedCri.and(retriedCriteria), (Object)new Column("AFWAccountStatus", "RESOURCE_ID"));
        final CaseExpression accountSuccessOnRetry = new CaseExpression("AFW_AccSuccessOnRetry");
        accountSuccessOnRetry.addWhen(accountSuccessCriteria.and(retriedCriteria), (Object)new Column("AFWAccountStatus", "RESOURCE_ID"));
        final CaseExpression accountInProgressOnRetry = new CaseExpression("AFW_AccInProgressOnRetry");
        accountInProgressOnRetry.addWhen(accountInProgressCriteria.and(retriedCriteria), (Object)new Column("AFWAccountStatus", "RESOURCE_ID"));
        final CaseExpression accountInitiatedOnRetry = new CaseExpression("AFW_AccInitiatedOnRetry");
        accountInitiatedOnRetry.addWhen(accountInitiatedCriteria.and(retriedCriteria), (Object)new Column("AFWAccountStatus", "RESOURCE_ID"));
        final SelectQuery afwErrorCountQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("AFWAccountStatus"));
        afwErrorCountQuery.addJoin(new Join("AFWAccountStatus", "ManagedDevice", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        afwErrorCountQuery.addJoin(new Join("ManagedDevice", "Resource", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        afwErrorCountQuery.addJoin(new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        afwErrorCountQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        afwErrorCountQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(playStoreFailCount, 4, "AFW_PlayStore_Fail_Count"));
        afwErrorCountQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(unKnownErrorCount, 4, "AFW_Unknown_Error_Count"));
        afwErrorCountQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(deviceIsNeitherInProfileOwnerOrDeviceOwnerCount, 4, "AFW_Device_Neither_In_Profile_Owner_Or_Device_Owner_Count"));
        afwErrorCountQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(playStoreNotFoundCount, 4, "AFW_PlayStore_Not_Found"));
        afwErrorCountQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(playStoreSignatureMismatchCount, 4, "AFW_Playstore_Sign_Mismatch_Count"));
        afwErrorCountQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(firstAccountReadyTimeOutCount, 4, "AFW_First_Account_Ready_TimeOut_Count"));
        afwErrorCountQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(userInteractionRequiredCount, 4, "AFW_User_Interaction_Required_Count"));
        afwErrorCountQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(unexpectedResultFromAccountManagerCount, 4, "AFW_Unexpected_Result_FromAccount_Manager_Count"));
        afwErrorCountQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(exceptionWhileAddingAccountCount, 4, "AFW_Exception_While_Adding_Account_Count"));
        afwErrorCountQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(playServiceNotFounfCount, 4, "PlayServices_Not_Found_Count"));
        afwErrorCountQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(failedToRemoveAccountCount, 4, "AFW_Failed_To_Remove_Account_Count"));
        afwErrorCountQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(notProfileDeviceOwnerCount, 4, "AFW_Not_Profile_Device_Owner_Count"));
        afwErrorCountQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(notProfileDeviceOwnerSamsungCount, 4, "AFW_Not_Profile_Device_Owner_Samsung_Count"));
        afwErrorCountQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(accountExpiredCount, 4, "AFW_Account_Expired_Count"));
        afwErrorCountQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(deviceOwnerProvisionInProgressCount, 4, "AFW_Device_Owner_Provisioning_Inprogres"));
        afwErrorCountQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(accountFailedOnRetry, 4, "AFW_AccFailedOnRetry"));
        afwErrorCountQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(accountSuccessOnRetry, 4, "AFW_AccSuccessOnRetry"));
        afwErrorCountQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(accountInProgressOnRetry, 4, "AFW_AccInProgressOnRetry"));
        afwErrorCountQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(accountInitiatedOnRetry, 4, "AFW_AccInitiatedOnRetry"));
        final ArrayList groupByColumnsList = new ArrayList();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        afwErrorCountQuery.setGroupByClause(groupByColumn);
        return afwErrorCountQuery;
    }
    
    private SelectQuery androidAgentSettingsQuery() {
        final SelectQuery androidAgentSettingsQuery = (SelectQuery)new SelectQueryImpl(new Table("MDCommunicationMode"));
        androidAgentSettingsQuery.addJoin(new Join("MDCommunicationMode", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        androidAgentSettingsQuery.setCriteria(new Criteria(Column.getColumn("MDCommunicationMode", "PLATFORM_TYPE"), (Object)2, 0));
        androidAgentSettingsQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        final Column serviceTypeColumn = new Column("MDCommunicationMode", "SERVICE_TYPE");
        serviceTypeColumn.setColumnAlias("ANDRIOD_NOTIFICATION_SERVICE");
        androidAgentSettingsQuery.addSelectColumn(serviceTypeColumn);
        return androidAgentSettingsQuery;
    }
    
    private SelectQuery windowsMeMdmSettingsQuery() {
        final SelectQuery windowsmeMdmSettingsQuery = (SelectQuery)new SelectQueryImpl(new Table("MDCommunicationMode"));
        final Column custId = new Column("CustomerInfo", "CUSTOMER_ID");
        final Column servType = new Column("MDCommunicationMode", "SERVICE_TYPE");
        servType.setType(4);
        windowsmeMdmSettingsQuery.addSelectColumn(custId);
        final Criteria platformCri = new Criteria(new Column("MDCommunicationMode", "PLATFORM_TYPE"), (Object)3, 0);
        final CaseExpression winNotifServiceType = new CaseExpression("WINDOWS_NOTIFICATION_SERVICE_TYPE");
        winNotifServiceType.addWhen(platformCri, (Object)servType);
        windowsmeMdmSettingsQuery.setCriteria(platformCri);
        final Join custInfoJoin = new Join("MDCommunicationMode", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2);
        windowsmeMdmSettingsQuery.addJoin(custInfoJoin);
        windowsmeMdmSettingsQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        windowsmeMdmSettingsQuery.addSelectColumn((Column)winNotifServiceType);
        return windowsmeMdmSettingsQuery;
    }
    
    private SelectQuery getNewConfigurationQuery() {
        final Criteria l2tpCriteria = new Criteria(new Column("VpnPolicy", "CONNECTION_TYPE"), (Object)0, 0);
        final Criteria pptpCriteria = new Criteria(new Column("VpnPolicy", "CONNECTION_TYPE"), (Object)1, 0);
        final Criteria ipsecCriteria = new Criteria(new Column("VpnPolicy", "CONNECTION_TYPE"), (Object)2, 0);
        final Criteria ciscoLegacyCriteria = new Criteria(new Column("VpnPolicy", "CONNECTION_TYPE"), (Object)3, 0);
        final Criteria juniperCriteria = new Criteria(new Column("VpnPolicy", "CONNECTION_TYPE"), (Object)4, 0);
        final Criteria f5sslLegacyCriteria = new Criteria(new Column("VpnPolicy", "CONNECTION_TYPE"), (Object)5, 0);
        final Criteria customsslCriteria = new Criteria(new Column("VpnPolicy", "CONNECTION_TYPE"), (Object)6, 0);
        final Criteria pulseCriteria = new Criteria(new Column("VpnPolicy", "CONNECTION_TYPE"), (Object)7, 0);
        final Criteria ikev2Criteria = new Criteria(new Column("VpnPolicy", "CONNECTION_TYPE"), (Object)8, 0);
        final Criteria ciscoCriteria = new Criteria(new Column("VpnPolicy", "CONNECTION_TYPE"), (Object)9, 0);
        final Criteria sonicWallCriteria = new Criteria(new Column("VpnPolicy", "CONNECTION_TYPE"), (Object)10, 0);
        final Criteria arubaViaCriteria = new Criteria(new Column("VpnPolicy", "CONNECTION_TYPE"), (Object)11, 0);
        final Criteria checkPointCriteria = new Criteria(new Column("VpnPolicy", "CONNECTION_TYPE"), (Object)12, 0);
        final Criteria paloAltoLegacyCriteria = new Criteria(new Column("VpnCustomSSL", "IDENTIFIER"), (Object)"com.paloaltonetworks.GlobalProtect.vpnplugin", 0);
        final Criteria paloAltoCriteria = new Criteria(new Column("VpnCustomSSL", "IDENTIFIER"), (Object)"com.paloaltonetworks.globalprotect.vpn", 0);
        final Criteria f5sslCriteria = new Criteria(new Column("VpnCustomSSL", "IDENTIFIER"), (Object)"com.f5.access.ios", 0);
        final Criteria openVPNCriteria = new Criteria(new Column("VpnCustomSSL", "IDENTIFIER"), (Object)"net.openvpn.connect.app", 0);
        final Criteria citrixLegacyCriteria = new Criteria(new Column("VpnCustomSSL", "IDENTIFIER"), (Object)"com.citrix.NetScalerGateway.ios.app", 0);
        final Criteria citrixCriteria = new Criteria(new Column("VpnCustomSSL", "IDENTIFIER"), (Object)"com.citrix.NetScalerGateway.ios.app", 0);
        final Criteria iOSKioskCriteria = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)183, 0);
        final Criteria androidKioskCriteria = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)557, 0);
        final Criteria iOSAppNotificationsPolicyCriteria = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)528, 0);
        final Criteria macOSAppNotificationPolicyCriteria = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)775, 0);
        final CaseExpression iosL2tp = new CaseExpression("VPNL2TP");
        iosL2tp.addWhen(this.getIOSPlatformCriteria().and(l2tpCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iosPptp = new CaseExpression("VPNPPTP");
        iosPptp.addWhen(this.getIOSPlatformCriteria().and(pptpCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iosIpsec = new CaseExpression("VPNIPSEC");
        iosIpsec.addWhen(this.getIOSPlatformCriteria().and(ipsecCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iosCiscoLegacy = new CaseExpression("VPNCISCOLEGACY");
        iosCiscoLegacy.addWhen(this.getIOSPlatformCriteria().and(ciscoLegacyCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iosJuniperssl = new CaseExpression("VPNJUNIPERSSL");
        iosJuniperssl.addWhen(this.getIOSPlatformCriteria().and(juniperCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iosF5sslLegacy = new CaseExpression("VPNF5SSL");
        iosF5sslLegacy.addWhen(this.getIOSPlatformCriteria().and(f5sslLegacyCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iosCustomssl = new CaseExpression("VPNCUSTOMSSL");
        iosCustomssl.addWhen(this.getIOSPlatformCriteria().and(customsslCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iosPulsesecure = new CaseExpression("VPNPULSESECURE");
        iosPulsesecure.addWhen(this.getIOSPlatformCriteria().and(pulseCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iosIkev2 = new CaseExpression("VPNIKEV2");
        iosIkev2.addWhen(this.getIOSPlatformCriteria().and(ikev2Criteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iosCisco = new CaseExpression("VPNCISCO");
        iosCisco.addWhen(this.getIOSPlatformCriteria().and(ciscoCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iosSonicWall = new CaseExpression("VPNSONICWALL");
        iosSonicWall.addWhen(this.getIOSPlatformCriteria().and(sonicWallCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iosArubavia = new CaseExpression("VPNARUBAVIA");
        iosArubavia.addWhen(this.getIOSPlatformCriteria().and(arubaViaCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iosCheckpoint = new CaseExpression("VPNCHECKPOINT");
        iosCheckpoint.addWhen(this.getIOSPlatformCriteria().and(checkPointCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iosPaloAltoLegacy = new CaseExpression("VPNPALOALTOLEGACY");
        iosPaloAltoLegacy.addWhen(this.getIOSPlatformCriteria().and(customsslCriteria).and(paloAltoLegacyCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iosPaloAlto = new CaseExpression("PALOALTO");
        iosPaloAlto.addWhen(this.getIOSPlatformCriteria().and(customsslCriteria).and(paloAltoCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iosF5ssl = new CaseExpression("VPNF5SSLNEW");
        iosF5ssl.addWhen(this.getIOSPlatformCriteria().and(customsslCriteria).and(f5sslCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iosCitrixLegacy = new CaseExpression("VPNCITRIXLEGACY");
        iosCitrixLegacy.addWhen(this.getIOSPlatformCriteria().and(customsslCriteria).and(citrixLegacyCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iosCitrix = new CaseExpression("VPNOPENVPN");
        iosCitrix.addWhen(this.getIOSPlatformCriteria().and(customsslCriteria).and(citrixCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iosOpenvpn = new CaseExpression("VPNOPENVPN");
        iosOpenvpn.addWhen(this.getIOSPlatformCriteria().and(customsslCriteria).and(openVPNCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression otherVPN = new CaseExpression("VPNOTHERS");
        otherVPN.addWhen(this.getIOSPlatformCriteria().and(customsslCriteria).and(MDMTrackerUtil.knownVPNCriteria()), (Object)new Column("VpnCustomSSL", "IDENTIFIER"));
        final CaseExpression iosCustomProfile = new CaseExpression("IOSCustomPayloads");
        iosCustomProfile.addWhen(this.getIOSPlatformCriteria().and(new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)525, 0)), (Object)new Column("PayloadTypeDetails", "PAYLOAD_TYPE"));
        final CaseExpression macCustomProfile = new CaseExpression("MACCustomPayloads");
        macCustomProfile.addWhen(this.getMacOSPlatformCriteria().and(new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)767, 0)), (Object)new Column("PayloadTypeDetails", "PAYLOAD_TYPE"));
        final CaseExpression windowsCustomProfile = new CaseExpression("WINDOWS_CUSTOM_PROFILE");
        windowsCustomProfile.addWhen(this.getWindowPlatformCriteria().and(new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)612, 0)), (Object)new Column("PayloadTypeDetails", "PAYLOAD_TYPE"));
        final CaseExpression windowsBitlockerProfile = new CaseExpression("BITLOCKER_STORE_IN_AD");
        final Criteria admxDataCriteria = new Criteria(new Column("ADMXBackedPolicyData", "DATA_ID"), (Object)new String[] { "OSActiveDirectoryBackup_Name", "FDVActiveDirectoryBackup_Name" }, 8);
        windowsBitlockerProfile.addWhen(admxDataCriteria, (Object)new Column("ADMXBackedPolicyDataConfig", "ADMX_BACKED_POLICY_DATA_CONFIG_ID"));
        final CaseExpression iOSSingleWebAppKiosk = new CaseExpression("IOSSingleWebAppKioskCount");
        iOSSingleWebAppKiosk.addWhen(this.getIOSPlatformCriteria().and(iOSKioskCriteria).and(new Criteria(new Column("AppLockPolicy", "KIOSK_MODE"), (Object)3, 0)), (Object)new Column("Profile", "PROFILE_ID"));
        final DerivedTable autonomousKioskTable = MDMTrackerUtil.getAutonomousKioskAppTable();
        final CaseExpression iOSMultipleAppKiosk = new CaseExpression("IOSMultiAppKioskCount");
        iOSMultipleAppKiosk.addWhen(this.getIOSPlatformCriteria().and(iOSKioskCriteria).and(new Criteria(new Column("AppLockPolicy", "KIOSK_MODE"), (Object)2, 0)), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iOSSingleAppKiosk = new CaseExpression("IOSSingleAppKioskCount");
        iOSSingleAppKiosk.addWhen(this.getIOSPlatformCriteria().and(iOSKioskCriteria).and(new Criteria(new Column("AppLockPolicy", "KIOSK_MODE"), (Object)1, 0)), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iOSAutonomousKiosk = new CaseExpression("IOSAutonomousAppKioskCount");
        iOSAutonomousKiosk.addWhen(this.getIOSPlatformCriteria().and(iOSKioskCriteria).and(new Criteria(new Column(autonomousKioskTable.getTableAlias(), "CONFIG_DATA_ITEM_ID"), (Object)null, 1)), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iOSHomeScreenCount = new CaseExpression("IOSHomeScreenCount");
        iOSHomeScreenCount.addWhen(this.getIOSPlatformCriteria().and(iOSKioskCriteria).and(new Criteria(new Column("ScreenLayoutSettings", "CONFIG_DATA_ITEM_ID"), (Object)Column.getColumn("AppLockPolicy", "CONFIG_DATA_ITEM_ID"), 0)), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iOSDockConfiguredCount = new CaseExpression("IOSHomeScreenDockCount");
        iOSDockConfiguredCount.addWhen(this.getIOSPlatformCriteria().and(iOSKioskCriteria).and(new Criteria(new Column("ScreenLayoutPageDetails", "PAGE_TYPE"), (Object)2, 0)), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iOSFolderConfiguredCount = new CaseExpression("IOSHomeScreenFolderCount");
        iOSFolderConfiguredCount.addWhen(this.getIOSPlatformCriteria().and(iOSKioskCriteria).and(new Criteria(new Column("ScreenPageLayout", "PAGE_LAYOUT_TYPE"), (Object)3, 0)), (Object)new Column("Profile", "PROFILE_ID"));
        final DerivedTable appGroupCountTable = MDMTrackerUtil.getIOSScreenLayoutMoreAppsTable();
        final CaseExpression iosHomeScreenMoreAppCount = new CaseExpression("IOSHomeScreenMoreAppCount");
        iosHomeScreenMoreAppCount.addWhen(this.getIOSPlatformCriteria().and(iOSKioskCriteria).and(new Criteria(new Column("ScreenLayoutSettings", "CONFIG_DATA_ITEM_ID"), (Object)Column.getColumn("AppLockPolicy", "CONFIG_DATA_ITEM_ID"), 0).and(new Criteria(new Column("ConfigDataItem", "CONFIG_DATA_ITEM_ID"), (Object)new Column(appGroupCountTable.getTableAlias(), "CONFIG_DATA_ITEM_ID"), 0))), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iOSAppNotificationsEnabledCount = new CaseExpression("IOSAppNotificationsEnabled");
        final Criteria appNotificationsEnabledCriteria = new Criteria(Column.getColumn("MdmAppNotificationPolicy", "NOTIFICATIONS_ENABLED"), (Object)true, 0);
        iOSAppNotificationsEnabledCount.addWhen(this.getIOSPlatformCriteria().and(iOSAppNotificationsPolicyCriteria).and(appNotificationsEnabledCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iOSAppNotificationsDisabledCount = new CaseExpression("IOSAppNotificationsDisabled");
        final Criteria appNotificationsDisabledCriteria = new Criteria(Column.getColumn("MdmAppNotificationPolicy", "NOTIFICATIONS_ENABLED"), (Object)false, 0);
        iOSAppNotificationsDisabledCount.addWhen(this.getIOSPlatformCriteria().and(iOSAppNotificationsPolicyCriteria).and(appNotificationsDisabledCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iOSAppNotificationsPreviewTypeWhenUnlocked = new CaseExpression("IOSAppNotificationsPreviewTypeWhenUnlocked");
        final Criteria appNotificationsPreviewWhenUnlockedCriteria = new Criteria(Column.getColumn("MdmAppNotificationPolicy", "PREVIEW_TYPE"), (Object)1, 0);
        iOSAppNotificationsPreviewTypeWhenUnlocked.addWhen(this.getIOSPlatformCriteria().and(iOSAppNotificationsPolicyCriteria).and(appNotificationsEnabledCriteria).and(appNotificationsPreviewWhenUnlockedCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iOSAppNotificationsPreviewTypeNever = new CaseExpression("IOSAppNotificationsPreviewTypeNever");
        final Criteria appNotificationsPreviewNeverCriteria = new Criteria(Column.getColumn("MdmAppNotificationPolicy", "PREVIEW_TYPE"), (Object)2, 0);
        iOSAppNotificationsPreviewTypeNever.addWhen(this.getIOSPlatformCriteria().and(iOSAppNotificationsPolicyCriteria).and(appNotificationsEnabledCriteria).and(appNotificationsPreviewNeverCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iOSAppNotificationsTemporaryBanner = new CaseExpression("IOSAppNotificationsTemporaryBanner");
        final Criteria appNotificationsTemporaryBannerCriteria = new Criteria(Column.getColumn("MdmAppNotificationPolicy", "ALERT_TYPE"), (Object)1, 0);
        iOSAppNotificationsTemporaryBanner.addWhen(this.getIOSPlatformCriteria().and(iOSAppNotificationsPolicyCriteria).and(appNotificationsEnabledCriteria).and(appNotificationsTemporaryBannerCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression iOSAppNotificationsPermanentBanner = new CaseExpression("IOSAppNotificationsPermanentBanner");
        final Criteria appNotificationsPermanentBannerCriteria = new Criteria(Column.getColumn("MdmAppNotificationPolicy", "ALERT_TYPE"), (Object)2, 0);
        iOSAppNotificationsPermanentBanner.addWhen(this.getIOSPlatformCriteria().and(iOSAppNotificationsPolicyCriteria).and(appNotificationsEnabledCriteria).and(appNotificationsPermanentBannerCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression macOSAppNotificationsEnabled = new CaseExpression("MacOSAppNotificationsEnabled");
        macOSAppNotificationsEnabled.addWhen(this.getMacOSPlatformCriteria().and(macOSAppNotificationPolicyCriteria).and(appNotificationsEnabledCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression macOSAppNotificationsDisabled = new CaseExpression("MacOSAppNotificationsDisabled");
        macOSAppNotificationsDisabled.addWhen(this.getMacOSPlatformCriteria().and(macOSAppNotificationPolicyCriteria).and(appNotificationsDisabledCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression macOSAppNotificationsTemporaryAlert = new CaseExpression("MacOSAppNotificationsTemporaryBanner");
        macOSAppNotificationsTemporaryAlert.addWhen(this.getMacOSPlatformCriteria().and(macOSAppNotificationPolicyCriteria).and(appNotificationsEnabledCriteria).and(appNotificationsTemporaryBannerCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression macOSAppNotificationsPermanentAlert = new CaseExpression("MacOSAppNotificationsPermanentBanner");
        macOSAppNotificationsPermanentAlert.addWhen(this.getMacOSPlatformCriteria().and(macOSAppNotificationPolicyCriteria).and(appNotificationsEnabledCriteria).and(appNotificationsPermanentBannerCriteria), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression androidSingleWebAppKiosk = new CaseExpression("AndroidSingleWebAppKioskCount");
        androidSingleWebAppKiosk.addWhen(this.getAndroidPlatformCriteria().and(androidKioskCriteria).and(new Criteria(new Column("AndroidKioskPolicy", "KIOSK_MODE"), (Object)3, 0)), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression androidSingleAppKiosk = new CaseExpression("AndroidSingleAppKioskCount");
        androidSingleAppKiosk.addWhen(this.getAndroidPlatformCriteria().and(androidKioskCriteria).and(new Criteria(new Column("AndroidKioskPolicy", "KIOSK_MODE"), (Object)0, 0)), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression androidMultipleAppKiosk = new CaseExpression("AndroidMultiAppKioskCount");
        androidMultipleAppKiosk.addWhen(this.getAndroidPlatformCriteria().and(androidKioskCriteria).and(new Criteria(new Column("AndroidKioskPolicy", "KIOSK_MODE"), (Object)1, 0)), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression androidHomeScreen = new CaseExpression("AndroidHomeScreenCount");
        androidHomeScreen.addWhen(this.getAndroidPlatformCriteria().and(androidKioskCriteria).and(new Criteria(new Column("AndroidScreenLayout", "CONFIG_DATA_ITEM_ID"), (Object)Column.getColumn("AndroidKioskPolicy", "CONFIG_DATA_ITEM_ID"), 0)), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression androidDockConfiguredCount = new CaseExpression("AndroidHomeScreenDockCount");
        androidDockConfiguredCount.addWhen(this.getAndroidPlatformCriteria().and(androidKioskCriteria).and(new Criteria(new Column("AndroidScreenLayoutPageDetails", "PAGE_TYPE"), (Object)2, 0)), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression androidFolderConfiguredCount = new CaseExpression("AndroidHomeScreenFolderCount");
        androidFolderConfiguredCount.addWhen(this.getAndroidPlatformCriteria().and(androidKioskCriteria).and(new Criteria(new Column("AndroidScreenLayoutPageLayout", "PAGE_LAYOUT_TYPE"), (Object)3, 0)), (Object)new Column("Profile", "PROFILE_ID"));
        final DerivedTable androidAppGroupCountTable = MDMTrackerUtil.getAndroidScreenLayoutMoreAppTable();
        final CaseExpression androidHomeScreenMoreAppCount = new CaseExpression("AndroidHomeScreenMoreAppCount");
        androidHomeScreenMoreAppCount.addWhen(this.getAndroidPlatformCriteria().and(androidKioskCriteria).and(new Criteria(new Column("AndroidScreenLayout", "CONFIG_DATA_ITEM_ID"), (Object)Column.getColumn("AndroidKioskPolicy", "CONFIG_DATA_ITEM_ID"), 0).and(new Criteria(new Column("ConfigDataItem", "CONFIG_DATA_ITEM_ID"), (Object)new Column(androidAppGroupCountTable.getTableAlias(), "CONFIG_DATA_ITEM_ID"), 0))), (Object)new Column("Profile", "PROFILE_ID"));
        final LinkedHashMap<String, String> payloadMap = MDMTrackerUtil.getPayloadMap();
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        SelectQuery configurationQuery = (SelectQuery)new SelectQueryImpl(new Table("CustomerInfo"));
        configurationQuery.addJoin(new Join("CustomerInfo", "ProfileToCustomerRel", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        configurationQuery.addJoin(new Join("ProfileToCustomerRel", "Profile", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2));
        configurationQuery.addJoin(new Join("Profile", "RecentProfileToColln", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2));
        configurationQuery.addJoin(new Join("RecentProfileToColln", "CfgDataToCollection", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 2));
        configurationQuery.addJoin(new Join("CfgDataToCollection", "ConfigData", new String[] { "CONFIG_DATA_ID" }, new String[] { "CONFIG_DATA_ID" }, 2));
        configurationQuery.addJoin(new Join("CfgDataToCollection", "ConfigDataItem", new String[] { "CONFIG_DATA_ID" }, new String[] { "CONFIG_DATA_ID" }, 2));
        configurationQuery.addJoin(new Join("ConfigDataItem", "VpnPolicy", new String[] { "CONFIG_DATA_ITEM_ID" }, new String[] { "CONFIG_DATA_ITEM_ID" }, 1));
        configurationQuery.addJoin(new Join("VpnPolicy", "VpnCustomSSL", new String[] { "CONFIG_DATA_ITEM_ID" }, new String[] { "CONFIG_DATA_ITEM_ID" }, 1));
        configurationQuery.addJoin(new Join("ConfigDataItem", "AndroidEFRPPolicy", new String[] { "CONFIG_DATA_ITEM_ID" }, new String[] { "CONFIG_DATA_ITEM_ID" }, 1));
        configurationQuery.addJoin(new Join("ConfigDataItem", "CustomProfileToCfgDataItem", new String[] { "CONFIG_DATA_ITEM_ID" }, new String[] { "CONFIG_DATA_ITEM_ID" }, 1));
        configurationQuery.addJoin(new Join("CustomProfileToCfgDataItem", "CustomProfileDetails", new String[] { "CUSTOM_PROFILE_ID" }, new String[] { "CUSTOM_PROFILE_ID" }, 1));
        configurationQuery.addJoin(new Join("CustomProfileDetails", "CustomProfileToPayloadDetails", new String[] { "CUSTOM_PROFILE_ID" }, new String[] { "CUSTOM_PROFILE_ID" }, 1));
        configurationQuery.addJoin(new Join("CustomProfileToPayloadDetails", "PayloadTypeDetails", new String[] { "PAYLOAD_TYPE_ID" }, new String[] { "PAYLOAD_TYPE_ID" }, 1));
        configurationQuery.addJoin(new Join("ConfigDataItem", "AppLockPolicy", new String[] { "CONFIG_DATA_ITEM_ID" }, new String[] { "CONFIG_DATA_ITEM_ID" }, 1));
        configurationQuery.addJoin(new Join("AppLockPolicy", "ScreenLayoutSettings", new String[] { "CONFIG_DATA_ITEM_ID" }, new String[] { "CONFIG_DATA_ITEM_ID" }, 1));
        configurationQuery.addJoin(new Join(new Table("AppLockPolicy"), (Table)appGroupCountTable, new String[] { "CONFIG_DATA_ITEM_ID" }, new String[] { "CONFIG_DATA_ITEM_ID" }, 1));
        configurationQuery.addJoin(new Join(new Table("AppLockPolicy"), (Table)autonomousKioskTable, new String[] { "CONFIG_DATA_ITEM_ID" }, new String[] { "CONFIG_DATA_ITEM_ID" }, 1));
        configurationQuery.addJoin(new Join("ScreenLayoutSettings", "ScreenLayout", new String[] { "SCREEN_LAYOUT_ID" }, new String[] { "SCREEN_LAYOUT_ID" }, 1));
        configurationQuery.addJoin(new Join("ScreenLayout", "ScreenLayoutToPageRelation", new String[] { "SCREEN_LAYOUT_ID" }, new String[] { "SCREEN_LAYOUT_ID" }, 1));
        configurationQuery.addJoin(new Join("ScreenLayoutToPageRelation", "ScreenLayoutPageDetails", new String[] { "PAGE_ID" }, new String[] { "PAGE_ID" }, 1));
        configurationQuery.addJoin(new Join("ScreenLayoutPageDetails", "ScreenPageToPageLayout", new String[] { "PAGE_ID" }, new String[] { "PAGE_ID" }, 1));
        configurationQuery.addJoin(new Join("ScreenPageToPageLayout", "ScreenPageLayout", new String[] { "PAGE_LAYOUT_ID" }, new String[] { "PAGE_LAYOUT_ID" }, 1));
        configurationQuery.addJoin(new Join("ConfigDataItem", "AndroidKioskPolicy", new String[] { "CONFIG_DATA_ITEM_ID" }, new String[] { "CONFIG_DATA_ITEM_ID" }, 1));
        configurationQuery.addJoin(new Join("ConfigDataItem", "MdmAppNotificationPolicyToConfigRel", new String[] { "CONFIG_DATA_ITEM_ID" }, new String[] { "CONFIG_DATA_ITEM_ID" }, 1));
        configurationQuery.addJoin(new Join("MdmAppNotificationPolicyToConfigRel", "MdmAppNotificationPolicy", new String[] { "MDM_APP_NOTIFICATION_POLICY_ID" }, new String[] { "MDM_APP_NOTIFICATION_POLICY_ID" }, 1));
        final Table androidScreenLayout = new Table("ScreenLayoutSettings", "AndroidScreenLayout");
        final Table androidScreenLayoutPageRel = new Table("ScreenLayoutToPageRelation", "AndroidScreenLayoutToPageRel");
        final Table androidScreenLayoutPageDetails = new Table("ScreenLayoutPageDetails", "AndroidScreenLayoutPageDetails");
        final Table androidScreenLayoutPageLayoutRel = new Table("ScreenPageToPageLayout", "AndroidScreenLayoutPageLayoutRel");
        final Table androidScreenLayoutPageLayout = new Table("ScreenPageLayout", "AndroidScreenLayoutPageLayout");
        configurationQuery.addJoin(new Join(new Table("AndroidKioskPolicy"), androidScreenLayout, new String[] { "CONFIG_DATA_ITEM_ID" }, new String[] { "CONFIG_DATA_ITEM_ID" }, 1));
        configurationQuery.addJoin(new Join(new Table("AndroidKioskPolicy"), (Table)androidAppGroupCountTable, new String[] { "CONFIG_DATA_ITEM_ID" }, new String[] { "CONFIG_DATA_ITEM_ID" }, 1));
        configurationQuery.addJoin(new Join(androidScreenLayout, androidScreenLayoutPageRel, new String[] { "SCREEN_LAYOUT_ID" }, new String[] { "SCREEN_LAYOUT_ID" }, 1));
        configurationQuery.addJoin(new Join(androidScreenLayoutPageRel, androidScreenLayoutPageDetails, new String[] { "PAGE_ID" }, new String[] { "PAGE_ID" }, 1));
        configurationQuery.addJoin(new Join(androidScreenLayoutPageDetails, androidScreenLayoutPageLayoutRel, new String[] { "PAGE_ID" }, new String[] { "PAGE_ID" }, 1));
        configurationQuery.addJoin(new Join(androidScreenLayoutPageLayoutRel, androidScreenLayoutPageLayout, new String[] { "PAGE_LAYOUT_ID" }, new String[] { "PAGE_LAYOUT_ID" }, 1));
        final DerivedTable addMoreConfigTable = this.getAddMoreSupportedConfig();
        configurationQuery.addJoin(new Join(Table.getTable("Profile"), (Table)addMoreConfigTable, new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1));
        configurationQuery = MEMDMTrackerUtil.EFRPMailIdCount(configurationQuery);
        MEMDMTrackerUtil.addBitlockerColumns(configurationQuery);
        configurationQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        final List addMoreSupportedConfig = Arrays.asList(MDMTrackerConstants.ADD_MORE_SUPPORTED_CONFIG);
        for (final String payloadName : payloadMap.keySet()) {
            final CaseExpression payloadExpression = new CaseExpression(payloadName);
            final Criteria payloadCriteria = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)payloadMap.get(payloadName), 0);
            payloadExpression.addWhen(payloadCriteria, (Object)new Column("Profile", "PROFILE_ID"));
            configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(payloadExpression, 4, payloadName));
            final Integer payload_id = Integer.valueOf(payloadMap.get(payloadName));
            if (addMoreSupportedConfig.contains(payload_id)) {
                final String multiPayloadName = "MULTIPLE_" + payloadName;
                final CaseExpression multiPayloadExpression = new CaseExpression(multiPayloadName);
                multiPayloadExpression.addWhen(payloadCriteria, (Object)Column.getColumn(addMoreConfigTable.getTableAlias(), "PROFILE_ID"));
                configurationQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(multiPayloadExpression, 4, multiPayloadName));
            }
        }
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosL2tp));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosPptp));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosIpsec));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosCiscoLegacy));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosJuniperssl));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosF5sslLegacy));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosCustomssl));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosPulsesecure));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosIkev2));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosCisco));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosSonicWall));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosArubavia));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosCheckpoint));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosPaloAltoLegacy));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosPaloAlto));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosF5ssl));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosOpenvpn));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosCitrixLegacy));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosCitrix));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctStringArrayCaseExpressionColumn(otherVPN));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctStringArrayCaseExpressionColumn(iosCustomProfile));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctStringArrayCaseExpressionColumn(macCustomProfile));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctStringArrayCaseExpressionColumn(windowsCustomProfile));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)windowsBitlockerProfile));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iOSSingleWebAppKiosk));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iOSHomeScreenCount));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)androidHomeScreen));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)androidSingleWebAppKiosk));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iosHomeScreenMoreAppCount));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iOSDockConfiguredCount));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iOSFolderConfiguredCount));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)androidHomeScreenMoreAppCount));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)androidDockConfiguredCount));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)androidFolderConfiguredCount));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iOSSingleAppKiosk));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)androidSingleAppKiosk));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iOSAutonomousKiosk));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iOSMultipleAppKiosk));
        configurationQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)androidMultipleAppKiosk));
        final Column appNotificationsEnabledCount = trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iOSAppNotificationsEnabledCount);
        final CaseExpression isiOSAppNotificationsEnabled = new CaseExpression("IOSAppNotificationsIsEnabled");
        isiOSAppNotificationsEnabled.addWhen(new Criteria(appNotificationsEnabledCount, (Object)0, 5), (Object)true);
        isiOSAppNotificationsEnabled.elseVal((Object)false);
        final Column appNotificationsDisabledCount = trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iOSAppNotificationsDisabledCount);
        final CaseExpression isiOSAppNotificationsDisabled = new CaseExpression("IOSAppNotificationsIsDisabled");
        isiOSAppNotificationsDisabled.addWhen(new Criteria(appNotificationsDisabledCount, (Object)0, 5), (Object)true);
        isiOSAppNotificationsDisabled.elseVal((Object)false);
        final Column appNotificationsPreviewTypeNeverCount = trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iOSAppNotificationsPreviewTypeNever);
        final Column appNotificationsPreviewTypeWhenUnlockedCount = trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iOSAppNotificationsPreviewTypeWhenUnlocked);
        final Criteria isAppNotificationsPreviewTypeNeverCountGreaterThanZero = new Criteria(appNotificationsPreviewTypeNeverCount, (Object)0, 5);
        final Criteria isAppNotificationsPreviewTypeWhenUnlockedCountGreaterThanZero = new Criteria(appNotificationsPreviewTypeWhenUnlockedCount, (Object)0, 5);
        final CaseExpression isiOSAppNotificationsPreviewHidden = new CaseExpression("IOSAppNotificationsIsPreviewHidden");
        isiOSAppNotificationsPreviewHidden.addWhen(isAppNotificationsPreviewTypeNeverCountGreaterThanZero.or(isAppNotificationsPreviewTypeWhenUnlockedCountGreaterThanZero), (Object)true);
        isiOSAppNotificationsPreviewHidden.elseVal((Object)false);
        final Column appNotificationsTemporaryBannerCount = trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iOSAppNotificationsTemporaryBanner);
        final Column appNotificationsPermanentBannerCount = trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)iOSAppNotificationsPermanentBanner);
        final Criteria isAppNotificationsTemporaryBannerCountGreaterThanZero = new Criteria(appNotificationsTemporaryBannerCount, (Object)0, 5);
        final Criteria isAppNotificationsPermanentBannerCountGreaterThanZero = new Criteria(appNotificationsPermanentBannerCount, (Object)0, 5);
        final CaseExpression isiOSAppNotificationsAlertsEnabled = new CaseExpression("IOSAppNotificationsIsAlertEnabled");
        isiOSAppNotificationsAlertsEnabled.addWhen(isAppNotificationsTemporaryBannerCountGreaterThanZero.or(isAppNotificationsPermanentBannerCountGreaterThanZero), (Object)true);
        isiOSAppNotificationsAlertsEnabled.elseVal((Object)false);
        final Column macOSAppNotificationsEnabledCount = trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)macOSAppNotificationsEnabled);
        final CaseExpression isMacOSAppNotificationsEnabled = new CaseExpression("MacOSAppNotificationsIsEnabled");
        isMacOSAppNotificationsEnabled.addWhen(new Criteria(macOSAppNotificationsEnabledCount, (Object)0, 5), (Object)true);
        isMacOSAppNotificationsEnabled.elseVal((Object)false);
        final Column macOSAppNotificationsDisabledCount = trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)macOSAppNotificationsDisabled);
        final CaseExpression isMacOSAppNotificationsDisabled = new CaseExpression("MacOSAppNotificationsIsDisabled");
        isMacOSAppNotificationsDisabled.addWhen(new Criteria(macOSAppNotificationsDisabledCount, (Object)0, 5), (Object)true);
        isMacOSAppNotificationsDisabled.elseVal((Object)false);
        final Column macOSAppNotificationsTemporaryBannerCount = trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)macOSAppNotificationsTemporaryAlert);
        final Column macOSAppNotificationsPermanentBannerCount = trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)macOSAppNotificationsPermanentAlert);
        final Criteria isMacOSAppNotificationsTemporaryBannerCountGreaterThanZero = new Criteria(macOSAppNotificationsTemporaryBannerCount, (Object)0, 5);
        final Criteria isMacOSAppNotificationsPermanentBannerCountGreaterThanZero = new Criteria(macOSAppNotificationsPermanentBannerCount, (Object)0, 5);
        final CaseExpression isMacOSAppNotificationsAlertsEnabled = new CaseExpression("MacOSAppNotificationsIsAlertEnabled");
        isMacOSAppNotificationsAlertsEnabled.addWhen(isMacOSAppNotificationsTemporaryBannerCountGreaterThanZero.or(isMacOSAppNotificationsPermanentBannerCountGreaterThanZero), (Object)true);
        isMacOSAppNotificationsAlertsEnabled.elseVal((Object)false);
        configurationQuery.addSelectColumn((Column)isiOSAppNotificationsEnabled);
        configurationQuery.addSelectColumn((Column)isiOSAppNotificationsDisabled);
        configurationQuery.addSelectColumn((Column)isiOSAppNotificationsPreviewHidden);
        configurationQuery.addSelectColumn((Column)isiOSAppNotificationsAlertsEnabled);
        configurationQuery.addSelectColumn((Column)isMacOSAppNotificationsEnabled);
        configurationQuery.addSelectColumn((Column)isMacOSAppNotificationsDisabled);
        configurationQuery.addSelectColumn((Column)isMacOSAppNotificationsAlertsEnabled);
        configurationQuery.setGroupByClause(trackerUtil.getCustomerGroupClause());
        return configurationQuery;
    }
    
    private SelectQuery appsQuery() {
        final Criteria discoveredAppsCri = new Criteria(new Column("MdAppDetails", "APP_ID"), (Object)null, 1);
        final Criteria iosPlatform = new Criteria(new Column("MdAppDetails", "PLATFORM_TYPE"), (Object)1, 0);
        final Criteria androidPlatform = new Criteria(new Column("MdAppDetails", "PLATFORM_TYPE"), (Object)2, 0);
        final Criteria windowsPlatform = new Criteria(new Column("MdAppDetails", "PLATFORM_TYPE"), (Object)3, 0);
        final Criteria chromePlatform = new Criteria(new Column("MdAppDetails", "PLATFORM_TYPE"), (Object)4, 0);
        final Criteria storeCriteria = new Criteria(new Column("MdPackageToAppGroup", "PACKAGE_TYPE"), (Object)0, 0);
        final Criteria enterpriseCriteria = new Criteria(new Column("MdPackageToAppGroup", "PACKAGE_TYPE"), (Object)2, 0);
        final Criteria paidCriteria = new Criteria(new Column("MdPackageToAppGroup", "PACKAGE_TYPE"), (Object)1, 0);
        final Criteria vppLicenseType = new Criteria(new Column("MdStoreAssetToAppGroupRel", "STORE_ASSET_ID"), (Object)null, 1);
        final Criteria managedAppConfiguration = new Criteria(new Column("ManagedAppConfiguration", "APP_CONFIG_ID"), (Object)null, 1);
        final Criteria dependencyConfiguration = new Criteria(new Column("AppDependencyPolicy", "DEPENDENCY_ID"), (Object)null, 1);
        final Criteria notMacOSSupportedDevice = new Criteria(new Column("MdPackageToAppData", "SUPPORTED_DEVICES"), (Object)16, 1);
        final Criteria iPhoneSupportCriteria = this.getSupportedDeviceCriteria(2);
        final Criteria iPadSupportCriteria = this.getSupportedDeviceCriteria(1);
        final Criteria iPodSupportCriteria = this.getSupportedDeviceCriteria(4);
        final Criteria appleTvSupportCriteria = this.getSupportedDeviceCriteria(8);
        final Criteria macOsSupportCriteria = this.getSupportedDeviceCriteria(16);
        final Criteria notAccountAppsCriteria = new Criteria(new Column("MdPackageToAppGroup", "IS_PURCHASED_FROM_PORTAL"), (Object)false, 0);
        final Criteria macAgentNotInCriteria = new Criteria(Column.getColumn("MdAppGroupDetails", "IDENTIFIER"), (Object)"com.manageengine.mdm.mac", 1);
        final Criteria afwAndroidPlatformCriteria = new Criteria(Column.getColumn("MdPackage", "PLATFORM_TYPE"), (Object)2, 0);
        final Criteria afwPaidAppCri = new Criteria(Column.getColumn("MdPackageToAppGroup", "IS_PAID_APP"), (Object)Boolean.TRUE, 0);
        final Criteria afwPortalCri = new Criteria(Column.getColumn("MdPackageToAppGroup", "IS_PURCHASED_FROM_PORTAL"), (Object)Boolean.TRUE, 0);
        final Criteria accountApp = new Criteria(new Column("MdPackageToAppGroup", "IS_PURCHASED_FROM_PORTAL"), (Object)true, 0);
        final Criteria msiApp = new Criteria(new Column("MdPackageToAppData", "APP_FILE_LOC"), (Object)".msi", 11);
        final Criteria msixApp = new Criteria(new Column("MdPackageToAppData", "APP_FILE_LOC"), (Object)".msix", 11);
        final String[] agentIdentifiers = { "com.manageengine.ems", "com.manageengine.mdm.mac" };
        final Criteria agentExcludeCri = new Criteria(new Column("MdAppDetails", "IDENTIFIER"), (Object)agentIdentifiers, 9);
        final Criteria adhocAppCriteria = enterpriseCriteria.and(new Criteria(new Column("AppleProvProfilesExtn", "PROV_PROV_SIGNED_TYPE"), (Object)1, 0));
        final Criteria developerAppCriteria = enterpriseCriteria.and(new Criteria(new Column("AppleProvProfilesExtn", "PROV_PROV_SIGNED_TYPE"), (Object)2, 0));
        final Criteria distributionAppCriteria = enterpriseCriteria.and(new Criteria(new Column("AppleProvProfilesExtn", "PROV_PROV_SIGNED_TYPE"), (Object)3, 0));
        final Criteria offlineApp = new Criteria(Column.getColumn("WindowsAppDetails", "IS_OFFLINE_APP"), (Object)true, 0);
        final Criteria onlineApp = new Criteria(Column.getColumn("WindowsAppDetails", "IS_OFFLINE_APP"), (Object)false, 0);
        final CaseExpression offlineAppCnt = new CaseExpression("WINDOWS_BSTORE_OFFLINE_APP");
        offlineAppCnt.addWhen(accountApp.and(offlineApp), (Object)new Column("MdPackageToAppData", "APP_GROUP_ID"));
        final CaseExpression onlineAppCnt = new CaseExpression("WINDOWS_BSTORE_ONLINE_APP");
        onlineAppCnt.addWhen(accountApp.and(onlineApp), (Object)new Column("MdPackageToAppData", "APP_GROUP_ID"));
        final CaseExpression msiApplication = new CaseExpression("WINDOWS_MSI_APPLICATION");
        msiApplication.addWhen(msiApp, (Object)new Column("MdPackageToAppData", "PACKAGE_ID"));
        final CaseExpression msixApplication = new CaseExpression("WINDOWS_MSIX_APPLICATION");
        msixApplication.addWhen(msixApp, (Object)new Column("MdPackageToAppData", "PACKAGE_ID"));
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final CaseExpression totalAppExpression = new CaseExpression("TOTAL_DISCOVERED_APPS");
        totalAppExpression.addWhen(discoveredAppsCri, (Object)new Column("MdAppDetails", "APP_ID"));
        final CaseExpression androidFreeApps = new CaseExpression("ANDROID_FREE_APPS_COUNT");
        androidFreeApps.addWhen(androidPlatform.and(storeCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression androidPaidApps = new CaseExpression("ANDROID_PAID_APPS_COUNT");
        androidPaidApps.addWhen(androidPlatform.and(paidCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression androidEnterpriseApps = new CaseExpression("ANDROID_ENTERPRISE_APPS_COUNT");
        androidEnterpriseApps.addWhen(androidPlatform.and(enterpriseCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression chromeStoreApps = new CaseExpression("Chrome_Store_App_Count");
        chromeStoreApps.addWhen(chromePlatform.and(storeCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression chromeCustomApps = new CaseExpression("Chrome_Custom_App_Count");
        chromeCustomApps.addWhen(chromePlatform.and(enterpriseCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression iosFreeApps = new CaseExpression("IOS_FREE_APPS_COUNT");
        iosFreeApps.addWhen(iosPlatform.and(storeCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression iosPaidApps = new CaseExpression("IOS_PAID_APPS_COUNT");
        iosPaidApps.addWhen(iosPlatform.and(paidCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression iosEnterpriseApps = new CaseExpression("IOS_ENTERPRISE_APPS");
        iosEnterpriseApps.addWhen(iosPlatform.and(enterpriseCriteria).and(notMacOSSupportedDevice), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression iosAdhocEnterpriseApps = new CaseExpression("iOS_Adhoc_Provisioned_App_Count");
        iosAdhocEnterpriseApps.addWhen(iosPlatform.and(adhocAppCriteria).and(agentExcludeCri), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression iosDeveloperEnterpriseApps = new CaseExpression("iOS_Developer_Provisioned_App_Count");
        iosDeveloperEnterpriseApps.addWhen(iosPlatform.and(developerAppCriteria).and(agentExcludeCri), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression iosDistributionEnterpriseApps = new CaseExpression("iOS_Distribution_Provisioned_App_Count");
        iosDistributionEnterpriseApps.addWhen(iosPlatform.and(distributionAppCriteria).and(agentExcludeCri), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression vppAppsExpression = new CaseExpression("iOS_VPP_ManagedDistribution_App_Count");
        vppAppsExpression.addWhen(iosPlatform.and(vppLicenseType), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression freeVppAppsExpression = new CaseExpression("iOS_VPP_Free_App_Count");
        freeVppAppsExpression.addWhen(iosPlatform.and(vppLicenseType).and(storeCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression paidVppAppsExpression = new CaseExpression("iOS_VPP_Paid_App_Count");
        paidVppAppsExpression.addWhen(iosPlatform.and(vppLicenseType).and(paidCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression iosAppConfigExpression = new CaseExpression("IOS_APP_CONFIG_COUNT");
        iosAppConfigExpression.addWhen(iosPlatform.and(managedAppConfiguration), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression androidAppConfigExpression = new CaseExpression("ANDROID_APP_CONFIG_COUNT");
        androidAppConfigExpression.addWhen(androidPlatform.and(managedAppConfiguration), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression windowsAppConfigExpression = new CaseExpression("WINDOWS_APP_CONFIG_COUNT");
        windowsAppConfigExpression.addWhen(windowsPlatform.and(managedAppConfiguration), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression AppDependencyExpression = new CaseExpression("APPS_WITH_DEPENDENCY");
        AppDependencyExpression.addWhen(dependencyConfiguration, (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression afwApprovedAppsCount = new CaseExpression("AFW_ApprovedAppsCount");
        afwApprovedAppsCount.addWhen(afwAndroidPlatformCriteria.and(afwPortalCri), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression afwPaidAppsCount = new CaseExpression("AFW_PaidAppsCount");
        afwPaidAppsCount.addWhen(afwPaidAppCri.and(afwPortalCri).and(afwAndroidPlatformCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression iPhoneEnterpriseAppsCount = new CaseExpression("iPhone_Enterprise_Apps_Count");
        iPhoneEnterpriseAppsCount.addWhen(iosPlatform.and(enterpriseCriteria).and(iPhoneSupportCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression iPadEnterpriseAppsCount = new CaseExpression("iPad_Enterprise_Apps_Count");
        iPadEnterpriseAppsCount.addWhen(iosPlatform.and(enterpriseCriteria).and(iPadSupportCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression iPodEnterpriseAppsCount = new CaseExpression("iPod_Enterprise_Apps_Count");
        iPodEnterpriseAppsCount.addWhen(iosPlatform.and(enterpriseCriteria).and(iPodSupportCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression appleTVEnterpriseAppsCount = new CaseExpression("appleTV_Enterprise_Apps_Count");
        appleTVEnterpriseAppsCount.addWhen(iosPlatform.and(enterpriseCriteria).and(appleTvSupportCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression macOSEnterpriseAppsCount = new CaseExpression("macOS_Enterprise_Apps_Count");
        macOSEnterpriseAppsCount.addWhen(iosPlatform.and(enterpriseCriteria).and(macOsSupportCriteria).and(macAgentNotInCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression iPhoneAppStoreAppsCount = new CaseExpression("iPhone_App_Store_Apps_Count");
        iPhoneAppStoreAppsCount.addWhen(iosPlatform.and(storeCriteria).and(paidCriteria).and(notAccountAppsCriteria).and(iPhoneSupportCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression iPadAppStoreAppsCount = new CaseExpression("iPad_App_Store_Apps_Count");
        iPadAppStoreAppsCount.addWhen(iosPlatform.and(storeCriteria).and(paidCriteria).and(notAccountAppsCriteria).and(iPadSupportCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression iPodAppStoreAppsCount = new CaseExpression("iPod_App_Store_Apps_Count");
        iPodAppStoreAppsCount.addWhen(iosPlatform.and(storeCriteria).and(paidCriteria).and(notAccountAppsCriteria).and(iPodSupportCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression appleTVAppStoreAppsCount = new CaseExpression("appleTV_App_Store_Apps_Count");
        appleTVAppStoreAppsCount.addWhen(iosPlatform.and(storeCriteria).and(paidCriteria).and(notAccountAppsCriteria).and(appleTvSupportCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression macOSAppStoreAppsCount = new CaseExpression("macOS_App_Store_Apps_Count");
        macOSAppStoreAppsCount.addWhen(iosPlatform.and(storeCriteria).and(paidCriteria).and(notAccountAppsCriteria).and(macOsSupportCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression iPhoneVppAppsCount = new CaseExpression("iPhone_Vpp_Apps_Count");
        iPhoneVppAppsCount.addWhen(iosPlatform.and(vppLicenseType).and(iPhoneSupportCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression iPadVppAppsCount = new CaseExpression("iPad_Vpp_Apps_Count");
        iPadVppAppsCount.addWhen(iosPlatform.and(vppLicenseType).and(iPadSupportCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression iPodVppAppsCount = new CaseExpression("iPod_Vpp_Apps_Count");
        iPodVppAppsCount.addWhen(iosPlatform.and(vppLicenseType).and(iPodSupportCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression appleTVVppAppsCount = new CaseExpression("appleTV_Vpp_Apps_Count");
        appleTVVppAppsCount.addWhen(iosPlatform.and(vppLicenseType).and(appleTvSupportCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        final CaseExpression macOSVppAppsCount = new CaseExpression("macOS_Vpp_Apps_Count");
        macOSVppAppsCount.addWhen(iosPlatform.and(vppLicenseType).and(macOsSupportCriteria), (Object)new Column("MdPackage", "PACKAGE_ID"));
        SelectQuery appsQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("MdAppDetails"));
        appsQuery.addJoin(new Join("MdAppDetails", "MdAppToGroupRel", new String[] { "APP_ID" }, new String[] { "APP_ID" }, 2));
        appsQuery.addJoin(new Join("MdAppToGroupRel", "MdAppGroupDetails", new String[] { "APP_GROUP_ID" }, new String[] { "APP_GROUP_ID" }, 2));
        appsQuery.addJoin(new Join("MdAppGroupDetails", "MdPackageToAppGroup", new String[] { "APP_GROUP_ID" }, new String[] { "APP_GROUP_ID" }, 1));
        appsQuery.addJoin(new Join("MdAppDetails", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        appsQuery.addJoin(new Join("MdPackageToAppGroup", "MdPackage", new String[] { "PACKAGE_ID" }, new String[] { "PACKAGE_ID" }, 1));
        appsQuery.addJoin(new Join("MdAppGroupDetails", "MdLicenseToAppGroupRel", new String[] { "APP_GROUP_ID" }, new String[] { "APP_GROUP_ID" }, 1));
        appsQuery.addJoin(new Join("MdLicenseToAppGroupRel", "MdLicense", new String[] { "LICENSE_ID" }, new String[] { "LICENSE_ID" }, 1));
        appsQuery.addJoin(new Join("MdPackageToAppGroup", "MdStoreAssetToAppGroupRel", new String[] { "APP_GROUP_ID" }, new String[] { "APP_GROUP_ID" }, 1));
        appsQuery.addJoin(new Join("MdStoreAssetToAppGroupRel", "MdVppAsset", new String[] { "STORE_ASSET_ID" }, new String[] { "VPP_ASSET_ID" }, 1));
        appsQuery.addJoin(new Join("MdVppAsset", "MdVPPTokenDetails", new String[] { "TOKEN_ID" }, new String[] { "TOKEN_ID" }, 1));
        appsQuery.addJoin(new Join("MdVPPTokenDetails", "MdBusinessStoreToVppRel", new String[] { "TOKEN_ID" }, new String[] { "TOKEN_ID" }, 1));
        appsQuery.addJoin(new Join("MdBusinessStoreToVppRel", "ManagedBusinessStore", new String[] { "BUSINESSSTORE_ID" }, new String[] { "BUSINESSSTORE_ID" }, 1));
        appsQuery.addJoin(new Join("MdAppGroupDetails", "MDAppAssignableDetails", new String[] { "APP_GROUP_ID" }, new String[] { "APP_GROUP_ID" }, 1));
        appsQuery.addJoin(new Join("MdPackageToAppGroup", "AppConfigTemplate", new String[] { "APP_GROUP_ID" }, new String[] { "APP_GROUP_ID" }, 1));
        appsQuery.addJoin(new Join("MdPackageToAppGroup", "MdPackageToAppData", new String[] { "APP_GROUP_ID" }, new String[] { "APP_GROUP_ID" }, 1));
        appsQuery.addJoin(new Join("MdPackageToAppData", "WindowsAppDetails", new String[] { "APP_ID" }, new String[] { "APP_ID" }, 1));
        appsQuery.addJoin(new Join("MdPackageToAppData", "InstallAppPolicy", new String[] { "APP_ID" }, new String[] { "APP_ID" }, 1));
        appsQuery.addJoin(new Join("InstallAppPolicy", "AppDependencyPolicy", new String[] { "CONFIG_DATA_ITEM_ID" }, new String[] { "CONFIG_DATA_ITEM_ID" }, 1));
        appsQuery.addJoin(new Join("InstallAppPolicy", "AppConfigPolicy", new String[] { "CONFIG_DATA_ITEM_ID" }, new String[] { "CONFIG_DATA_ITEM_ID" }, 1));
        appsQuery.addJoin(new Join("AppConfigPolicy", "ManagedAppConfiguration", new String[] { "APP_CONFIG_ID" }, new String[] { "APP_CONFIG_ID" }, 1));
        appsQuery.addJoin(new Join("MdAppDetails", "MdAppToProvProfileRel", new String[] { "APP_ID" }, new String[] { "APP_ID" }, 1));
        appsQuery.addJoin(new Join("MdAppToProvProfileRel", "AppleProvProfilesExtn", new String[] { "PROV_ID" }, new String[] { "PROV_ID" }, 1));
        appsQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(totalAppExpression, 4, "TOTAL_DISCOVERED_APPS"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(androidFreeApps, 4, "ANDROID_FREE_APPS_COUNT"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(androidPaidApps, 4, "ANDROID_PAID_APPS_COUNT"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(androidEnterpriseApps, 4, "ANDROID_ENTERPRISE_APPS_COUNT"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(chromeStoreApps, 4, "Chrome_Store_App_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(chromeCustomApps, 4, "Chrome_Custom_App_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosFreeApps, 4, "IOS_FREE_APPS_COUNT"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosPaidApps, 4, "IOS_PAID_APPS_COUNT"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosEnterpriseApps, 4, "IOS_ENTERPRISE_APPS"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosAdhocEnterpriseApps, 4, "iOS_Adhoc_Provisioned_App_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosDeveloperEnterpriseApps, 4, "iOS_Developer_Provisioned_App_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosDistributionEnterpriseApps, 4, "iOS_Distribution_Provisioned_App_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(vppAppsExpression, 4, "iOS_VPP_ManagedDistribution_App_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(freeVppAppsExpression, 4, "iOS_VPP_Free_App_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(paidVppAppsExpression, 4, "iOS_VPP_Paid_App_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iosAppConfigExpression, 4, "IOS_APP_CONFIG_COUNT"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(androidAppConfigExpression, 4, "ANDROID_APP_CONFIG_COUNT"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(windowsAppConfigExpression, 4, "WINDOWS_APP_CONFIG_COUNT"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(offlineAppCnt, 4, "WINDOWS_BSTORE_OFFLINE_APP"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(onlineAppCnt, 4, "WINDOWS_BSTORE_ONLINE_APP"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(msiApplication, 4, "WINDOWS_MSI_APPLICATION"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(msixApplication, 4, "WINDOWS_MSIX_APPLICATION"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(AppDependencyExpression, 4, "APPS_WITH_DEPENDENCY"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(afwApprovedAppsCount, 4, "AFW_Approved_App_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(afwPaidAppsCount, 4, "AFW_Paid_App_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iPhoneEnterpriseAppsCount, 4, "iPhone_Enterprise_Apps_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iPadEnterpriseAppsCount, 4, "iPad_Enterprise_Apps_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iPodEnterpriseAppsCount, 4, "iPod_Enterprise_Apps_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(appleTVEnterpriseAppsCount, 4, "appleTV_Enterprise_Apps_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(macOSEnterpriseAppsCount, 4, "macOS_Enterprise_Apps_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iPhoneAppStoreAppsCount, 4, "iPhone_App_Store_Apps_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iPadAppStoreAppsCount, 4, "iPad_App_Store_Apps_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iPodAppStoreAppsCount, 4, "iPod_App_Store_Apps_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(appleTVAppStoreAppsCount, 4, "appleTV_App_Store_Apps_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(macOSAppStoreAppsCount, 4, "macOS_App_Store_Apps_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iPhoneVppAppsCount, 4, "iPhone_Vpp_Apps_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iPadVppAppsCount, 4, "iPad_Vpp_Apps_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(iPodVppAppsCount, 4, "iPod_Vpp_Apps_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(appleTVVppAppsCount, 4, "appleTV_Vpp_Apps_Count"));
        appsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(macOSVppAppsCount, 4, "macOS_Vpp_Apps_Count"));
        appsQuery = this.addPackgeTbls(appsQuery);
        final ArrayList groupByColumnsList = new ArrayList();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        appsQuery.setGroupByClause(groupByColumn);
        return appsQuery;
    }
    
    private Criteria getSupportedDeviceCriteria(final int suppDevice) {
        final Column c = (Column)Column.createFunction("AND", new Object[] { new Column("MdPackageToAppData", "SUPPORTED_DEVICES"), suppDevice });
        c.setType(4);
        final Criteria supDeviceCriteria = new Criteria(c, (Object)new Integer(0), 5);
        return supDeviceCriteria;
    }
    
    private SelectQuery blackListSettingQuery() {
        final Criteria noActionCorporateCriteria = new Criteria(new Column("MdAppBlackListSetting", "ACTION_ON_CORPORATE_DEVICE"), (Object)1, 0);
        final Criteria disableActionCorporateCriteria = new Criteria(new Column("MdAppBlackListSetting", "ACTION_ON_CORPORATE_DEVICE"), (Object)2, 0);
        final Criteria noActionBYODCriteria = new Criteria(new Column("MdAppBlackListSetting", "ACTION_ON_BYOD_DEVICE"), (Object)1, 0);
        final Criteria disableActionBYODCriteria = new Criteria(new Column("MdAppBlackListSetting", "ACTION_ON_BYOD_DEVICE"), (Object)2, 0);
        final Criteria whiteListCriteria = new Criteria(new Column("MdAppBlackListSetting", "IS_WHITE_LIST"), (Object)true, 0);
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("CustomerInfo"));
        final CaseExpression blacklistActionOnCorporate = new CaseExpression("BLACKLIST_ACTION_ON_CORPORATE");
        blacklistActionOnCorporate.addWhen(noActionCorporateCriteria, (Object)"NO ACTION");
        blacklistActionOnCorporate.addWhen(disableActionCorporateCriteria, (Object)"DISABLE");
        blacklistActionOnCorporate.elseVal((Object)"UNINSTALL");
        final CaseExpression blacklistActionOnBYOD = new CaseExpression("BLACKLIST_ACTION_ON_BYOD");
        blacklistActionOnBYOD.addWhen(noActionBYODCriteria, (Object)"NO ACTION");
        blacklistActionOnBYOD.addWhen(disableActionBYODCriteria, (Object)"DISABLE");
        blacklistActionOnBYOD.elseVal((Object)"UNINSTALL");
        final CaseExpression appControlStatus = new CaseExpression("APP_CONTROL_STATUS");
        appControlStatus.addWhen(whiteListCriteria, (Object)true);
        appControlStatus.elseVal((Object)false);
        selectQuery.addJoin(new Join("CustomerInfo", "MdAppBlackListSetting", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        selectQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        selectQuery.addSelectColumn((Column)blacklistActionOnCorporate);
        selectQuery.addSelectColumn((Column)blacklistActionOnBYOD);
        selectQuery.addSelectColumn((Column)appControlStatus);
        return selectQuery;
    }
    
    private SelectQuery wpSettingQuery() {
        final Criteria wpCriteria = new Criteria(new Column("WpAppSettings", "ENTERPRISE_ID"), (Object)null, 1);
        final CaseExpression AETFileUpload = new CaseExpression("IS_AET_FILE_UPLOAD");
        AETFileUpload.addWhen(wpCriteria, (Object)"true");
        AETFileUpload.elseVal((Object)"false");
        final Criteria bstoreConfiguredCriteria = new Criteria(new Column("WpAppSettings", "DOMAIN_NAME"), (Object)null, 1);
        final CaseExpression bstoreConfiguredExpression = new CaseExpression("BSTORE_CONFIGURED");
        bstoreConfiguredExpression.addWhen(bstoreConfiguredCriteria, (Object)"true");
        bstoreConfiguredExpression.elseVal((Object)"false");
        final SelectQuery wpQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("CustomerInfo"));
        wpQuery.addJoin(new Join("CustomerInfo", "WpAppSettings", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 1));
        wpQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        wpQuery.addSelectColumn((Column)AETFileUpload);
        wpQuery.addSelectColumn((Column)bstoreConfiguredExpression);
        return wpQuery;
    }
    
    private SelectQuery vppSettingsQuery() {
        final Criteria vppCriteria = new Criteria(new Column("MdVPPTokenDetails", "TOKEN_ID"), (Object)null, 1);
        final CaseExpression APNSFileUpload = new CaseExpression("iOS_VPP_App_Assignment_Configured");
        APNSFileUpload.addWhen(vppCriteria, (Object)true);
        APNSFileUpload.elseVal((Object)false);
        final SelectQuery vppQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("CustomerInfo"));
        vppQuery.addJoin(new Join("CustomerInfo", "MdVPPTokenDetails", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 1));
        vppQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        vppQuery.addSelectColumn((Column)APNSFileUpload);
        final Column licenseAssignTypeColumn = new Column("MdVPPTokenDetails", "LICENSE_ASSIGN_TYPE");
        licenseAssignTypeColumn.setColumnAlias("iOS_VPP_license_distribution_type");
        vppQuery.addSelectColumn(licenseAssignTypeColumn);
        vppQuery.addSelectColumn(new Column("MdVPPTokenDetails", "VPP_TOKEN_ADDED_TIME"));
        final Criteria locationTokenCri = new Criteria(new Column("MdVPPTokenDetails", "LOCATION_ID"), (Object)null, 1);
        final CaseExpression locationTokedIsAdded = new CaseExpression("vppIsLocationToken");
        locationTokedIsAdded.addWhen(locationTokenCri, (Object)true);
        locationTokedIsAdded.elseVal((Object)false);
        vppQuery.addSelectColumn((Column)locationTokedIsAdded);
        return vppQuery;
    }
    
    public SelectQuery getContentMgmtQuery() {
        final MDMTrackerUtil trackerQueryUtil = new MDMTrackerUtil();
        final Criteria isDocNotDeleted = new Criteria(Column.getColumn("DocumentDetails", "REPOSITORY_TYPE"), (Object)0, 1);
        final Column custIDcol = Column.getColumn("CustomerInfo", "CUSTOMER_ID");
        final SelectQuery docQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("CustomerInfo"));
        docQuery.addJoin(new Join("CustomerInfo", "DocumentDetails", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 1));
        docQuery.addJoin(new Join("CustomerInfo", "DocumentTags", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 1));
        docQuery.addJoin(new Join("DocumentDetails", "DocumentSummary", new String[] { "DOC_ID" }, new String[] { "DOC_ID" }, 1));
        docQuery.addSelectColumn(custIDcol);
        docQuery.addSelectColumn(this.getSumColumn(Column.getColumn("DocumentSummary", "USER_COUNT"), "DOC_USER_ASSOCIATION_COUNT"));
        docQuery.addSelectColumn(this.getSumColumn(Column.getColumn("DocumentSummary", "GROUP_COUNT"), "DOC_GROUP_ASSOCIATION_COUNT"));
        docQuery.addSelectColumn(this.getSumColumn(Column.getColumn("DocumentSummary", "DEVICE_COUNT"), "DOC_DEVICE_ASSOCIATION_COUNT"));
        final CaseExpression maxTagsPerDocsCount = new CaseExpression("MAX_DOC_TAG_COUNT");
        maxTagsPerDocsCount.addWhen(isDocNotDeleted, (Object)new Column("DocumentSummary", "TAG_COUNT"));
        docQuery.addSelectColumn(trackerQueryUtil.getMaxCaseExpressionColumn(maxTagsPerDocsCount, 4, "MAX_DOC_TAG_COUNT"));
        final CaseExpression untaggedDocsCount = new CaseExpression("UNTAGGED_DOCS_COUNT");
        untaggedDocsCount.addWhen(isDocNotDeleted.and(new Criteria(Column.getColumn("DocumentSummary", "TAG_COUNT"), (Object)0, 0)), (Object)new Column("DocumentSummary", "DOC_ID"));
        docQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(untaggedDocsCount, 4, "UNTAGGED_DOCS_COUNT"));
        final CaseExpression managedDocsCount = new CaseExpression("MANAGED_DOCS_COUNT");
        managedDocsCount.addWhen(isDocNotDeleted, (Object)new Column("DocumentDetails", "DOC_ID"));
        docQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(managedDocsCount, 4, "MANAGED_DOCS_COUNT"));
        docQuery.addSelectColumn(trackerQueryUtil.getDistinctIntegerCountCaseExpressionColumn(Column.getColumn("DocumentTags", "TAG_ID", "TAGS_COUNT")));
        final CaseExpression ce = new CaseExpression("DOC_SIZE");
        ce.addWhen(new Criteria(Column.getColumn("DocumentDetails", "REPOSITORY_TYPE"), (Object)0, 1), (Object)Column.getColumn("DocumentDetails", "SIZE"));
        docQuery.addSelectColumn(this.getSumCaseExpressionColumn(ce, -5, "DOC_SIZE"));
        docQuery.setGroupByClause(new GroupByClause((List)new ArrayList(Arrays.asList(custIDcol))));
        return docQuery;
    }
    
    public Criteria getAndroidAgentVersionCriteria() {
        final String androidAgentVersion = MDMAgentBuildVersionsUtil.getMDMAgentInfo("androidagentversion");
        final Long androidVersionCode = Long.valueOf(MDMAgentBuildVersionsUtil.getMDMAgentInfo("androidagentversioncode"));
        final String safeAgentVersion = MDMAgentBuildVersionsUtil.getMDMAgentInfo("safeagentversion");
        final String knoxAgentVersion = MDMAgentBuildVersionsUtil.getMDMAgentInfo("knoxagentversion");
        final Long safeAgentVersionCode = Long.valueOf(MDMAgentBuildVersionsUtil.getMDMAgentInfo("safeagentversioncode"));
        final Long knoxAgentVersionCode = Long.valueOf(MDMAgentBuildVersionsUtil.getMDMAgentInfo("knoxagentversioncode"));
        final Criteria cEmptyVersion = new Criteria(new Column("ManagedDevice", "AGENT_VERSION"), (Object)"--", 1);
        final Criteria androidAgentType = new Criteria(new Column("ManagedDevice", "AGENT_TYPE"), (Object)2, 0);
        final Criteria cAgentVersion = new Criteria(new Column("ManagedDevice", "AGENT_VERSION"), (Object)androidAgentVersion, 1);
        final Criteria cAgentVersionCode = new Criteria(new Column("ManagedDevice", "AGENT_VERSION_CODE"), (Object)androidVersionCode, 7);
        final Criteria coreAndroidCriteria = cAgentVersionCode.and(androidAgentType).and(cAgentVersion);
        final Criteria safeAgentType = new Criteria(new Column("ManagedDevice", "AGENT_TYPE"), (Object)3, 0);
        final Criteria cSafeAgentVersion = new Criteria(new Column("ManagedDevice", "AGENT_VERSION"), (Object)safeAgentVersion, 1);
        final Criteria cSafeVersion = new Criteria(new Column("ManagedDevice", "AGENT_VERSION"), (Object)"S", 12, false);
        final Criteria cSafeAgentVersionCode = new Criteria(new Column("ManagedDevice", "AGENT_VERSION_CODE"), (Object)safeAgentVersionCode, 7);
        final Criteria safeCriteria = cSafeAgentVersionCode.and(cSafeAgentVersion).and(cSafeVersion);
        final Criteria cKnoxAgentVersion = new Criteria(new Column("ManagedDevice", "AGENT_VERSION"), (Object)knoxAgentVersion, 1);
        final Criteria cKnoxVersion = new Criteria(new Column("ManagedDevice", "AGENT_VERSION"), (Object)"K", 12, false);
        final Criteria cKnoxAgentVersionCode = new Criteria(new Column("ManagedDevice", "AGENT_VERSION_CODE"), (Object)knoxAgentVersionCode, 7);
        final Criteria knoxCriteria = cKnoxAgentVersionCode.and(cKnoxAgentVersion).and(cKnoxVersion);
        final Criteria cAndroidAgentVersion = new Criteria(new Column("ManagedDevice", "AGENT_VERSION"), (Object)androidAgentVersion, 1);
        final Criteria cAndroidVersion = new Criteria(new Column("ManagedDevice", "AGENT_VERSION"), (Object)"A", 12, false);
        final Criteria cAndroidAgentVersionCode = new Criteria(new Column("ManagedDevice", "AGENT_VERSION_CODE"), (Object)androidVersionCode, 7);
        final Criteria androidCriteria = cAndroidAgentVersionCode.and(cAndroidAgentVersion).and(cAndroidVersion);
        return cEmptyVersion.and(coreAndroidCriteria.or(safeAgentType.and(safeCriteria.or(knoxCriteria).or(androidCriteria))));
    }
    
    public SelectQuery getMDMTrackParamQuery(final Long customerId, final String moduleName) {
        final SelectQuery sQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("MEMDMTrackParams"));
        sQuery.addSelectColumn(Column.getColumn((String)null, "*"));
        final Criteria customerCriteria = new Criteria(Column.getColumn("MEMDMTrackParams", "CUSTOMER_ID"), (Object)customerId, 0);
        final Criteria moduleCriteria = new Criteria(Column.getColumn("MEMDMTrackParams", "MODULE_NAME"), (Object)moduleName, 0);
        sQuery.setCriteria(customerCriteria.and(moduleCriteria));
        return sQuery;
    }
    
    public SelectQuery deprovisionTrackingQuery() {
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("DeprovisionHistory"));
        selectQuery.addJoin(new Join("DeprovisionHistory", "Resource", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        selectQuery.addJoin(new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        selectQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        final CaseExpression totalCountExpression = new CaseExpression("Deprovision_count");
        totalCountExpression.addWhen(new Criteria(Column.getColumn("DeprovisionHistory", "DEPROVISION_REASON"), (Object)null, 1), (Object)new Column("DeprovisionHistory", "DEPROVISION_ID"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(totalCountExpression, 4, "Deprovision_count"));
        final CaseExpression repairExpression = new CaseExpression("Deprovision_repair_count");
        repairExpression.addWhen(new Criteria(Column.getColumn("DeprovisionHistory", "DEPROVISION_REASON"), (Object)1, 0), (Object)new Column("DeprovisionHistory", "DEPROVISION_ID"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(repairExpression, 4, "Deprovision_repair_count"));
        final CaseExpression retireExpression = new CaseExpression("Deprovision_retire_count");
        retireExpression.addWhen(new Criteria(Column.getColumn("DeprovisionHistory", "DEPROVISION_REASON"), (Object)3, 0), (Object)new Column("DeprovisionHistory", "DEPROVISION_ID"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(retireExpression, 4, "Deprovision_retire_count"));
        final CaseExpression empLeftExpression = new CaseExpression("Deprovision_employee_left_count");
        empLeftExpression.addWhen(new Criteria(Column.getColumn("DeprovisionHistory", "DEPROVISION_REASON"), (Object)2, 0), (Object)new Column("DeprovisionHistory", "DEPROVISION_ID"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(empLeftExpression, 4, "Deprovision_employee_left_count"));
        final CaseExpression otherExpression = new CaseExpression("Deprovision_Others_count");
        otherExpression.addWhen(new Criteria(Column.getColumn("DeprovisionHistory", "DEPROVISION_REASON"), (Object)4, 0), (Object)new Column("DeprovisionHistory", "DEPROVISION_ID"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(otherExpression, 4, "Deprovision_Others_count"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        selectQuery.setGroupByClause(groupByColumn);
        return selectQuery;
    }
    
    public SelectQuery managedStatusTrackingQuery() {
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("ManagedDevice"));
        selectQuery.addJoin(new Join("ManagedDevice", "Resource", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        selectQuery.addJoin(new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        selectQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        final CaseExpression retireExpression = new CaseExpression("RETIRE_COUNT");
        retireExpression.addWhen(new Criteria(Column.getColumn("ManagedDevice", "MANAGED_STATUS"), (Object)11, 0), (Object)new Column("ManagedDevice", "RESOURCE_ID"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(retireExpression, 4, "RETIRE_COUNT"));
        final CaseExpression inStockExpression = new CaseExpression("IN_STOCK_COUNT");
        inStockExpression.addWhen(new Criteria(Column.getColumn("ManagedDevice", "MANAGED_STATUS"), (Object)new int[] { 10, 9 }, 8), (Object)new Column("ManagedDevice", "RESOURCE_ID"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(inStockExpression, 4, "IN_STOCK_COUNT"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        selectQuery.setGroupByClause(groupByColumn);
        return selectQuery;
    }
    
    public Criteria getIOSPlatformCriteria() {
        return new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)1, 0);
    }
    
    public Criteria getMacOSPlatformCriteria() {
        return new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)6, 0);
    }
    
    public Criteria getAndroidPlatformCriteria() {
        return new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)2, 0);
    }
    
    private Criteria getWindowPlatformCriteria() {
        return new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)3, 0);
    }
    
    private SelectQuery appTrashCount() {
        final Criteria profileDeleted = new Criteria(new Column("Profile", "IS_MOVED_TO_TRASH"), (Object)true, 0);
        final Criteria appProfile = new Criteria(new Column("Profile", "PROFILE_TYPE"), (Object)2, 0);
        final Criteria accountApp = new Criteria(new Column("MdPackageToAppGroup", "IS_PURCHASED_FROM_PORTAL"), (Object)true, 0);
        final Criteria iosPlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)1, 0);
        final Criteria androidPlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)2, 0);
        final Criteria Kiosk = new Criteria(new Column("ConfigData", "CONFIG_ID"), (Object)new int[] { 557, 183 }, 8);
        final CaseExpression trashApp = new CaseExpression("TRASH_APP_COUNT");
        trashApp.addWhen(profileDeleted.and(appProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression accountDeletedApps = new CaseExpression("ACCOUNT_APPS_DELETED");
        accountDeletedApps.addWhen(profileDeleted.and(appProfile).and(accountApp), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression kioskApps = new CaseExpression("KIOSK_APPS_IN_TRASH");
        kioskApps.addWhen(profileDeleted.and(appProfile).and(Kiosk), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression vppDeletedApps = new CaseExpression("VPP_APPS_DELETED");
        vppDeletedApps.addWhen(profileDeleted.and(appProfile).and(accountApp).and(iosPlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression pfwDeletedApps = new CaseExpression("PFW_APPS_DELETED");
        pfwDeletedApps.addWhen(profileDeleted.and(appProfile).and(accountApp).and(androidPlatform), (Object)new Column("Profile", "PROFILE_ID"));
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(new Table("Profile"));
        selectQuery.addJoin(new Join("Profile", "ProfileToCustomerRel", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2));
        selectQuery.addJoin(new Join("ProfileToCustomerRel", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        selectQuery.addJoin(new Join("Profile", "ProfileToCollection", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2));
        selectQuery.addJoin(new Join("ProfileToCollection", "MdAppToCollection", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 2));
        selectQuery.addJoin(new Join("MdAppToCollection", "MdAppToGroupRel", new String[] { "APP_ID" }, new String[] { "APP_ID" }, 2));
        selectQuery.addJoin(new Join("MdAppToGroupRel", "MdPackageToAppGroup", new String[] { "APP_GROUP_ID" }, new String[] { "APP_GROUP_ID" }, 2));
        selectQuery.addJoin(new Join("ProfileToCollection", "CfgDataToCollection", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 2));
        selectQuery.addJoin(new Join("CfgDataToCollection", "ConfigData", new String[] { "CONFIG_DATA_ID" }, new String[] { "CONFIG_DATA_ID" }, 2));
        final MDMTrackerUtil trackerQueryUtil = new MDMTrackerUtil();
        selectQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(trashApp, 4, "TRASH_APP_COUNT"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(accountDeletedApps, 4, "ACCOUNT_APPS_DELETED"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(vppDeletedApps, 4, "VPP_APPS_DELETED"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(pfwDeletedApps, 4, "PFW_APPS_DELETED"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(kioskApps, 4, "KIOSK_APPS_IN_TRASH"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        selectQuery.setGroupByClause(groupByColumn);
        return selectQuery;
    }
    
    private SelectQuery getCustomerParams() {
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("CustomerParams"));
        selectQuery.addJoin(new Join("CustomerParams", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        final Criteria paramsCriteria = new Criteria(Column.getColumn("CustomerParams", "PARAM_NAME"), (Object)MDMCoreQuery.CUSTOMER_PARAMS_TRACKING_LIST.toArray(), 8);
        selectQuery.setCriteria(paramsCriteria);
        return selectQuery;
    }
    
    private SelectQuery enrollmentSettingQuery() {
        final SelectQuery invEnrollQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("InvitationEnrollmentSettings"));
        invEnrollQuery.addJoin(new Join("InvitationEnrollmentSettings", "EnrollmentSettings", new String[] { "ENROLLMENT_SETTINGS_ID" }, new String[] { "ENROLLMENT_SETTINGS_ID" }, 2));
        invEnrollQuery.addJoin(new Join("EnrollmentSettings", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        invEnrollQuery.addSelectColumn(new Column("EnrollmentSettings", "CUSTOMER_ID"));
        invEnrollQuery.addSelectColumn(new Column("InvitationEnrollmentSettings", "AUTH_MODE"));
        invEnrollQuery.addSelectColumn(new Column("EnrollmentSettings", "NOTIFY_DEVICE_UNMANAGED"));
        return invEnrollQuery;
    }
    
    public SelectQuery addPackgeTbls(final SelectQuery appsQuery) {
        final List tableList = appsQuery.getTableList();
        final List tablenames = new ArrayList();
        for (final Object object : tableList) {
            final Table table = (Table)object;
            final String tableName = table.getTableName();
            tablenames.add(tableName);
        }
        if (!tablenames.contains("MdAppDetails")) {
            throw new RuntimeException("MDAPPDETAILS table must be added in query");
        }
        if (!tablenames.contains("MdPackageToAppData")) {
            appsQuery.addJoin(new Join("MdAppDetails", "MdPackageToAppData", new String[] { "APP_ID" }, new String[] { "APP_ID" }, 1));
        }
        final Criteria iosPlatform = new Criteria(new Column("MdAppDetails", "PLATFORM_TYPE"), (Object)1, 0);
        final Criteria androidPlatform = new Criteria(new Column("MdAppDetails", "PLATFORM_TYPE"), (Object)2, 0);
        final Criteria windowsPlatform = new Criteria(new Column("MdAppDetails", "PLATFORM_TYPE"), (Object)3, 0);
        final Criteria packageToAppCri = new Criteria(new Column("MdPackageToAppData", "APP_ID"), (Object)new Column("MdAppToCollection", "APP_ID"), 0);
        final Criteria appToCollnCri = new Criteria(new Column("MdAppToCollection", "COLLECTION_ID"), (Object)new Column("AppGroupToCollection", "COLLECTION_ID"), 0);
        final Criteria fileSizeNotMinus1 = new Criteria(new Column("MdPackageToAppData", "FILE_UPLOAD_SIZE"), (Object)(-1), 1);
        final Criteria baseCri = fileSizeNotMinus1.and(packageToAppCri).and(appToCollnCri);
        final Column filesizeColn = new Column("MdPackageToAppData", "FILE_UPLOAD_SIZE");
        final CaseExpression iosMaxAppSizeExpression = new CaseExpression("IOS_MAX_APP_SIZE");
        iosMaxAppSizeExpression.addWhen(iosPlatform.and(baseCri), (Object)filesizeColn);
        final CaseExpression iosAvgAppSizeExpression = new CaseExpression("IOS_AVG_APP_SIZE");
        iosAvgAppSizeExpression.addWhen(iosPlatform.and(baseCri), (Object)filesizeColn);
        final CaseExpression iosSDAppSizeExpression = new CaseExpression("IOS_SD_APP_SIZE");
        iosSDAppSizeExpression.addWhen(iosPlatform.and(baseCri), (Object)filesizeColn);
        final CaseExpression iosCountAppSizeExpression = new CaseExpression("IOS_COUNT_VALID_APP_SIZE");
        iosCountAppSizeExpression.addWhen(iosPlatform.and(baseCri), (Object)filesizeColn);
        final CaseExpression androidMaxAppSizeExpression = new CaseExpression("ANDROID_MAX_APP_SIZE");
        androidMaxAppSizeExpression.addWhen(androidPlatform.and(baseCri), (Object)filesizeColn);
        final CaseExpression androidAvgAppSizeExpression = new CaseExpression("ANDROID_AVG_APP_SIZE");
        androidAvgAppSizeExpression.addWhen(androidPlatform.and(baseCri), (Object)filesizeColn);
        final CaseExpression androidSDAppSizeExpression = new CaseExpression("ANDROID_SD_APP_SIZE");
        androidSDAppSizeExpression.addWhen(androidPlatform.and(baseCri), (Object)filesizeColn);
        final CaseExpression androidCountAppSizeExpression = new CaseExpression("ANDROID_COUNT_VALID_APP_SIZE");
        androidCountAppSizeExpression.addWhen(androidPlatform.and(baseCri), (Object)filesizeColn);
        final CaseExpression windowsMaxAppSizeExpression = new CaseExpression("WIN_MAX_APP_SIZE");
        windowsMaxAppSizeExpression.addWhen(windowsPlatform.and(baseCri), (Object)filesizeColn);
        final CaseExpression windowsAvgAppSizeExpression = new CaseExpression("WIN_AVG_APP_SIZE");
        windowsAvgAppSizeExpression.addWhen(windowsPlatform.and(baseCri), (Object)filesizeColn);
        final CaseExpression windowsSDAppSizeExpression = new CaseExpression("WIN_SD_APP_SIZE");
        windowsSDAppSizeExpression.addWhen(windowsPlatform.and(baseCri), (Object)filesizeColn);
        final CaseExpression winCountAppSizeExpression = new CaseExpression("WIN_COUNT_VALID_APP_SIZE");
        winCountAppSizeExpression.addWhen(windowsPlatform.and(baseCri), (Object)filesizeColn);
        appsQuery.addJoin(new Join("MdPackageToAppData", "MdAppToCollection", new String[] { "APP_ID" }, new String[] { "APP_ID" }, 1));
        appsQuery.addJoin(new Join("MdAppToCollection", "AppGroupToCollection", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 1));
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        appsQuery.addSelectColumn(trackerUtil.getMaxCaseExpressionColumn(iosMaxAppSizeExpression, -5, "IOS_MAX_APP_SIZE"));
        appsQuery.addSelectColumn(trackerUtil.getAvgCaseExpressionColumn(iosAvgAppSizeExpression, -5, "IOS_AVG_APP_SIZE"));
        appsQuery.addSelectColumn(trackerUtil.getSDCaseExpressionColumn(iosSDAppSizeExpression, -5, "IOS_SD_APP_SIZE"));
        appsQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(iosCountAppSizeExpression, -5, "IOS_COUNT_VALID_APP_SIZE"));
        appsQuery.addSelectColumn(trackerUtil.getMaxCaseExpressionColumn(androidMaxAppSizeExpression, -5, "ANDROID_MAX_APP_SIZE"));
        appsQuery.addSelectColumn(trackerUtil.getAvgCaseExpressionColumn(androidAvgAppSizeExpression, -5, "ANDROID_AVG_APP_SIZE"));
        appsQuery.addSelectColumn(trackerUtil.getSDCaseExpressionColumn(androidSDAppSizeExpression, -5, "ANDROID_SD_APP_SIZE"));
        appsQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(androidCountAppSizeExpression, -5, "ANDROID_COUNT_VALID_APP_SIZE"));
        appsQuery.addSelectColumn(trackerUtil.getMaxCaseExpressionColumn(windowsMaxAppSizeExpression, -5, "WIN_MAX_APP_SIZE"));
        appsQuery.addSelectColumn(trackerUtil.getAvgCaseExpressionColumn(windowsAvgAppSizeExpression, -5, "WIN_AVG_APP_SIZE"));
        appsQuery.addSelectColumn(trackerUtil.getSDCaseExpressionColumn(windowsSDAppSizeExpression, -5, "WIN_SD_APP_SIZE"));
        appsQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(winCountAppSizeExpression, -5, "WIN_COUNT_VALID_APP_SIZE"));
        return appsQuery;
    }
    
    public SelectQuery addCollnDistributionQuery(final SelectQuery sQuery) {
        final List tableList = sQuery.getTableList();
        final List tablenames = new ArrayList();
        for (final Object object : tableList) {
            final Table table = (Table)object;
            final String tableName = table.getTableName();
            tablenames.add(tableName);
        }
        if (!tablenames.contains("Profile")) {
            throw new RuntimeException("Profile table must be added in sQuery to add distribution details query");
        }
        final List columnList = sQuery.getSelectColumns();
        final List columnNames = new ArrayList();
        for (final Object object2 : columnList) {
            final Column column = (Column)object2;
            final String columnName = column.getColumnAlias();
            columnNames.add(columnName);
        }
        if (columnNames.contains("ANDROID_APP_DISTR_FAILED_COUNT")) {
            throw new RuntimeException("Column name ANDROID_APP_DISTR_FAILED_COUNT already added in the query");
        }
        final Criteria isAndroidPlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)2, 0);
        final Criteria isMDMAppProfile = new Criteria(new Column("Profile", "PROFILE_TYPE"), (Object)2, 0);
        final Criteria failedCollnCriteria = new Criteria(new Column("CollnToResources", "STATUS"), (Object)7, 0);
        if (!tablenames.contains("ProfileToCollection")) {
            sQuery.addJoin(new Join("Profile", "ProfileToCollection", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2));
        }
        if (!tablenames.contains("CollnToResources")) {
            sQuery.addJoin(new Join("ProfileToCollection", "CollnToResources", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 2));
        }
        final CaseExpression appDistributionFailed = new CaseExpression("ANDROID_APP_DISTR_FAILED_COUNT");
        appDistributionFailed.addWhen(isAndroidPlatform.and(isMDMAppProfile).and(failedCollnCriteria), (Object)new Column("CollnToResources", "COLLECTION_ID"));
        final MDMTrackerUtil trackerQueryUtil = new MDMTrackerUtil();
        sQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(appDistributionFailed, 4, "ANDROID_APP_DISTR_FAILED_COUNT"));
        return sQuery;
    }
    
    public SelectQuery depQuery() {
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final Criteria enterpriseDEPCountCri = new Criteria(new Column("DEPAccountDetails", "ORG_TYPE"), (Object)1, 0);
        final CaseExpression enterpriseDEPCountExpr = new CaseExpression("ENTERPRISE_DEP_COUNT");
        enterpriseDEPCountExpr.addWhen(enterpriseDEPCountCri, (Object)new Column("DEPAccountDetails", "ORG_TYPE"));
        final Criteria educationDEPCountCri = new Criteria(new Column("DEPAccountDetails", "ORG_TYPE"), (Object)2, 0);
        final CaseExpression educationDEPCountExpr = new CaseExpression("EDUCATION_DEP_COUNT");
        educationDEPCountExpr.addWhen(educationDEPCountCri, (Object)new Column("DEPAccountDetails", "ORG_TYPE"));
        final Criteria multiUserDepServer = new Criteria(new Column("DEPEnrollmentTemplate", "IS_MULTIUSER"), (Object)true, 0);
        final CaseExpression multiUserExpr = new CaseExpression("SHARED_DEP_SERVER_COUNT");
        multiUserExpr.addWhen(multiUserDepServer, (Object)new Column("DEPEnrollmentTemplate", "TEMPLATE_ID"));
        final Criteria quotaSizeCriteria = new Criteria(new Column("AppleSharedDeviceConfigTemplate", "QUOTA_SIZE"), (Object)0, 5);
        final CaseExpression quotaSizeExpr = new CaseExpression("SHARED_DEP_QUOTA_SIZE_SERVER_COUNT");
        quotaSizeExpr.addWhen(quotaSizeCriteria, (Object)new Column("DEPEnrollmentTemplate", "TEMPLATE_ID"));
        final Criteria userSizeCriteria = new Criteria(new Column("AppleSharedDeviceConfigTemplate", "NO_RESIDENT_USERS"), (Object)0, 5);
        final CaseExpression userSizeExpr = new CaseExpression("SHARED_DEP_RESIDENT_USER_SERVER_COUNT");
        userSizeExpr.addWhen(userSizeCriteria, (Object)new Column("DEPEnrollmentTemplate", "TEMPLATE_ID"));
        final Criteria userControlCriteria = new Criteria(new Column("AppleSharedDeviceConfigTemplate", "QUOTA_SIZE"), (Object)(-1), 0).and(new Criteria(new Column("AppleSharedDeviceConfigTemplate", "NO_RESIDENT_USERS"), (Object)(-1), 0));
        final CaseExpression userControlExpr = new CaseExpression("SHARED_DEP_USER_CONTROLLED_SERVER_COUNT");
        userControlExpr.addWhen(userControlCriteria.and(multiUserDepServer), (Object)new Column("DEPEnrollmentTemplate", "TEMPLATE_ID"));
        final Criteria depSelfEnrollCriteria = new Criteria(new Column("DEPEnrollmentTemplate", "ENABLE_SELF_ENROLL"), (Object)true, 0);
        final CaseExpression depSelfEnrollExpr = new CaseExpression("DEP_SELF_ENROLL_SERVERS_COUNT");
        depSelfEnrollExpr.addWhen(depSelfEnrollCriteria, (Object)new Column("DEPEnrollmentTemplate", "TEMPLATE_ID"));
        final SelectQuery apnsCertificateQuery = (SelectQuery)new SelectQueryImpl(new Table("CustomerInfo"));
        apnsCertificateQuery.addJoin(new Join("CustomerInfo", "DEPTokenDetails", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 1));
        apnsCertificateQuery.addJoin(new Join("DEPTokenDetails", "DEPAccountDetails", new String[] { "DEP_TOKEN_ID" }, new String[] { "DEP_TOKEN_ID" }, 1));
        apnsCertificateQuery.addJoin(new Join("DEPTokenDetails", "DEPTokenToGroup", new String[] { "DEP_TOKEN_ID" }, new String[] { "DEP_TOKEN_ID" }, 1));
        apnsCertificateQuery.addJoin(new Join("DEPTokenToGroup", "EnrollmentTemplateToGroupRel", new String[] { "GROUP_RESOURCE_ID" }, new String[] { "GROUP_RESOURCE_ID" }, 1));
        apnsCertificateQuery.addJoin(new Join("EnrollmentTemplateToGroupRel", "AppleSharedDeviceConfigTemplate", new String[] { "TEMPLATE_ID" }, new String[] { "TEMPLATE_ID" }, 1));
        apnsCertificateQuery.addJoin(new Join("EnrollmentTemplateToGroupRel", "DEPEnrollmentTemplate", new String[] { "TEMPLATE_ID" }, new String[] { "TEMPLATE_ID" }, 1));
        apnsCertificateQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(enterpriseDEPCountExpr, 4, "ENTERPRISE_DEP_COUNT"));
        apnsCertificateQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(educationDEPCountExpr, 4, "EDUCATION_DEP_COUNT"));
        apnsCertificateQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)multiUserExpr));
        apnsCertificateQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)quotaSizeExpr));
        apnsCertificateQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)userSizeExpr));
        apnsCertificateQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)userControlExpr));
        apnsCertificateQuery.addSelectColumn(trackerUtil.getDistinctIntegerCountCaseExpressionColumn((Column)depSelfEnrollExpr));
        apnsCertificateQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        apnsCertificateQuery.setGroupByClause(groupByColumn);
        return apnsCertificateQuery;
    }
    
    public SelectQuery devicePrivacyQuery() {
        final Criteria cri = new Criteria(new Column("MDPrivacyToOwnedBy", "PRIVACY_SETTINGS_ID"), (Object)null, 1);
        final CaseExpression devicePrivacyConfigured = new CaseExpression("DEVICE_PRIVACY_COUNT");
        devicePrivacyConfigured.addWhen(cri, (Object)new Column("MDPrivacyToOwnedBy", "PRIVACY_SETTINGS_ID"));
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final SelectQuery devicePrivacyQuery = (SelectQuery)new SelectQueryImpl(new Table("MDPrivacyToOwnedBy"));
        devicePrivacyQuery.addJoin(new Join("MDPrivacyToOwnedBy", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        devicePrivacyQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        devicePrivacyQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(devicePrivacyConfigured, 4, "DEVICE_PRIVACY_COUNT"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        devicePrivacyQuery.setGroupByClause(groupByColumn);
        return devicePrivacyQuery;
    }
    
    public SelectQuery termsQuery() {
        final Criteria cri = new Criteria(new Column("TermsOfUse", "TERMS_ID"), (Object)null, 1);
        final CaseExpression termsConfigured = new CaseExpression("TERMS_COUNT");
        termsConfigured.addWhen(cri, (Object)new Column("TermsOfUse", "TERMS_ID"));
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final SelectQuery termsQuery = (SelectQuery)new SelectQueryImpl(new Table("TermsOfUse"));
        termsQuery.addJoin(new Join("TermsOfUse", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        termsQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        termsQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(termsConfigured, 4, "TERMS_COUNT"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        termsQuery.setGroupByClause(groupByColumn);
        return termsQuery;
    }
    
    public SelectQuery securityCommandsQuery() {
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final Criteria pauseCriteria = new Criteria(Column.getColumn("MdCommands", "COMMAND_UUID"), (Object)"PauseKioskCommand", 0);
        final Criteria resumeCriteria = new Criteria(Column.getColumn("MdCommands", "COMMAND_UUID"), (Object)"ResumeKioskCommand", 0);
        final CaseExpression pauseKioskCount = new CaseExpression("AndroidKioskPauseCommandCount");
        pauseKioskCount.addWhen(pauseCriteria, (Object)new Column("MdCommands", "COMMAND_UUID"));
        final CaseExpression resumeKioskCount = new CaseExpression("AndroidKioskResumeCommandCount");
        resumeKioskCount.addWhen(resumeCriteria, (Object)new Column("MdCommands", "COMMAND_UUID"));
        final SelectQuery sq = (SelectQuery)new SelectQueryImpl(Table.getTable("MdCommands"));
        sq.addJoin(new Join("MdCommands", "CommandHistory", new String[] { "COMMAND_ID" }, new String[] { "COMMAND_ID" }, 2));
        sq.addJoin(new Join("CommandHistory", "ManagedDevice", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        sq.addJoin(new Join("ManagedDevice", "Resource", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        sq.addJoin(new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        sq.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        sq.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(pauseKioskCount, 4, "AndroidKioskPauseCommandCount"));
        sq.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(resumeKioskCount, 4, "AndroidKioskResumeCommandCount"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        sq.setGroupByClause(groupByColumn);
        return sq;
    }
    
    private SelectQuery getBlacklistQuery() {
        final List<String> iosSysAppList = MDMTrackerUtil.getIOSSystemAppList();
        final List<String> windowSysAppList = MDMTrackerUtil.getWindowsSystemAppList();
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(new Table("BlacklistAppCollectionStatus"));
        selectQuery.addJoin(new Join("BlacklistAppCollectionStatus", "ProfileToCollection", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 2));
        selectQuery.addJoin(new Join("ProfileToCollection", "ProfileToCustomerRel", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2));
        selectQuery.addJoin(new Join("ProfileToCustomerRel", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        selectQuery.addJoin(new Join("BlacklistAppCollectionStatus", "BlacklistAppToCollection", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 2));
        selectQuery.addJoin(new Join("BlacklistAppToCollection", "MdAppGroupDetails", new String[] { "APP_GROUP_ID" }, new String[] { "APP_GROUP_ID" }, 2));
        selectQuery.addJoin(new Join("BlacklistAppCollectionStatus", "Resource", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        selectQuery.addJoin(new Join("Resource", "CustomGroup", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 1));
        selectQuery.addJoin(new Join("Resource", "ManagedDevice", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 1));
        final Criteria BlacklistedAppscri = new Criteria(new Column("BlacklistAppCollectionStatus", "STATUS"), (Object)new Integer[] { 3, 1, 4 }, 8);
        final Criteria BlacklistedGroupsCriteria = new Criteria(new Column("CustomGroup", "RESOURCE_ID"), (Object)null, 1);
        final Criteria BlacklistedResCriteria = new Criteria(new Column("ManagedDevice", "RESOURCE_ID"), (Object)null, 1);
        final Criteria BlacklistedNetworkCriteria = new Criteria(new Column("BlacklistAppToCollection", "GLOBAL_BLACKLIST"), (Object)true, 0);
        final Criteria BlacklistedIOSCriteria = new Criteria(new Column("MdAppGroupDetails", "PLATFORM_TYPE"), (Object)1, 0);
        final Criteria BlacklistedAndroidCriteria = new Criteria(new Column("MdAppGroupDetails", "PLATFORM_TYPE"), (Object)2, 0);
        final Criteria BlacklistedWindowsCriteria = new Criteria(new Column("MdAppGroupDetails", "PLATFORM_TYPE"), (Object)3, 0);
        final Criteria iosSystemAppCriteria = new Criteria(new Column("MdAppGroupDetails", "IDENTIFIER"), (Object)iosSysAppList.toArray(), 8);
        final Criteria winSysAppCriteria = new Criteria(new Column("MdAppGroupDetails", "IDENTIFIER"), (Object)windowSysAppList.toArray(), 8);
        final CaseExpression blacklistedApps = new CaseExpression("BLACKLISTED_COUNT_NEW");
        final CaseExpression blacklistedGroupsApps = new CaseExpression("BLACKLISTED_APP_GROUP_COUNT");
        final CaseExpression blacklistedResApps = new CaseExpression("BLACKLISTED_APP_RESOURCE_COUNT");
        final CaseExpression blacklistedNetowrkApps = new CaseExpression("BLACKLISTED_APP_NETWORK_COUNT");
        final CaseExpression blacklistedIOSApps = new CaseExpression("BLACKLISTED_IOS_COUNT");
        final CaseExpression blacklistedAndroidApps = new CaseExpression("BLACKLISTED_ANDROID_COUNT");
        final CaseExpression blacklistedWindowsApps = new CaseExpression("BLACKLISTED_WINDOWS_COUNT");
        final CaseExpression blacklistedIOSSystemApp = new CaseExpression("BLACKLISTED_IOS_SYSTEM_APP_COUNT");
        final CaseExpression blacklistedWinSystemApp = new CaseExpression("BLACKLISTED_WINDOWS_SYSTEM_APP_COUNT");
        blacklistedApps.addWhen(BlacklistedAppscri, (Object)new Column("BlacklistAppCollectionStatus", "COLLECTION_ID"));
        blacklistedGroupsApps.addWhen(BlacklistedGroupsCriteria, (Object)new Column("CustomGroup", "RESOURCE_ID"));
        blacklistedResApps.addWhen(BlacklistedResCriteria, (Object)new Column("ManagedDevice", "RESOURCE_ID"));
        blacklistedNetowrkApps.addWhen(BlacklistedNetworkCriteria, (Object)new Column("BlacklistAppToCollection", "APP_GROUP_ID"));
        blacklistedIOSApps.addWhen(BlacklistedIOSCriteria, (Object)new Column("MdAppGroupDetails", "APP_GROUP_ID"));
        blacklistedAndroidApps.addWhen(BlacklistedAndroidCriteria, (Object)new Column("MdAppGroupDetails", "APP_GROUP_ID"));
        blacklistedWindowsApps.addWhen(BlacklistedWindowsCriteria, (Object)new Column("MdAppGroupDetails", "APP_GROUP_ID"));
        blacklistedIOSSystemApp.addWhen(iosSystemAppCriteria, (Object)new Column("MdAppGroupDetails", "APP_GROUP_ID"));
        blacklistedWinSystemApp.addWhen(winSysAppCriteria, (Object)new Column("MdAppGroupDetails", "APP_GROUP_ID"));
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        selectQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(blacklistedApps, 4, "BLACKLISTED_COUNT_NEW"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(blacklistedGroupsApps, 4, "BLACKLISTED_APP_GROUP_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(blacklistedResApps, 4, "BLACKLISTED_APP_RESOURCE_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(blacklistedNetowrkApps, 4, "BLACKLISTED_APP_NETWORK_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(blacklistedIOSApps, 4, "BLACKLISTED_IOS_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(blacklistedAndroidApps, 4, "BLACKLISTED_ANDROID_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(blacklistedWindowsApps, 4, "BLACKLISTED_WINDOWS_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(blacklistedIOSSystemApp, 4, "BLACKLISTED_IOS_SYSTEM_APP_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(blacklistedWinSystemApp, 4, "BLACKLISTED_WINDOWS_SYSTEM_APP_COUNT"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        selectQuery.setGroupByClause(groupByColumn);
        return selectQuery;
    }
    
    public SelectQuery getSelfEnrollLimitQuery() {
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("CustomerParams"));
        selectQuery.addJoin(new Join("CustomerParams", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        final Criteria cri = new Criteria(new Column("CustomerParams", "PARAM_NAME"), (Object)"selfEnrollDeviceLimit", 0);
        final Column countColumn = new Column("CustomerParams", "CUSTOMER_PARAM_ID").count();
        countColumn.setColumnAlias("SELF_ENROLL_LIMIT_CONFIGURED_COUNT");
        selectQuery.addSelectColumn(countColumn);
        selectQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        selectQuery.setCriteria(cri);
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        groupByColumnsList.add(new Column("CustomerParams", "PARAM_NAME"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        selectQuery.setGroupByClause(groupByColumn);
        return selectQuery;
    }
    
    public SelectQuery deprovisionStatusTrackingQuery() {
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("ManagedDevice"));
        selectQuery.addJoin(new Join("ManagedDevice", "Resource", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        selectQuery.addJoin(new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        selectQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        Hashtable ht = null;
        try {
            ht = DateTimeUtil.determine_From_To_Times("today");
        }
        catch (final Exception exp) {
            throw new RuntimeException("Unable to get current date");
        }
        final Long fifteenDaysBeforeToday = ht.get("date2") - 1296000000L;
        final Long thirtyDaysBeforeToday = ht.get("date2") - 2592000000L;
        final Long fortyfiveDaysBeforeToday = ht.get("date2") - 3888000000L;
        final Long sixtyDaysBeforeToday = ht.get("date2") - 5184000000L;
        final Criteria retiredCriteria = new Criteria(Column.getColumn("ManagedDevice", "MANAGED_STATUS"), (Object)11, 0);
        final CaseExpression fifteendayCountExpression = new CaseExpression("Retired_15_Days_Count");
        fifteendayCountExpression.addWhen(retiredCriteria.and(new Criteria(Column.getColumn("ManagedDevice", "UNREGISTERED_TIME"), (Object)fifteenDaysBeforeToday, 6)), (Object)new Column("ManagedDevice", "RESOURCE_ID"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(fifteendayCountExpression, 4, "Retired_15_Days_Count"));
        final CaseExpression thirtydayCountExpression = new CaseExpression("Retired_30_Days_Count");
        thirtydayCountExpression.addWhen(retiredCriteria.and(new Criteria(Column.getColumn("ManagedDevice", "UNREGISTERED_TIME"), (Object)thirtyDaysBeforeToday, 6)), (Object)new Column("ManagedDevice", "RESOURCE_ID"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(thirtydayCountExpression, 4, "Retired_30_Days_Count"));
        final CaseExpression foutyfivedayCountExpression = new CaseExpression("Retired_45_Days_Count");
        foutyfivedayCountExpression.addWhen(retiredCriteria.and(new Criteria(Column.getColumn("ManagedDevice", "UNREGISTERED_TIME"), (Object)fortyfiveDaysBeforeToday, 6)), (Object)new Column("ManagedDevice", "RESOURCE_ID"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(foutyfivedayCountExpression, 4, "Retired_45_Days_Count"));
        final CaseExpression sixtyCountExpression = new CaseExpression("Retired_60_Days_Count");
        sixtyCountExpression.addWhen(retiredCriteria.and(new Criteria(Column.getColumn("ManagedDevice", "UNREGISTERED_TIME"), (Object)sixtyDaysBeforeToday, 6)), (Object)new Column("ManagedDevice", "RESOURCE_ID"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(sixtyCountExpression, 4, "Retired_60_Days_Count"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        selectQuery.setGroupByClause(groupByColumn);
        return selectQuery;
    }
    
    public SelectQuery deviceWithoutRequestTrackingQuery() {
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("ManagedDevice"));
        selectQuery.addJoin(new Join("ManagedDevice", "EnrollmentRequestToDevice", new String[] { "RESOURCE_ID" }, new String[] { "MANAGED_DEVICE_ID" }, 1));
        selectQuery.addJoin(new Join("ManagedDevice", "Resource", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        selectQuery.addJoin(new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        selectQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        selectQuery.setGroupByClause(groupByColumn);
        final Criteria requestCriteria = new Criteria(Column.getColumn("EnrollmentRequestToDevice", "MANAGED_DEVICE_ID"), (Object)null, 0);
        final Criteria enrolledCriteria = new Criteria(Column.getColumn("ManagedDevice", "MANAGED_STATUS"), (Object)2, 0);
        final Criteria enrollfialedCriteria = new Criteria(Column.getColumn("ManagedDevice", "MANAGED_STATUS"), (Object)1, 0);
        final Criteria unmanagedCriteria = new Criteria(Column.getColumn("ManagedDevice", "MANAGED_STATUS"), (Object)4, 0);
        final Criteria waitingforuserCriteria = new Criteria(Column.getColumn("ManagedDevice", "MANAGED_STATUS"), (Object)5, 0);
        final CaseExpression enrolledCountExpression = new CaseExpression("ENROLLED_DEVICE_REQUEST_NOT_PRESENT_COUNT");
        enrolledCountExpression.addWhen(enrolledCriteria.and(requestCriteria), (Object)new Column("ManagedDevice", "RESOURCE_ID"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(enrolledCountExpression, 4, "ENROLLED_DEVICE_REQUEST_NOT_PRESENT_COUNT"));
        final CaseExpression unmanagedCountExpression = new CaseExpression("UNMANAGED_DEVICE_REQUEST_NOT_PRESENT_COUNT");
        unmanagedCountExpression.addWhen(unmanagedCriteria.and(requestCriteria), (Object)new Column("ManagedDevice", "RESOURCE_ID"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(unmanagedCountExpression, 4, "UNMANAGED_DEVICE_REQUEST_NOT_PRESENT_COUNT"));
        final CaseExpression failedCountExpression = new CaseExpression("FAILED_DEVICE_REQUEST_NOT_PRESENT_COUNT");
        failedCountExpression.addWhen(enrollfialedCriteria.and(requestCriteria), (Object)new Column("ManagedDevice", "RESOURCE_ID"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(failedCountExpression, 4, "FAILED_DEVICE_REQUEST_NOT_PRESENT_COUNT"));
        final CaseExpression userasiignCountExpression = new CaseExpression("WAITING_FOR_USER_ASSIGN_DEVICE_REQUEST_NOT_PRESENT_COUNT");
        userasiignCountExpression.addWhen(waitingforuserCriteria.and(requestCriteria), (Object)new Column("ManagedDevice", "RESOURCE_ID"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(userasiignCountExpression, 4, "WAITING_FOR_USER_ASSIGN_DEVICE_REQUEST_NOT_PRESENT_COUNT"));
        final CaseExpression otherCountExpression = new CaseExpression("TOTAL_DEVICE_REQUEST_NOT_PRESENT_COUNT");
        otherCountExpression.addWhen(requestCriteria, (Object)new Column("ManagedDevice", "RESOURCE_ID"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(otherCountExpression, 4, "TOTAL_DEVICE_REQUEST_NOT_PRESENT_COUNT"));
        return selectQuery;
    }
    
    public SelectQuery getDirectoryQuery() {
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("DirectoryMetrics"));
        selectQuery.addJoin(new Join("DirectoryMetrics", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        final List<String> directoryTrackingKeys = DirectoryMetricConstants.getTrackingKeys();
        for (int i = 0; directoryTrackingKeys != null && i < directoryTrackingKeys.size(); ++i) {
            final String dirTrackingKey = directoryTrackingKeys.get(i);
            final CaseExpression caseExp = new CaseExpression(dirTrackingKey);
            caseExp.addWhen(new Criteria(Column.getColumn("DirectoryMetrics", "KEY"), (Object)dirTrackingKey, 0), (Object)Column.getColumn("DirectoryMetrics", "VALUE"));
            final Column distinctColumn = (Column)Column.createFunction("MAX", new Object[] { caseExp });
            distinctColumn.setType(12);
            distinctColumn.setColumnAlias(caseExp.getColumnAlias());
            selectQuery.addSelectColumn(distinctColumn);
        }
        selectQuery.addSelectColumn(Column.getColumn("DirectoryMetrics", "CUSTOMER_ID"));
        selectQuery.setGroupByClause(new GroupByClause((List)new ArrayList(Arrays.asList(Column.getColumn("DirectoryMetrics", "CUSTOMER_ID")))));
        return selectQuery;
    }
    
    public SelectQuery deviceComplianceDevicesDistributionQuery() {
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final CaseExpression androidCount = new CaseExpression("MDM_COMPLIANCE_DISTRIBUTION_ANDROID_COUNT");
        final CaseExpression iosCount = new CaseExpression("MDM_COMPLIANCE_DISTRIBUTION_IOS_COUNT");
        final CaseExpression windowsCount = new CaseExpression("MDM_COMPLIANCE_DISTRIBUTION_WINDOWS_COUNT");
        final CaseExpression deviceDistributionCount = new CaseExpression("MDM_COMPLIANCE_DEVICE_ASSOCIATION_COUNT");
        final CaseExpression deviceDisassociationCount = new CaseExpression("MDM_COMPLIANCE_DEVICE_DISASSOCIATION_COUNT");
        final Criteria androidCriteria = new Criteria(new Column("ManagedDevice", "PLATFORM_TYPE"), (Object)2, 0);
        final Criteria iosCriteria = new Criteria(new Column("ManagedDevice", "PLATFORM_TYPE"), (Object)1, 0);
        final Criteria windowsCriteria = new Criteria(new Column("ManagedDevice", "PLATFORM_TYPE"), (Object)3, 0);
        final Criteria complianceCriteria = new Criteria(new Column("Profile", "PROFILE_TYPE"), (Object)5, 0);
        final Criteria deviceDisassociationCriteria = new Criteria(new Column("ResourceToProfileHistory", "REMARKS"), (Object)"disassociated", 0);
        final Column managedDeviceColumn = new Column("ManagedDevice", "RESOURCE_ID");
        androidCount.addWhen(androidCriteria.and(complianceCriteria), (Object)managedDeviceColumn);
        iosCount.addWhen(iosCriteria.and(complianceCriteria), (Object)managedDeviceColumn);
        windowsCount.addWhen(windowsCriteria.and(complianceCriteria), (Object)managedDeviceColumn);
        deviceDistributionCount.addWhen(complianceCriteria, (Object)managedDeviceColumn);
        deviceDisassociationCount.addWhen(deviceDisassociationCriteria.and(complianceCriteria), (Object)managedDeviceColumn);
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("Profile"));
        final Join profileToDeviceJoin = new Join("Profile", "RecentProfileForResource", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2);
        final Join managedDeviceJoin = new Join("RecentProfileForResource", "ManagedDevice", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 1);
        final Join deviceHistoryJoin = new Join("RecentProfileForResource", "ResourceToProfileHistory", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2);
        final Join resourceJoin = new Join("ManagedDevice", "Resource", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2);
        final Join customerJoin = new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2);
        selectQuery.addJoin(profileToDeviceJoin);
        selectQuery.addJoin(managedDeviceJoin);
        selectQuery.addJoin(resourceJoin);
        selectQuery.addJoin(deviceHistoryJoin);
        selectQuery.addJoin(customerJoin);
        selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(iosCount, 4, "MDM_COMPLIANCE_DISTRIBUTION_IOS_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(androidCount, 4, "MDM_COMPLIANCE_DISTRIBUTION_ANDROID_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(windowsCount, 4, "MDM_COMPLIANCE_DISTRIBUTION_WINDOWS_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(deviceDistributionCount, 4, "MDM_COMPLIANCE_DEVICE_ASSOCIATION_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(deviceDisassociationCount, 4, "MDM_COMPLIANCE_DEVICE_DISASSOCIATION_COUNT"));
        final Column customerColumn = new Column("CustomerInfo", "CUSTOMER_ID");
        final List groupByColumnList = new ArrayList();
        groupByColumnList.add(customerColumn);
        final GroupByClause groupByClause = new GroupByClause(groupByColumnList);
        selectQuery.addSelectColumns(groupByColumnList);
        selectQuery.setGroupByClause(groupByClause);
        return selectQuery;
    }
    
    public SelectQuery deviceComplianceQuery() {
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final CaseExpression totalComplianceCount = new CaseExpression("MDM_COMPLIANCE_TOTAL_COUNT");
        final CaseExpression trashComplianceCount = new CaseExpression("MDM_COMPLIANCE_TRASH_COUNT");
        final CaseExpression unUsedComplianceCount = new CaseExpression("MDM_COMPLIANCE_UNUSED_COUNT");
        final Criteria complianceCriteria = new Criteria(new Column("Profile", "PROFILE_TYPE"), (Object)5, 0);
        final Criteria trashCriteria = new Criteria(new Column("Profile", "IS_MOVED_TO_TRASH"), (Object)Boolean.TRUE, 0);
        final Criteria deviceCriteria = new Criteria(new Column("RecentProfileForResource", "PROFILE_ID"), (Object)null, 0);
        final Criteria groupCriteria = new Criteria(new Column("RecentProfileForGroup", "PROFILE_ID"), (Object)null, 0);
        final Criteria mdmResourceCriteria = new Criteria(new Column("RecentProfileForMDMResource", "PROFILE_ID"), (Object)null, 0);
        final Column complianceColumn = new Column("Profile", "PROFILE_ID");
        totalComplianceCount.addWhen(complianceCriteria, (Object)complianceColumn);
        trashComplianceCount.addWhen(complianceCriteria.and(trashCriteria), (Object)complianceColumn);
        unUsedComplianceCount.addWhen(complianceCriteria.and(deviceCriteria).and(groupCriteria).and(mdmResourceCriteria), (Object)complianceColumn);
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("Profile"));
        final Join deviceProfileJoin = new Join("Profile", "RecentProfileForResource", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1);
        final Join groupProfileJoin = new Join("Profile", "RecentProfileForGroup", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1);
        final Join mdmResourceProfileJoin = new Join("Profile", "RecentProfileForMDMResource", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1);
        final Join profileCustomerJoin = new Join("Profile", "ProfileToCustomerRel", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2);
        final Join customerJoin = new Join("ProfileToCustomerRel", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2);
        selectQuery.addJoin(deviceProfileJoin);
        selectQuery.addJoin(groupProfileJoin);
        selectQuery.addJoin(mdmResourceProfileJoin);
        selectQuery.addJoin(profileCustomerJoin);
        selectQuery.addJoin(customerJoin);
        selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(totalComplianceCount, 4, "MDM_COMPLIANCE_TOTAL_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(trashComplianceCount, 4, "MDM_COMPLIANCE_TRASH_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(unUsedComplianceCount, 4, "MDM_COMPLIANCE_UNUSED_COUNT"));
        final Column customerColumn = new Column("CustomerInfo", "CUSTOMER_ID");
        final List groupByColumnList = new ArrayList();
        groupByColumnList.add(customerColumn);
        final GroupByClause groupByClause = new GroupByClause(groupByColumnList);
        selectQuery.addSelectColumns(groupByColumnList);
        selectQuery.setGroupByClause(groupByClause);
        return selectQuery;
    }
    
    public SelectQuery deviceComplianceRuleTypeQuery() {
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("Profile"));
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final Join profileToCollectionJoin = new Join("Profile", "ProfileToCollection", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2);
        final Join collectionToRuleJoin = new Join("ProfileToCollection", "CollectionToRules", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 2);
        final Join ruleJoin = new Join("CollectionToRules", "RuleEngine", new String[] { "RULE_ID" }, new String[] { "RULE_ID" }, 2);
        final Join ruleToRuleCriteriaJoin = new Join("RuleEngine", "RulesToRuleCriteria", new String[] { "RULE_ID" }, new String[] { "RULE_ID" }, 2);
        final Join ruleCriteriaJoin = new Join("RulesToRuleCriteria", "RuleCriteria", new String[] { "RULE_CRITERIA_ID" }, new String[] { "RULE_CRITERIA_ID" }, 2);
        final Join profileCustomerJoin = new Join("Profile", "ProfileToCustomerRel", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2);
        final Join customerJoin = new Join("ProfileToCustomerRel", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2);
        selectQuery.addJoin(profileToCollectionJoin);
        selectQuery.addJoin(collectionToRuleJoin);
        selectQuery.addJoin(ruleJoin);
        selectQuery.addJoin(ruleToRuleCriteriaJoin);
        selectQuery.addJoin(ruleCriteriaJoin);
        selectQuery.addJoin(profileCustomerJoin);
        selectQuery.addJoin(customerJoin);
        final Column ruleCriteriaColumn = new Column("RuleCriteria", "RULE_CRITERIA_ID");
        final Criteria complianceCriteria = new Criteria(new Column("Profile", "PROFILE_TYPE"), (Object)5, 0);
        final List ruleTypeList = new ArrayList();
        ruleTypeList.add(2);
        for (int i = 0; i < ruleTypeList.size(); ++i) {
            final int ruleType = ruleTypeList.get(i);
            final CaseExpression ruleTypeCount = new CaseExpression(String.valueOf(ruleType));
            final Criteria ruleTypeCriteria = new Criteria(new Column("RuleCriteria", "RULE_CRITERIA_TYPE"), (Object)ruleType, 0);
            ruleTypeCount.addWhen(ruleTypeCriteria.and(complianceCriteria), (Object)ruleCriteriaColumn);
            selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(ruleTypeCount, 4, String.valueOf(ruleType)));
        }
        final List groupByColumnList = new ArrayList();
        groupByColumnList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByClause = new GroupByClause(groupByColumnList);
        selectQuery.addSelectColumns(groupByColumnList);
        selectQuery.setGroupByClause(groupByClause);
        return selectQuery;
    }
    
    public SelectQuery deviceComplianceActionTypeQuery() {
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("Profile"));
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final Join profileToCollectionJoin = new Join("Profile", "ProfileToCollection", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2);
        final Join collectionToRuleJoin = new Join("ProfileToCollection", "CollectionToRules", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 2);
        final Join ruleJoin = new Join("CollectionToRules", "RuleEngine", new String[] { "RULE_ID" }, new String[] { "RULE_ID" }, 2);
        final Join ruleToActionJoin = new Join("RuleEngine", "RuleToAction", new String[] { "RULE_ID" }, new String[] { "RULE_ID" }, 2);
        final Join actionToActionAttributesJoin = new Join("RuleToAction", "ActionToActionAttributes", new String[] { "ACTION_ID" }, new String[] { "ACTION_ID" }, 2);
        final Join commandDataJoin = new Join("ActionToActionAttributes", "CommandData", new String[] { "ACTION_ATTRIBUTE_ID" }, new String[] { "COMMAND_DATA_ID" }, 2);
        final Join profileCustomerJoin = new Join("Profile", "ProfileToCustomerRel", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2);
        final Join customerJoin = new Join("ProfileToCustomerRel", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2);
        selectQuery.addJoin(profileToCollectionJoin);
        selectQuery.addJoin(collectionToRuleJoin);
        selectQuery.addJoin(ruleJoin);
        selectQuery.addJoin(ruleToActionJoin);
        selectQuery.addJoin(actionToActionAttributesJoin);
        selectQuery.addJoin(commandDataJoin);
        selectQuery.addJoin(profileCustomerJoin);
        selectQuery.addJoin(customerJoin);
        final Column actionAttributeColumn = new Column("CommandData", "COMMAND_DATA_ID");
        final Criteria complianceCriteria = new Criteria(new Column("Profile", "PROFILE_TYPE"), (Object)5, 0);
        final List actionTypeList = new ArrayList();
        actionTypeList.add(1);
        actionTypeList.add(2);
        actionTypeList.add(3);
        actionTypeList.add(4);
        for (int i = 0; i < actionTypeList.size(); ++i) {
            final int commandType = actionTypeList.get(i);
            final CaseExpression actionTypeCount = new CaseExpression(String.valueOf(commandType));
            final Criteria actionTypeCriteria = new Criteria(new Column("CommandData", "COMMAND_TYPE"), (Object)commandType, 0);
            actionTypeCount.addWhen(actionTypeCriteria.and(complianceCriteria), (Object)actionAttributeColumn);
            selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(actionTypeCount, 4, String.valueOf(commandType)));
        }
        final List groupByColumnList = new ArrayList();
        groupByColumnList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByClause = new GroupByClause(groupByColumnList);
        selectQuery.addSelectColumns(groupByColumnList);
        selectQuery.setGroupByClause(groupByClause);
        return selectQuery;
    }
    
    public SelectQuery accountConfigQuery() {
        final SelectQuery query = (SelectQuery)new SelectQueryImpl(Table.getTable("MacAccountConfigToResource"));
        final CaseExpression associateFailCount = new CaseExpression("macOS_Account_Config_Associate_Fail_Count");
        final CaseExpression associateSuccessCount = new CaseExpression("macOS_Account_Config_Associate_Success_Count");
        final Criteria associateFailCriteria = new Criteria(Column.getColumn("MacAccountConfigToResource", "STATUS"), (Object)2, 0);
        final Criteria associateSuccessCriteria = new Criteria(Column.getColumn("MacAccountConfigToResource", "STATUS"), (Object)1, 0);
        final Column resourceColumn = new Column("ManagedDevice", "RESOURCE_ID");
        associateFailCount.addWhen(associateFailCriteria, (Object)resourceColumn);
        associateSuccessCount.addWhen(associateSuccessCriteria, (Object)resourceColumn);
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        query.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(associateFailCount, 4, "macOS_Account_Config_Associate_Fail_Count"));
        query.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(associateSuccessCount, 4, "macOS_Account_Config_Associate_Success_Count"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("EnrollmentTemplate", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        query.setGroupByClause(groupByColumn);
        return query;
    }
    
    public SelectQuery geoFenceRepositoryQuery() {
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("GeoFence"));
        final CaseExpression totalGeoFenceCount = new CaseExpression("MDM_GEOFENCE_CREATED_TOTAL_COUNT");
        final CaseExpression trashGeoFenceCount = new CaseExpression("MDM_GEOFENCE_TRASH_COUNT");
        final CaseExpression unusedGeoFenceCount = new CaseExpression("MDM_GEOFENCE_UNUNSED_COUNT");
        final CaseExpression complianceGeoFenceCount = new CaseExpression("MDM_GEOFENCE_COMPLIANCE_COUNT");
        final Criteria geoFenceCriteria = new Criteria(new Column("GeoFence", "GEO_FENCE_ID"), (Object)null, 1);
        final Criteria trashGeoFenceCriteria = new Criteria(new Column("GeoFence", "IS_MOVED_TO_TRASH"), (Object)Boolean.TRUE, 0);
        final Criteria usedInComplianceCriteria = new Criteria(new Column("GeoFenceCriteria", "GEO_FENCE_ID"), (Object)null, 1);
        final Criteria notUsedInComplianceCriteria = new Criteria(new Column("GeoFenceCriteria", "GEO_FENCE_ID"), (Object)null, 0);
        final Column geoFenceColumn = new Column("GeoFence", "GEO_FENCE_ID");
        totalGeoFenceCount.addWhen(geoFenceCriteria, (Object)geoFenceColumn);
        trashGeoFenceCount.addWhen(trashGeoFenceCriteria, (Object)geoFenceColumn);
        unusedGeoFenceCount.addWhen(notUsedInComplianceCriteria, (Object)geoFenceColumn);
        complianceGeoFenceCount.addWhen(usedInComplianceCriteria, (Object)geoFenceColumn);
        final Join geoFenceComplianceJoin = new Join("GeoFence", "GeoFenceCriteria", new String[] { "GEO_FENCE_ID" }, new String[] { "GEO_FENCE_ID" }, 1);
        final Join customerJoin = new Join("GeoFence", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2);
        selectQuery.addJoin(geoFenceComplianceJoin);
        selectQuery.addJoin(customerJoin);
        selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(totalGeoFenceCount, 4, "MDM_GEOFENCE_CREATED_TOTAL_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(trashGeoFenceCount, 4, "MDM_GEOFENCE_TRASH_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(unusedGeoFenceCount, 4, "MDM_GEOFENCE_UNUNSED_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(complianceGeoFenceCount, 4, "MDM_GEOFENCE_COMPLIANCE_COUNT"));
        final Column customerColumn = new Column("CustomerInfo", "CUSTOMER_ID");
        final List groupByColumnList = new ArrayList();
        groupByColumnList.add(customerColumn);
        final GroupByClause groupByClause = new GroupByClause(groupByColumnList);
        selectQuery.addSelectColumns(groupByColumnList);
        selectQuery.setGroupByClause(groupByClause);
        return selectQuery;
    }
    
    public SelectQuery deviceComplianceGroupsDistributionQuery() {
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final CaseExpression groupDistributionCount = new CaseExpression("MDM_COMPLIANCE_GROUP_ASSOCIATION_COUNT");
        final CaseExpression groupDisassociationCount = new CaseExpression("MDM_COMPLIANCE_GROUP_DISASSOCIATION_COUNT");
        final Criteria groupDisassociationCriteria = new Criteria(new Column("GroupToProfileHistory", "REMARKS"), (Object)"disassociated", 0);
        final Criteria complianceCriteria = new Criteria(new Column("Profile", "PROFILE_TYPE"), (Object)5, 0);
        final Column customGroupColumn = new Column("CustomGroup", "RESOURCE_ID");
        groupDistributionCount.addWhen(complianceCriteria, (Object)customGroupColumn);
        groupDisassociationCount.addWhen(groupDisassociationCriteria.and(complianceCriteria), (Object)customGroupColumn);
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("Profile"));
        final Join profileToGroupJoin = new Join("Profile", "RecentProfileForGroup", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1);
        final Join customGroupJoin = new Join("RecentProfileForGroup", "CustomGroup", new String[] { "GROUP_ID" }, new String[] { "RESOURCE_ID" }, 2);
        final Join groupHistoryJoin = new Join("RecentProfileForGroup", "GroupToProfileHistory", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2);
        final Join groupCustomerJoin = new Join("CustomGroup", "Resource", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2);
        final Join customerJoin = new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2);
        selectQuery.addJoin(profileToGroupJoin);
        selectQuery.addJoin(customGroupJoin);
        selectQuery.addJoin(groupHistoryJoin);
        selectQuery.addJoin(groupCustomerJoin);
        selectQuery.addJoin(customerJoin);
        selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(groupDistributionCount, 4, "MDM_COMPLIANCE_GROUP_ASSOCIATION_COUNT"));
        selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(groupDisassociationCount, 4, "MDM_COMPLIANCE_GROUP_DISASSOCIATION_COUNT"));
        final Column customerColumn = new Column("CustomerInfo", "CUSTOMER_ID");
        final List groupByColumnList = new ArrayList();
        groupByColumnList.add(customerColumn);
        final GroupByClause groupByClause = new GroupByClause(groupByColumnList);
        selectQuery.addSelectColumns(groupByColumnList);
        selectQuery.setGroupByClause(groupByClause);
        return selectQuery;
    }
    
    public SelectQuery getDeviceComplianceErrorQuery() {
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("RuleStatusHistory"));
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        final Join ruleJoin = new Join("RuleStatusHistory", "RuleEngine", new String[] { "RULE_ID" }, new String[] { "RULE_ID" }, 2);
        final Join customerJoin = new Join("RuleEngine", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2);
        selectQuery.addJoin(ruleJoin);
        selectQuery.addJoin(customerJoin);
        final Column ruleStatusHistoryColumn = new Column("RuleStatusHistory", "RULE_STATUS_HISTORY_ID");
        final List errorTypeList = new ArrayList();
        errorTypeList.add(1002);
        errorTypeList.add(1004);
        errorTypeList.add(1001);
        for (int i = 0; i < errorTypeList.size(); ++i) {
            final int errorCodeType = errorTypeList.get(i);
            final CaseExpression errorTypeCount = new CaseExpression(String.valueOf(errorCodeType));
            final Criteria errorCriteria = new Criteria(new Column("RuleStatusHistory", "REMARKS_ARGS"), (Object)errorCodeType, 10);
            errorTypeCount.addWhen(errorCriteria, (Object)ruleStatusHistoryColumn);
            selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(errorTypeCount, 4, String.valueOf(errorCodeType)));
        }
        final List groupByColumnList = new ArrayList();
        groupByColumnList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByClause = new GroupByClause(groupByColumnList);
        selectQuery.addSelectColumns(groupByColumnList);
        selectQuery.setGroupByClause(groupByClause);
        return selectQuery;
    }
    
    public SelectQuery getMDMGroupsTrackingQuery() {
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("CustomGroup"));
        selectQuery.addJoin(new Join("CustomGroup", "Resource", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        selectQuery.addJoin(new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        final Criteria deviceGroupCriteria = new Criteria(Column.getColumn("CustomGroup", "GROUP_TYPE"), (Object)MDMGroupHandler.getMDMGroupType().toArray(), 8);
        final CaseExpression deviceGroupCase = new CaseExpression("Device_Group_Count");
        deviceGroupCase.addWhen(deviceGroupCriteria, (Object)1);
        final Criteria userGroupCriteria = new Criteria(Column.getColumn("CustomGroup", "GROUP_TYPE"), (Object)7, 0).and(new Criteria(Column.getColumn("Resource", "DOMAIN_NETBIOS_NAME"), (Object)"MDM", 2));
        final CaseExpression userGroupCase = new CaseExpression("User_Group_Count");
        userGroupCase.addWhen(userGroupCriteria, (Object)1);
        final Criteria adGroupCriteria = new Criteria(Column.getColumn("CustomGroup", "GROUP_TYPE"), (Object)7, 0).and(new Criteria(Column.getColumn("Resource", "DOMAIN_NETBIOS_NAME"), (Object)"MDM", 3));
        final CaseExpression adUserGroupCase = new CaseExpression("AD_User_Group_Count");
        adUserGroupCase.addWhen(adGroupCriteria, (Object)1);
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(deviceGroupCase, 4, "Device_Group_Count"));
        selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(userGroupCase, 4, "User_Group_Count"));
        selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(adUserGroupCase, 4, "AD_User_Group_Count"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("Resource", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        selectQuery.setGroupByClause(groupByColumn);
        return selectQuery;
    }
    
    public DerivedTable getAddMoreSupportedConfig() {
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("Profile"));
        selectQuery.addJoin(new Join("Profile", "RecentProfileToColln", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2));
        selectQuery.addJoin(new Join("RecentProfileToColln", "CfgDataToCollection", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 2));
        selectQuery.addJoin(new Join("CfgDataToCollection", "ConfigData", new String[] { "CONFIG_DATA_ID" }, new String[] { "CONFIG_DATA_ID" }, 2));
        selectQuery.addJoin(new Join("ConfigData", "ConfigDataItem", new String[] { "CONFIG_DATA_ID" }, new String[] { "CONFIG_DATA_ID" }, 2));
        final Column configDataIdColumn = Column.getColumn("ConfigData", "CONFIG_DATA_ID");
        final Column configIdColumn = Column.getColumn("ConfigData", "CONFIG_ID");
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("Profile", "PROFILE_ID"));
        groupByColumnsList.add(configDataIdColumn);
        groupByColumnsList.add(configIdColumn);
        final Column configDataIdCountColumn = configDataIdColumn.count();
        configDataIdCountColumn.setColumnAlias("CONFIG_DATA_ITEM_COUNT");
        final Criteria havingCriteria = new Criteria(configDataIdColumn.count(), (Object)1, 5);
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList, havingCriteria);
        selectQuery.setGroupByClause(groupByColumn);
        selectQuery.setCriteria(new Criteria(Column.getColumn("ConfigData", "CONFIG_ID"), (Object)MDMTrackerConstants.ADD_MORE_SUPPORTED_CONFIG, 8));
        selectQuery.addSelectColumn(Column.getColumn("Profile", "PROFILE_ID"));
        selectQuery.addSelectColumn(configDataIdColumn);
        selectQuery.addSelectColumn(configDataIdCountColumn);
        selectQuery.addSelectColumn(configIdColumn);
        final DerivedTable derivedTable = new DerivedTable("ADDMORECONFIG", (Query)selectQuery);
        return derivedTable;
    }
    
    public SelectQuery getOSSummaryDetails() {
        final List platformList = new ArrayList();
        platformList.add(1);
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(new Table("Resource"));
        selectQuery.addJoin(new Join("Resource", "ManagedDevice", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        selectQuery.addJoin(new Join("ManagedDevice", "MdDeviceInfo", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        selectQuery.addJoin(new Join("MdDeviceInfo", "MdModelInfo", new String[] { "MODEL_ID" }, new String[] { "MODEL_ID" }, 2));
        selectQuery.addJoin(new Join("ManagedDevice", "ResourceToConfigProfiles", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 1));
        selectQuery.addJoin(new Join("ResourceToConfigProfiles", "IOSConfigPayload", new String[] { "PROFILE_PAYLOAD_ID" }, new String[] { "PAYLOAD_ID" }, 2));
        selectQuery.addJoin(new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        selectQuery = MDMTrackerUtil.addAppleVersionSummaryCriteriaFromConf(selectQuery);
        selectQuery.addSelectColumn(new Column("Resource", "CUSTOMER_ID"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("Resource", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        selectQuery.setGroupByClause(groupByColumn);
        return selectQuery;
    }
    
    private SelectQuery getUserInTrashCount() {
        final SelectQuery userCountQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("ManagedUser"));
        userCountQuery.addJoin(new Join("ManagedUser", "Resource", new String[] { "MANAGED_USER_ID" }, new String[] { "RESOURCE_ID" }, 2));
        userCountQuery.addJoin(new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        final Criteria userInTrashCriteria = new Criteria(Column.getColumn("ManagedUser", "STATUS"), (Object)11, 0);
        userCountQuery.setCriteria(userInTrashCriteria);
        Column countColumn = Column.getColumn("ManagedUser", "MANAGED_USER_ID");
        countColumn = countColumn.distinct();
        countColumn = countColumn.count();
        countColumn.setColumnAlias("USER_IN_TRASH_COUNT");
        userCountQuery.addSelectColumn(countColumn);
        final ArrayList<Column> groupByColumnList = new ArrayList<Column>();
        groupByColumnList.add(Column.getColumn("ManagedUser", "MANAGED_USER_ID"));
        final GroupByClause groupByClause = new GroupByClause((List)groupByColumnList);
        userCountQuery.setGroupByClause(groupByClause);
        return userCountQuery;
    }
    
    public SelectQuery getEmailClientPrefsDetails() {
        final SelectQuery query = (SelectQuery)new SelectQueryImpl(Table.getTable("AndroidActiveSyncPolicy"));
        query.addJoin(new Join("AndroidActiveSyncPolicy", "ConfigDataItem", new String[] { "CONFIG_DATA_ITEM_ID" }, new String[] { "CONFIG_DATA_ITEM_ID" }, 2));
        query.addJoin(new Join("ConfigDataItem", "CfgDataToCollection", new String[] { "CONFIG_DATA_ID" }, new String[] { "CONFIG_DATA_ID" }, 2));
        query.addJoin(new Join("CfgDataToCollection", "CollnToResources", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 2));
        query.addJoin(new Join("CfgDataToCollection", "ProfileToCollection", new String[] { "COLLECTION_ID" }, new String[] { "COLLECTION_ID" }, 2));
        query.addJoin(new Join("ProfileToCollection", "ProfileToCustomerRel", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2));
        query.addJoin(new Join("ProfileToCustomerRel", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        query.setCriteria(new Criteria(Column.getColumn("CollnToResources", "STATUS"), (Object)6, 0));
        final Criteria gmailPrimaryCriteria = new Criteria(Column.getColumn("AndroidActiveSyncPolicy", "PRIMARY_CLIENT_PREF"), (Object)0, 0);
        final Criteria outlookPrimaryCriteria = new Criteria(Column.getColumn("AndroidActiveSyncPolicy", "PRIMARY_CLIENT_PREF"), (Object)2, 0);
        final Criteria samsungPrimaryCriteria = new Criteria(Column.getColumn("AndroidActiveSyncPolicy", "PRIMARY_CLIENT_PREF"), (Object)1, 0);
        final Criteria gmailSecondaryCriteria = new Criteria(Column.getColumn("AndroidActiveSyncPolicy", "SECONDARY_CLIENT_PREF"), (Object)0, 0);
        final Criteria outlookSecondaryCriteria = new Criteria(Column.getColumn("AndroidActiveSyncPolicy", "SECONDARY_CLIENT_PREF"), (Object)2, 0);
        final CaseExpression gmailCase = new CaseExpression("EMAIL_PRIMARY_GMAIL");
        gmailCase.addWhen(gmailPrimaryCriteria, (Object)Boolean.TRUE);
        final CaseExpression outlookCase = new CaseExpression("EMAIL_PRIMARY_OUTLOOK");
        outlookCase.addWhen(outlookPrimaryCriteria, (Object)Boolean.TRUE);
        final CaseExpression samsungAndGmailCase = new CaseExpression("EMAIL_PRIMARY_SAMSUNG_SECONDARY_GMAIL");
        samsungAndGmailCase.addWhen(samsungPrimaryCriteria.and(gmailSecondaryCriteria), (Object)Boolean.TRUE);
        final CaseExpression samsungAndOutlookCase = new CaseExpression("EMAIL_PRIMARY_SAMSUNG_SECONDARY_OUTLOOK");
        samsungAndOutlookCase.addWhen(samsungPrimaryCriteria.and(outlookSecondaryCriteria), (Object)Boolean.TRUE);
        final MDMTrackerUtil util = new MDMTrackerUtil();
        query.addSelectColumn(util.getCountCaseExpressionColumn(gmailCase, 4, "EMAIL_PRIMARY_GMAIL"));
        query.addSelectColumn(util.getCountCaseExpressionColumn(outlookCase, 4, "EMAIL_PRIMARY_OUTLOOK"));
        query.addSelectColumn(util.getCountCaseExpressionColumn(samsungAndGmailCase, 4, "EMAIL_PRIMARY_SAMSUNG_SECONDARY_GMAIL"));
        query.addSelectColumn(util.getCountCaseExpressionColumn(samsungAndOutlookCase, 4, "EMAIL_PRIMARY_SAMSUNG_SECONDARY_OUTLOOK"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(Column.getColumn("ProfileToCustomerRel", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        query.setGroupByClause(groupByColumn);
        return query;
    }
    
    public SelectQuery getScepCertCountQuery() {
        final Criteria isIosPlatform = new Criteria(new Column("ManagedDevice", "PLATFORM_TYPE"), (Object)1, 0);
        final Criteria isAndroidPlatform = new Criteria(new Column("ManagedDevice", "PLATFORM_TYPE"), (Object)2, 0);
        final CaseExpression AndroidScepCount = new CaseExpression("ANDROID_SCEP_COUNT");
        AndroidScepCount.addWhen(isAndroidPlatform, (Object)new Column("MDScepCertificates", "CERTIFICATE_ID"));
        final CaseExpression IosScepCount = new CaseExpression("IOS_SCEP_COUNT");
        IosScepCount.addWhen(isIosPlatform, (Object)new Column("MDScepCertificates", "CERTIFICATE_ID"));
        final SelectQuery sQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("ManagedDevice"));
        sQuery.addJoin(new Join("ManagedDevice", "Resource", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        sQuery.addJoin(new Join("ManagedDevice", "MdCertificateResourceRel", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        sQuery.addJoin(new Join("MdCertificateResourceRel", "MDScepCertificates", new String[] { "CERTIFICATE_ID" }, new String[] { "CERTIFICATE_ID" }, 2));
        sQuery.addJoin(new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        final MDMTrackerUtil trackerQueryUtil = new MDMTrackerUtil();
        sQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(AndroidScepCount, 4, "ANDROID_SCEP_COUNT"));
        sQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(IosScepCount, 4, "IOS_SCEP_COUNT"));
        sQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        sQuery.setGroupByClause(groupByColumn);
        return sQuery;
    }
    
    public SelectQuery getAzureMamPropsCountQuery() {
        final SelectQuery sQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("CustomerInfo"));
        sQuery.addJoin(new Join("CustomerInfo", "AzureMamProps", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 1));
        sQuery.addSelectColumn(MDMUtil.getCountOfColumn("AzureMamProps", "CUSTOMER_ID", "AZURE_MAM_POLICY_SUCCESS"));
        return sQuery;
    }
    
    public SelectQuery getAutoUpdateAppDistDetails() {
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("MdAppCatalogToResourceExtn"));
        selectQuery.addJoin(new Join("MdAppCatalogToResourceExtn", "MdAppGroupDetails", new String[] { "APP_GROUP_ID" }, new String[] { "APP_GROUP_ID" }, 2));
        Column selectColumn = new Column("MdAppCatalogToResourceExtn", "APP_GROUP_ID");
        selectColumn = selectColumn.distinct();
        selectColumn = selectColumn.count();
        selectColumn.setColumnAlias("TOTAL_COUNT");
        selectQuery.addSelectColumn(selectColumn);
        final Criteria autoUpdtCriteria = new Criteria(new Column("MdAppCatalogToResourceExtn", "PUBLISHED_APP_SOURCE"), (Object)MDMCommonConstants.ASSOCIATED_APP_SOURCE_BY_AUTO_UPDATE, 0);
        selectQuery.setCriteria(autoUpdtCriteria);
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("MdAppGroupDetails", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        selectQuery.setGroupByClause(groupByColumn);
        return selectQuery;
    }
    
    public SelectQuery getAutoUpdateDeviceDistDetails() {
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("MdAppCatalogToResourceExtn"));
        selectQuery.addJoin(new Join("MdAppCatalogToResourceExtn", "MdAppGroupDetails", new String[] { "APP_GROUP_ID" }, new String[] { "APP_GROUP_ID" }, 2));
        Column selectColumn = new Column("MdAppCatalogToResourceExtn", "RESOURCE_ID");
        selectColumn = selectColumn.distinct();
        selectColumn = selectColumn.count();
        selectColumn.setColumnAlias("TOTAL_COUNT");
        selectQuery.addSelectColumn(selectColumn);
        final Criteria autoUpdtCriteria = new Criteria(new Column("MdAppCatalogToResourceExtn", "PUBLISHED_APP_SOURCE"), (Object)MDMCommonConstants.ASSOCIATED_APP_SOURCE_BY_AUTO_UPDATE, 0);
        selectQuery.setCriteria(autoUpdtCriteria);
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("MdAppGroupDetails", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        selectQuery.setGroupByClause(groupByColumn);
        return selectQuery;
    }
    
    public SelectQuery isAppAutoUpdateConfigured() {
        final CaseExpression autoupdateConfigured = new CaseExpression("AUTO_UPDATE_CONFIGURED");
        final Criteria custCriteria = new Criteria(new Column("AutoAppUpdateConfigDetails", "CUSTOMER_ID"), (Object)null, 0);
        autoupdateConfigured.addWhen(custCriteria, (Object)Boolean.FALSE.toString());
        autoupdateConfigured.elseVal((Object)Boolean.TRUE.toString());
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("CustomerInfo"));
        selectQuery.addJoin(new Join("CustomerInfo", "AutoAppUpdateConfigDetails", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 1));
        selectQuery.addSelectColumn((Column)autoupdateConfigured);
        return selectQuery;
    }
    
    public SelectQuery getCertificateRepoSelectQuery() {
        final Criteria activeCriteria = new Criteria(new Column("Certificates", "IS_ACTIVE"), (Object)true, 0);
        final Criteria certCriteria = new Criteria(new Column("Certificates", "CERTIFICATE_TYPE"), (Object)0, 0);
        final Criteria templateCriteria = new Criteria(new Column("Certificates", "CERTIFICATE_TYPE"), (Object)1, 0);
        final Criteria serverCriteria = new Criteria(new Column("SCEPServerToTemplate", "SCEP_SERVER_ID"), (Object)null, 1);
        final Criteria trashedCriteria = new Criteria(new Column("Certificates", "IS_ACTIVE"), (Object)false, 0);
        final CaseExpression certficateCount = new CaseExpression("CERTIFICATE_COUNT");
        certficateCount.addWhen(activeCriteria.and(certCriteria), (Object)new Column("Certificates", "CERTIFICATE_RESOURCE_ID"));
        final CaseExpression scepCount = new CaseExpression("SCEP_COUNT");
        scepCount.addWhen(templateCriteria.and(activeCriteria), (Object)new Column("Certificates", "CERTIFICATE_RESOURCE_ID"));
        final CaseExpression certficatetrashCount = new CaseExpression("CERTIFICATE_TRASH_COUNT");
        certficatetrashCount.addWhen(trashedCriteria.and(certCriteria), (Object)new Column("Certificates", "CERTIFICATE_RESOURCE_ID"));
        final CaseExpression sceptashCount = new CaseExpression("SCEP_TRASH_COUNT");
        sceptashCount.addWhen(templateCriteria.and(trashedCriteria), (Object)new Column("Certificates", "CERTIFICATE_RESOURCE_ID"));
        final CaseExpression serverCount = new CaseExpression("SCEP_SERVER_COUNT");
        serverCount.addWhen(serverCriteria, (Object)new Column("SCEPServerToTemplate", "SCEP_SERVER_ID"));
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("CustomerInfo"));
        selectQuery.addJoin(new Join("CustomerInfo", "Certificates", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 1));
        selectQuery.addJoin(new Join("Certificates", "SCEPServerToTemplate", new String[] { "CERTIFICATE_RESOURCE_ID" }, new String[] { "SCEP_CONFIG_ID" }, 1));
        final MDMTrackerUtil trackerQueryUtil = new MDMTrackerUtil();
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(certficateCount, 4, "CERTIFICATE_COUNT"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(scepCount, 4, "SCEP_COUNT"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(certficatetrashCount, 4, "CERTIFICATE_TRASH_COUNT"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(sceptashCount, 4, "SCEP_TRASH_COUNT"));
        selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(serverCount, 4, "SCEP_SERVER_COUNT"));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        selectQuery.setGroupByClause(groupByColumn);
        return selectQuery;
    }
    
    private SelectQuery getAppConfigPolicyQuery() {
        final SelectQuery appConfigQuery = (SelectQuery)new SelectQueryImpl(new Table("Profile"));
        final Criteria isPublishedProfile = new Criteria(new Column("Profile", "PROFILE_ID"), (Object)new Column("RecentPubProfileToColln", "PROFILE_ID"), 0);
        final Criteria isAndroidPlatform = new Criteria(new Column("Profile", "PLATFORM_TYPE"), (Object)2, 0);
        final Criteria profileType = new Criteria(Column.getColumn("Profile", "PROFILE_TYPE"), (Object)10, 0);
        final CaseExpression androidCount = new CaseExpression("OEM_COUNT");
        final Criteria notInTrash = new Criteria(Column.getColumn("Profile", "IS_MOVED_TO_TRASH"), (Object)false, 0);
        final Criteria inTrash = new Criteria(Column.getColumn("Profile", "IS_MOVED_TO_TRASH"), (Object)true, 0);
        androidCount.addWhen(isAndroidPlatform.and(notInTrash).and(profileType).and(isPublishedProfile), (Object)new Column("Profile", "PROFILE_ID"));
        final CaseExpression androidTrashCount = new CaseExpression("OEM_TRASH_COUNT");
        androidTrashCount.addWhen(isAndroidPlatform.and(inTrash).and(profileType), (Object)new Column("Profile", "PROFILE_ID"));
        appConfigQuery.addJoin(new Join("Profile", "RecentPubProfileToColln", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 1));
        appConfigQuery.addJoin(new Join("Profile", "ProfileToCustomerRel", new String[] { "PROFILE_ID" }, new String[] { "PROFILE_ID" }, 2));
        appConfigQuery.addJoin(new Join("ProfileToCustomerRel", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        appConfigQuery.addSelectColumn(MEMDMTrackerUtil.getDistinctIntegerCountOfCaseExpression(androidCount));
        appConfigQuery.addSelectColumn(MEMDMTrackerUtil.getDistinctIntegerCountOfCaseExpression(androidTrashCount));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        appConfigQuery.setGroupByClause(groupByColumn);
        return appConfigQuery;
    }
    
    public SelectQuery getIndividualCertServerQuery() {
        final Map<Integer, String> scepServers = ScepServerUtil.getScepServersAndTypes();
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(new Table("CustomerInfo"));
        selectQuery.addJoin(new Join("CustomerInfo", "SCEPServers", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 1));
        selectQuery.addJoin(new Join("SCEPServers", "SCEPServerToTemplate", new String[] { "SERVER_ID" }, new String[] { "SCEP_SERVER_ID" }, 1));
        selectQuery.addJoin(new Join("SCEPServerToTemplate", "Certificates", new String[] { "SCEP_CONFIG_ID" }, new String[] { "CERTIFICATE_RESOURCE_ID" }, 1));
        final Criteria activeCriteria = new Criteria(new Column("Certificates", "IS_ACTIVE"), (Object)true, 0);
        final MDMTrackerUtil trackerQueryUtil = new MDMTrackerUtil();
        for (final int i : scepServers.keySet()) {
            final String scepServer = scepServers.get(i);
            final Criteria scepServerType = new Criteria(new Column("SCEPServers", "TYPE"), (Object)i, 0);
            final CaseExpression scepServerCount = new CaseExpression(scepServer + "_SCEP_TYPE");
            scepServerCount.addWhen(scepServerType, (Object)new Column("SCEPServers", "SERVER_ID"));
            final CaseExpression scepConfigCount = new CaseExpression(scepServers.get(i) + "_SCEP_CONFIGURATIONS");
            scepConfigCount.addWhen(scepServerType.and(activeCriteria), (Object)new Column("SCEPServerToTemplate", "SCEP_CONFIG_ID"));
            selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(scepServerCount, 4, scepServer + "_SCEP_TYPE"));
            selectQuery.addSelectColumn(trackerQueryUtil.getDistinctCountCaseExpressionColumn(scepConfigCount, 4, scepServer + "_SCEP_CONFIGURATIONS"));
        }
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        final GroupByClause groupByColumn = new GroupByClause((List)groupByColumnsList);
        selectQuery.setGroupByClause(groupByColumn);
        return selectQuery;
    }
    
    public SelectQuery getFeatureSettingDetailsQuery() {
        final HashMap<Integer, String> featureSettings = MDMFeatureSettingsHandler.getFeatureSettingsAndTypes();
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(new Table("CustomerInfo"));
        selectQuery.addJoin(new Join("CustomerInfo", "MDMFeatureSettings", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 1));
        selectQuery.addJoin(new Join("MDMFeatureSettings", "MDMFeatureSettingsToResourceCriteria", new String[] { "SETTINGS_ID" }, new String[] { "SETTINGS_ID" }, 1));
        final Criteria featureEnabledCriteria = new Criteria(new Column("MDMFeatureSettings", "IS_FEATURE_ENABLED"), (Object)true, 0);
        final Criteria isGroupIncludedCriteria = new Criteria(new Column("MDMFeatureSettingsToResourceCriteria", "CRITERIA_TYPE"), (Object)1, 0);
        final Criteria isGroupExcludedCriteria = new Criteria(new Column("MDMFeatureSettingsToResourceCriteria", "CRITERIA_TYPE"), (Object)2, 0);
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        for (final int i : featureSettings.keySet()) {
            final String featureName = featureSettings.get(i);
            final Criteria featureTypeCriteria = new Criteria(new Column("MDMFeatureSettings", "FEATURE_TYPE"), (Object)i, 0);
            final CaseExpression featureCount = new CaseExpression(featureName);
            featureCount.addWhen(featureTypeCriteria.and(featureEnabledCriteria), (Object)new Column("MDMFeatureSettings", "SETTINGS_ID"));
            final CaseExpression includedGroupsCount = new CaseExpression(featureName + "_INCLUDED_GROUPS");
            includedGroupsCount.addWhen(featureTypeCriteria.and(featureEnabledCriteria).and(isGroupIncludedCriteria), (Object)new Column("MDMFeatureSettingsToResourceCriteria", "RESOURCE_ID"));
            final CaseExpression excludedGroupsCount = new CaseExpression(featureName + "_EXCLUDED_GROUPS");
            excludedGroupsCount.addWhen(featureTypeCriteria.and(featureEnabledCriteria).and(isGroupExcludedCriteria), (Object)new Column("MDMFeatureSettingsToResourceCriteria", "RESOURCE_ID"));
            selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(featureCount, 4, featureName));
            selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(includedGroupsCount, 4, featureName + "_INCLUDED_GROUPS"));
            selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(excludedGroupsCount, 4, featureName + "_EXCLUDED_GROUPS"));
        }
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        selectQuery.setGroupByClause(new GroupByClause((List)groupByColumnsList));
        return selectQuery;
    }
    
    public SelectQuery getMigrationSummaryStatus() {
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(new Table("MigrationSummary"));
        selectQuery.addJoin(new Join("MigrationSummary", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        final Column yetToApplyCount = new Column("MigrationSummary", "YET_TO_APPLY_COUNT").summation();
        yetToApplyCount.setColumnAlias("YET_TO_APPLY_COUNT");
        final Column failureCount = new Column("MigrationSummary", "FAILURE_COUNT").summation();
        failureCount.setColumnAlias("FAILURE_COUNT");
        final Column successCount = new Column("MigrationSummary", "SUCCESS_COUNT").summation();
        successCount.setColumnAlias("SUCCESS_COUNT");
        final Column commandAddedCount = new Column("MigrationSummary", "COMMAND_ADDED_COUNT").summation();
        commandAddedCount.setColumnAlias("COMMAND_ADDED_COUNT");
        final Column initiatedCount = new Column("MigrationSummary", "INITIATED_COUNT").summation();
        initiatedCount.setColumnAlias("INITIATED_COUNT");
        final Column initatedFailedCount = new Column("MigrationSummary", "INITIATED_FAILED_COUNT").summation();
        initatedFailedCount.setColumnAlias("INITIATED_FAILED_COUNT");
        selectQuery.addSelectColumn(Column.getColumn("MigrationSummary", "CUSTOMER_ID"));
        selectQuery.addSelectColumn(yetToApplyCount);
        selectQuery.addSelectColumn(failureCount);
        selectQuery.addSelectColumn(successCount);
        selectQuery.addSelectColumn(commandAddedCount);
        selectQuery.addSelectColumn(initiatedCount);
        selectQuery.addSelectColumn(initatedFailedCount);
        selectQuery.setCriteria(new Criteria(Column.getColumn("MigrationSummary", "COMPUTED_AT"), (Object)(System.currentTimeMillis() - 86400000L), 4));
        final List outerGroupBy = new ArrayList();
        outerGroupBy.add(Column.getColumn("MigrationSummary", "CUSTOMER_ID"));
        selectQuery.setGroupByClause(new GroupByClause(outerGroupBy));
        return selectQuery;
    }
    
    public SelectQuery getRecoveryLockEnabledQuery() {
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(new Table("MDMDeviceFirmwareInfo"));
        final Join resourceJoin = new Join("MDMDeviceFirmwareInfo", "Resource", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2);
        final Join customerInfoJoin = new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2);
        final Join passwordDetailsJoin = new Join("MDMDeviceFirmwareInfo", "MDMDeviceManagedPasswordDetails", new String[] { "RESOURCE_ID", "MANAGED_PASSWORD_ID" }, new String[] { "RESOURCE_ID", "MANAGED_PASSWORD_ID" }, 2);
        selectQuery.addJoin(resourceJoin);
        selectQuery.addJoin(customerInfoJoin);
        selectQuery.addJoin(passwordDetailsJoin);
        final Criteria passwordEnabledCriteria = new Criteria(new Column("MDMDeviceFirmwareInfo", "IS_FIRMWARE_PASSWORD_EXISTS"), (Object)true, 0);
        final Criteria recoveryLockCriteria = new Criteria(new Column("MDMDeviceManagedPasswordDetails", "MANAGED_PASSWORD_TYPE"), (Object)2, 0);
        final Criteria firmwareCriteria = new Criteria(new Column("MDMDeviceManagedPasswordDetails", "MANAGED_PASSWORD_TYPE"), (Object)1, 0);
        final CaseExpression recoveryLockCase = new CaseExpression("RECOVERY_LOCK_ENABLED_COUNT");
        recoveryLockCase.addWhen(recoveryLockCriteria.and(passwordEnabledCriteria), (Object)new Column("MDMDeviceFirmwareInfo", "RESOURCE_ID"));
        final CaseExpression firmwareCase = new CaseExpression("FIRMWARE_PASSWORD_ENABLED_COUNT");
        firmwareCase.addWhen(firmwareCriteria.and(passwordEnabledCriteria), (Object)new Column("MDMDeviceFirmwareInfo", "RESOURCE_ID"));
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(recoveryLockCase));
        selectQuery.addSelectColumn(trackerUtil.getCountCaseExpressionColumn(firmwareCase));
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("CustomerInfo", "CUSTOMER_ID"));
        selectQuery.setGroupByClause(new GroupByClause((List)groupByColumnsList));
        return selectQuery;
    }
    
    public SelectQuery getQueryForIOSAppsInMultipleVppToken() {
        final SelectQuery derivedTableQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("ManagedBusinessStore"));
        derivedTableQuery.addJoin(new Join("ManagedBusinessStore", "MdBusinessStoreToAssetRel", new String[] { "BUSINESSSTORE_ID" }, new String[] { "BUSINESSSTORE_ID" }, 2));
        derivedTableQuery.addJoin(new Join("MdBusinessStoreToAssetRel", "MdStoreAssetToAppGroupRel", new String[] { "STORE_ASSET_ID" }, new String[] { "STORE_ASSET_ID" }, 2));
        derivedTableQuery.addJoin(new Join("MdStoreAssetToAppGroupRel", "MdAppGroupDetails", new String[] { "APP_GROUP_ID" }, new String[] { "APP_GROUP_ID" }, 2));
        final Column businessStoreCountColumn = new Column("ManagedBusinessStore", "BUSINESSSTORE_ID").count();
        businessStoreCountColumn.setColumnAlias("APPBUSINESSSTORECOUNT");
        final ArrayList<Column> groupByColumnsList = new ArrayList<Column>();
        groupByColumnsList.add(new Column("MdAppGroupDetails", "APP_GROUP_ID"));
        derivedTableQuery.setGroupByClause(new GroupByClause((List)groupByColumnsList));
        derivedTableQuery.addSelectColumn(Column.getColumn("MdAppGroupDetails", "APP_GROUP_ID"));
        derivedTableQuery.addSelectColumn(businessStoreCountColumn);
        final DerivedTable derivedTable = new DerivedTable("BUSINESSSTORE", (Query)derivedTableQuery);
        final Criteria bsCountCriteria = new Criteria(new Column("BUSINESSSTORE", "APPBUSINESSSTORECOUNT"), (Object)1, 5);
        final Criteria iOSplatformCriteria = new Criteria(Column.getColumn("MdAppGroupDetails", "PLATFORM_TYPE"), (Object)1, 0);
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl((Table)derivedTable);
        selectQuery.addJoin(new Join((Table)derivedTable, Table.getTable("MdAppGroupDetails"), new String[] { "APP_GROUP_ID" }, new String[] { "APP_GROUP_ID" }, 2));
        selectQuery.addJoin(new Join("MdAppGroupDetails", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        selectQuery.setCriteria(iOSplatformCriteria.and(bsCountCriteria));
        final List outerGroupBy = new ArrayList();
        outerGroupBy.add(Column.getColumn("CustomerInfo", "CUSTOMER_ID"));
        selectQuery.setGroupByClause(new GroupByClause(outerGroupBy));
        final Column appGroupColumnCount = Column.getColumn("MdAppGroupDetails", "APP_GROUP_ID").count();
        appGroupColumnCount.setColumnAlias("iOS_Apps_In_Multiple_Vpp_Token");
        selectQuery.addSelectColumn(appGroupColumnCount);
        return selectQuery;
    }
    
    public SelectQuery getIOSBusinessDetailsQuery() {
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("MdAppGroupDetails"));
        selectQuery.addJoin(new Join("MdAppGroupDetails", "MdStoreAssetToAppGroupRel", new String[] { "APP_GROUP_ID" }, new String[] { "APP_GROUP_ID" }, 2));
        selectQuery.addJoin(new Join("MdStoreAssetToAppGroupRel", "MdBusinessStoreToAssetRel", new String[] { "STORE_ASSET_ID" }, new String[] { "STORE_ASSET_ID" }, 2));
        selectQuery.addJoin(new Join("MdBusinessStoreToAssetRel", "MdVppAsset", new String[] { "STORE_ASSET_ID" }, new String[] { "VPP_ASSET_ID" }, 2));
        selectQuery.addJoin(new Join("MdVppAsset", "MdVPPTokenDetails", new String[] { "TOKEN_ID" }, new String[] { "TOKEN_ID" }, 2));
        selectQuery.addJoin(new Join("MdBusinessStoreToAssetRel", "ManagedBusinessStore", new String[] { "BUSINESSSTORE_ID" }, new String[] { "BUSINESSSTORE_ID" }, 2));
        selectQuery.addJoin(new Join("ManagedBusinessStore", "Resource", new String[] { "BUSINESSSTORE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        selectQuery.addJoin(new Join("Resource", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        final Criteria vppUserBasedTokensCri = new Criteria(Column.getColumn("MdVPPTokenDetails", "LICENSE_ASSIGN_TYPE"), (Object)1, 0);
        final Criteria vppDeviceBasedTokensCri = new Criteria(Column.getColumn("MdVPPTokenDetails", "LICENSE_ASSIGN_TYPE"), (Object)2, 0);
        final Criteria userBasedApps = new Criteria(new Column("MdVppAsset", "LICENSE_TYPE"), (Object)1, 0);
        final Criteria deviceBasedApps = new Criteria(new Column("MdVppAsset", "LICENSE_TYPE"), (Object)2, 0);
        final CaseExpression vppUserBasedTokenExp = new CaseExpression("iOS_User_Based_Vpp_Tokens_Count");
        vppUserBasedTokenExp.addWhen(vppUserBasedTokensCri, (Object)new Column("MdVPPTokenDetails", "TOKEN_ID"));
        final CaseExpression vppDeviceBasedTokenExp = new CaseExpression("iOS_Device_Based_Vpp_Tokens_Count");
        vppDeviceBasedTokenExp.addWhen(vppDeviceBasedTokensCri, (Object)new Column("MdVPPTokenDetails", "TOKEN_ID"));
        final CaseExpression userBasedVppAppExpression = new CaseExpression("iOS_Device_Based_Vpp_Apps_Count");
        userBasedVppAppExpression.addWhen(userBasedApps, (Object)new Column("MdVppAsset", "VPP_ASSET_ID"));
        final CaseExpression deviceBasedVppAppExpression = new CaseExpression("iOS_User_Based_Vpp_Apps_Count");
        deviceBasedVppAppExpression.addWhen(deviceBasedApps, (Object)new Column("MdVppAsset", "VPP_ASSET_ID"));
        final Column totalBusinessStoreCountCol = new Column("MdVPPTokenDetails", "TOKEN_ID").distinct().count();
        totalBusinessStoreCountCol.setColumnAlias("iOS_Total_Vpp_Tokens_Count");
        final MDMTrackerUtil trackerUtil = new MDMTrackerUtil();
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(vppUserBasedTokenExp, 4, "iOS_User_Based_Vpp_Tokens_Count"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(vppDeviceBasedTokenExp, 4, "iOS_Device_Based_Vpp_Tokens_Count"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(userBasedVppAppExpression, 4, "iOS_User_Based_Vpp_Apps_Count"));
        selectQuery.addSelectColumn(trackerUtil.getDistinctCountCaseExpressionColumn(deviceBasedVppAppExpression, 4, "iOS_Device_Based_Vpp_Apps_Count"));
        selectQuery.addSelectColumn(totalBusinessStoreCountCol);
        final List outerGroupBy = new ArrayList();
        outerGroupBy.add(Column.getColumn("CustomerInfo", "CUSTOMER_ID"));
        selectQuery.setGroupByClause(new GroupByClause(outerGroupBy));
        return selectQuery;
    }
    
    private SelectQuery businessStoreTechManagementDetails() {
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("ManagedBusinessStore"));
        selectQuery.addJoin(new Join("ManagedBusinessStore", "AaaUser", new String[] { "BUSINESSSTORE_ADDED_BY" }, new String[] { "USER_ID" }, 2));
        selectQuery.addJoin(new Join("AaaUser", "AaaLogin", new String[] { "USER_ID" }, new String[] { "USER_ID" }, 2));
        return selectQuery;
    }
    
    private SelectQuery getQueryForTechsWithManagingVppTokens(final Criteria criteria) {
        final SelectQuery innerQuery = this.businessStoreTechManagementDetails();
        innerQuery.addJoin(new Join("AaaLogin", "UserCustomGroupMapping", new String[] { "LOGIN_ID" }, new String[] { "LOGIN_ID" }, 1));
        final Column bsCountColumn = new Column("ManagedBusinessStore", "BUSINESSSTORE_ID").distinct().count();
        bsCountColumn.setColumnAlias("BUSINESSSTORECOUNT");
        final Column userColumn = Column.getColumn("AaaUser", "USER_ID");
        innerQuery.addSelectColumn(userColumn);
        innerQuery.addSelectColumn(bsCountColumn);
        final ArrayList innerGrpByList = new ArrayList();
        innerGrpByList.add(userColumn);
        innerQuery.setGroupByClause(new GroupByClause((List)innerGrpByList));
        Criteria vppBusinessStoreCriteria = new Criteria(Column.getColumn("ManagedBusinessStore", "BS_SERVICE_TYPE"), (Object)BusinessStoreSyncConstants.BS_SERVICE_VPP, 0);
        if (criteria != null) {
            vppBusinessStoreCriteria = vppBusinessStoreCriteria.and(criteria);
        }
        innerQuery.setCriteria(vppBusinessStoreCriteria);
        final DerivedTable derivedTable = new DerivedTable("TECHMANAGE", (Query)innerQuery);
        final SelectQuery outerQuery = (SelectQuery)new SelectQueryImpl((Table)derivedTable);
        outerQuery.addJoin(new Join((Table)derivedTable, Table.getTable("LoginUserCustomerMapping"), new String[] { "USER_ID" }, new String[] { "DC_USER_ID" }, 2));
        outerQuery.addJoin(new Join("LoginUserCustomerMapping", "CustomerInfo", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        final List outerGroupBy = new ArrayList();
        outerGroupBy.add(Column.getColumn("CustomerInfo", "CUSTOMER_ID"));
        outerQuery.setGroupByClause(new GroupByClause(outerGroupBy));
        final Criteria bsCountCriteria = new Criteria(new Column("TECHMANAGE", "BUSINESSSTORECOUNT"), (Object)1, 5);
        outerQuery.setCriteria(bsCountCriteria);
        return outerQuery;
    }
    
    public SelectQuery getQueryForTechWithMultipleVPPWithRBDA() {
        final SelectQuery selectQuery = this.getQueryForTechsWithManagingVppTokens(new Criteria(Column.getColumn("UserCustomGroupMapping", "GROUP_RESOURCE_ID"), (Object)null, 1));
        final Column techCountCol = Column.getColumn("TECHMANAGE", "USER_ID").distinct().count();
        techCountCol.setColumnAlias("Multiple_Vpp_Managing_RBDA_Tech_Count");
        selectQuery.addSelectColumn(Column.getColumn("CustomerInfo", "CUSTOMER_ID"));
        selectQuery.addSelectColumn(techCountCol);
        return selectQuery;
    }
    
    public SelectQuery getQueryForTechWithMultipleVPP() {
        final SelectQuery selectQuery = this.getQueryForTechsWithManagingVppTokens(null);
        final Column techCountCol = Column.getColumn("TECHMANAGE", "USER_ID").distinct().count();
        techCountCol.setColumnAlias("Multiple_Vpp_Managing_Tech_Count");
        selectQuery.addSelectColumn(techCountCol);
        selectQuery.addSelectColumn(Column.getColumn("CustomerInfo", "CUSTOMER_ID"));
        return selectQuery;
    }
    
    private SelectQuery getBusinessStoreAssociationQuery(final int platformType, final int resType) {
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("MDMResourceToDeploymentConfigs"));
        selectQuery.addJoin(new Join("MDMResourceToDeploymentConfigs", "ManagedBusinessStore", new String[] { "BUSINESSSTORE_ID" }, new String[] { "BUSINESSSTORE_ID" }, 2));
        final Column resourceColumn = new Column("MDMResourceToDeploymentConfigs", "RESOURCE_ID");
        final Column bsCountColumn = new Column("MDMResourceToDeploymentConfigs", "BUSINESSSTORE_ID").distinct().count();
        bsCountColumn.setColumnAlias("BUSINESSSTORECOUNT");
        Criteria criteria = null;
        if (platformType == 1) {
            criteria = new Criteria(Column.getColumn("ManagedBusinessStore", "BS_SERVICE_TYPE"), (Object)BusinessStoreSyncConstants.BS_SERVICE_VPP, 0);
        }
        else if (platformType == 3) {
            criteria = new Criteria(Column.getColumn("ManagedBusinessStore", "BS_SERVICE_TYPE"), (Object)BusinessStoreSyncConstants.BS_SERVICE_WBS, 0);
        }
        else {
            criteria = new Criteria(Column.getColumn("ManagedBusinessStore", "BS_SERVICE_TYPE"), (Object)BusinessStoreSyncConstants.BS_SERVICE_AFW, 0);
        }
        if (resType == 120) {
            selectQuery.addJoin(new Join("MDMResourceToDeploymentConfigs", "RecentProfileForResource", new String[] { "RESOURCE_ID", "PROFILE_ID" }, new String[] { "RESOURCE_ID", "PROFILE_ID" }, 2));
        }
        final ArrayList groupByList = new ArrayList();
        groupByList.add(resourceColumn);
        selectQuery.addSelectColumn(resourceColumn);
        selectQuery.setGroupByClause(new GroupByClause((List)groupByList));
        selectQuery.addSelectColumn(bsCountColumn);
        selectQuery.setCriteria(criteria);
        return selectQuery;
    }
    
    public SelectQuery getIOSBSDeviceAssociationQuery() {
        final DerivedTable derivedTable = new DerivedTable("ASSOCIATIONS", (Query)this.getBusinessStoreAssociationQuery(1, 120));
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("CustomerInfo"));
        selectQuery.addJoin(new Join("CustomerInfo", "Resource", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        selectQuery.addJoin(new Join("Resource", "ManagedDevice", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        selectQuery.addJoin(new Join(Table.getTable("ManagedDevice"), (Table)derivedTable, new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        final Criteria iosManagedDeviceCriteria = new Criteria(Column.getColumn("ManagedDevice", "PLATFORM_TYPE"), (Object)1, 0);
        final Column bsCountColumn = new Column("MDMResourceToDeploymentConfigs", "BUSINESSSTORE_ID").distinct().count();
        bsCountColumn.setColumnAlias("BUSINESSSTORECOUNT");
        final Criteria bsCountCriteria = new Criteria(new Column("ASSOCIATIONS", "BUSINESSSTORECOUNT"), (Object)1, 5);
        selectQuery.setCriteria(iosManagedDeviceCriteria.and(bsCountCriteria));
        final Column deviceCountColumn = new Column("ManagedDevice", "RESOURCE_ID").distinct().count();
        deviceCountColumn.setColumnAlias("Devices_With_Multiple_Vpp_Associations");
        final List outerGroupBy = new ArrayList();
        outerGroupBy.add(Column.getColumn("CustomerInfo", "CUSTOMER_ID"));
        selectQuery.addSelectColumn(deviceCountColumn);
        selectQuery.addSelectColumn(Column.getColumn("CustomerInfo", "CUSTOMER_ID"));
        selectQuery.setGroupByClause(new GroupByClause(outerGroupBy));
        return selectQuery;
    }
    
    public SelectQuery getIOSBSGroupAssociationQuery() {
        final DerivedTable derivedTable = new DerivedTable("ASSOCIATIONS", (Query)this.getBusinessStoreAssociationQuery(1, 101));
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("CustomerInfo"));
        selectQuery.addJoin(new Join("CustomerInfo", "Resource", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        selectQuery.addJoin(new Join("Resource", "CustomGroup", new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        selectQuery.addJoin(new Join(Table.getTable("CustomGroup"), (Table)derivedTable, new String[] { "RESOURCE_ID" }, new String[] { "RESOURCE_ID" }, 2));
        final Column bsCountColumn = new Column("MDMResourceToDeploymentConfigs", "BUSINESSSTORE_ID").distinct().count();
        bsCountColumn.setColumnAlias("BUSINESSSTORECOUNT");
        final Criteria bsCountCriteria = new Criteria(new Column("ASSOCIATIONS", "BUSINESSSTORECOUNT"), (Object)1, 5);
        selectQuery.setCriteria(bsCountCriteria);
        final Column groupsCountColumn = new Column("CustomGroup", "RESOURCE_ID").distinct().count();
        groupsCountColumn.setColumnAlias("Groups_With_Multiple_Vpp_Associations");
        final List outerGroupBy = new ArrayList();
        outerGroupBy.add(Column.getColumn("CustomerInfo", "CUSTOMER_ID"));
        selectQuery.setGroupByClause(new GroupByClause(outerGroupBy));
        selectQuery.addSelectColumn(groupsCountColumn);
        selectQuery.addSelectColumn(Column.getColumn("CustomerInfo", "CUSTOMER_ID"));
        return selectQuery;
    }
    
    private SelectQuery getMultiTrackPlayStoreAppQuery() {
        final SelectQuery selectQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("CustomerInfo"));
        selectQuery.addJoin(new Join("CustomerInfo", "MdPackage", new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        selectQuery.addJoin(new Join("MdPackage", "MdPackageToAppGroup", new String[] { "PACKAGE_ID" }, new String[] { "PACKAGE_ID" }, 2));
        selectQuery.addJoin(new Join("MdPackageToAppGroup", "AppGroupToCollection", new String[] { "APP_GROUP_ID" }, new String[] { "APP_GROUP_ID" }, 2));
        selectQuery.setCriteria(new Criteria(new Column("MdPackageToAppGroup", "IS_PURCHASED_FROM_PORTAL"), (Object)true, 0));
        final GroupByColumn groupByColumn1 = new GroupByColumn(new Column("AppGroupToCollection", "APP_GROUP_ID"), true);
        final GroupByColumn groupByColumn2 = new GroupByColumn(new Column("CustomerInfo", "CUSTOMER_ID"), true);
        final List<GroupByColumn> groupByColumnList = new ArrayList<GroupByColumn>();
        final Column countCol = new Column("AppGroupToCollection", "RELEASE_LABEL_ID").count();
        countCol.setColumnAlias("COUNT");
        selectQuery.addSelectColumn(countCol);
        selectQuery.addSelectColumn(new Column("AppGroupToCollection", "APP_GROUP_ID"));
        selectQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        selectQuery.addSelectColumn(countCol);
        groupByColumnList.add(groupByColumn1);
        groupByColumnList.add(groupByColumn2);
        final GroupByClause groupByClause = new GroupByClause((List)groupByColumnList, new Criteria(countCol, (Object)1, 5));
        selectQuery.setGroupByClause(groupByClause);
        final DerivedTable innerTable = new DerivedTable("innertable", (Query)selectQuery);
        final SelectQuery baseQuery = (SelectQuery)new SelectQueryImpl(Table.getTable("CustomerInfo"));
        baseQuery.addJoin(new Join(Table.getTable("CustomerInfo"), (Table)innerTable, new String[] { "CUSTOMER_ID" }, new String[] { "CUSTOMER_ID" }, 2));
        baseQuery.addSelectColumn(new Column("CustomerInfo", "CUSTOMER_ID"));
        final Column appCountCOl = new Column("CustomerInfo", "CUSTOMER_ID").count();
        appCountCOl.setColumnAlias("APP_COUNT");
        baseQuery.addSelectColumn(appCountCOl);
        return baseQuery;
    }
    
    static {
        MDMCoreQuery.logger = Logger.getLogger("MDMLogger");
        CUSTOMER_PARAMS_TRACKING_LIST = Arrays.asList("APP_RESTORE_COUNT", "APP_ADDED_AGAIN_COUNT", "DELETE_PERMANENT_COUNT", "JSON_CONFIGURED", "XML_CONFIGURED", "CONFIG_MAX_LENGTH", "selfEnrollDeviceLimit", "vppTokenMisUseCount", "bstoreSubscriptionUser", "PS_MULTI_TRACK_APPS", "PS_TWO_TRACK_APPS", "Signature_mismatch_Count");
        MDMCoreQuery.mdmCoreQuery = null;
        getInstance();
    }
}
