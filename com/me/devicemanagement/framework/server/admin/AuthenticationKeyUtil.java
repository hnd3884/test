package com.me.devicemanagement.framework.server.admin;

import java.util.List;
import java.util.ArrayList;
import com.adventnet.ds.query.SelectQuery;
import com.adventnet.persistence.DataAccess;
import com.adventnet.ds.query.Join;
import com.adventnet.ds.query.SelectQueryImpl;
import com.adventnet.ds.query.Table;
import com.me.devicemanagement.framework.server.factory.ApiFactoryProvider;
import org.apache.commons.codec.binary.Base64;
import com.adventnet.persistence.DataAccessException;
import com.me.devicemanagement.framework.server.exception.SyMException;
import com.me.devicemanagement.framework.server.logger.seconelinelogger.SecurityOneLineLogger;
import java.util.logging.Level;
import com.adventnet.persistence.Row;
import com.me.devicemanagement.framework.server.authentication.DMUserHandler;
import org.json.simple.JSONObject;
import com.me.devicemanagement.framework.server.util.SyMUtil;
import com.adventnet.ds.query.Criteria;
import com.adventnet.ds.query.Column;
import com.adventnet.persistence.DataObject;
import java.util.Properties;
import java.util.UUID;
import java.util.logging.Logger;

public class AuthenticationKeyUtil
{
    private static AuthenticationKeyUtil authenticationKeyUtil;
    private static final String APIKEY_DBSTORE_SALT = "ADAKKAMAMARARULAARIRULUYITHUVIDUM";
    private static Logger logger;
    public static final String API_SERVICE_SDP = "101";
    public static final String API_SERVICE_MDM_ADMIN_APP = "201";
    public static final String API_SERVICE_REST = "301";
    
    private AuthenticationKeyUtil() {
    }
    
    public static synchronized AuthenticationKeyUtil getInstance() {
        if (AuthenticationKeyUtil.authenticationKeyUtil == null) {
            AuthenticationKeyUtil.authenticationKeyUtil = new AuthenticationKeyUtil();
        }
        return AuthenticationKeyUtil.authenticationKeyUtil;
    }
    
    public String generateTechAPIKey() {
        return UUID.randomUUID().toString().toUpperCase();
    }
    
    public DataObject addOrUpdateAPIKey(final Properties props) throws SyMException, DataAccessException {
        DataObject techDefDO = null;
        final String login_id = props.getProperty("loginID");
        final String apiKey = props.getProperty("apiKey");
        final String scope = props.getProperty("SCOPE", "SDP-DC Integration");
        final String serviceType = props.getProperty("SERVICE_TYPE", "101");
        Criteria crit = new Criteria(Column.getColumn("APIKeyDetails", "LOGIN_ID"), (Object)Long.valueOf(login_id), 0);
        crit = crit.and(new Criteria(Column.getColumn("APIKeyDetails", "SERVICE_TYPE"), (Object)Integer.valueOf(serviceType), 0));
        techDefDO = SyMUtil.getPersistence().get("APIKeyDetails", crit);
        final JSONObject jsonObject = new JSONObject();
        final String userName = DMUserHandler.getUserName(Long.parseLong(login_id));
        if (techDefDO.isEmpty()) {
            final Row row = new Row("APIKeyDetails");
            row.set("LOGIN_ID", (Object)login_id);
            row.set("APIKEY", (Object)this.getEncryptedTechKey(apiKey, serviceType));
            row.set("CREATEDTIME", (Object)System.currentTimeMillis());
            row.set("SCOPE", (Object)scope);
            row.set("SERVICE_TYPE", (Object)serviceType);
            techDefDO.addRow(row);
            SyMUtil.getPersistence().add(techDefDO);
            jsonObject.put((Object)"REMARK", (Object)"Auth Token has been generated by ".concat(userName));
            SecurityOneLineLogger.log("DC_Integration", "DC_API_Key_Generation", jsonObject, Level.INFO);
        }
        else {
            final Row row = techDefDO.getRow("APIKeyDetails");
            row.set("APIKEY", (Object)this.getEncryptedTechKey(apiKey, serviceType));
            row.set("CREATEDTIME", (Object)System.currentTimeMillis());
            row.set("SCOPE", (Object)"SDP-DC Integration");
            row.set("SERVICE_TYPE", (Object)serviceType);
            techDefDO.updateRow(row);
            SyMUtil.getPersistence().update(techDefDO);
            jsonObject.put((Object)"REMARK", (Object)"Auth Token has been regenerated by ".concat(userName));
            SecurityOneLineLogger.log("DC_Integration", "DC_API_Key_Generation", jsonObject, Level.INFO);
        }
        return techDefDO;
    }
    
    public String getEncryptedTechKey(final String key, final String serviceType) throws SyMException {
        if (serviceType.equals("301")) {
            return Base64.encodeBase64String(key.getBytes());
        }
        return ApiFactoryProvider.getAuthKeyHandlerAPI().getEncryptedAuthToken(key, Integer.valueOf(serviceType));
    }
    
    public DataObject authenticateAPIKey(String authKey, final String serviceType) {
        DataObject keyTableDO = null;
        try {
            if (authKey == null || "".equals(authKey) || "null".equalsIgnoreCase(authKey)) {
                AuthenticationKeyUtil.logger.log(Level.INFO, "Authentication key is null or empty. Unable to authenticate.");
                return null;
            }
            authKey = this.getEncryptedTechKey(authKey, serviceType);
            keyTableDO = this.getAPIKeyLoginInfo(authKey, serviceType);
            if (keyTableDO != null && !keyTableDO.isEmpty()) {
                try {
                    final Row techRow = keyTableDO.getFirstRow("APIKeyDetails");
                    final String keyStatus = (String)techRow.get("STATUS");
                    final String authKeyInDO = (String)techRow.get("APIKEY");
                    if (keyStatus.equalsIgnoreCase("active")) {
                        final Long validity = (Long)techRow.get("VALIDITY");
                        if (validity > System.currentTimeMillis() || validity == -1L) {
                            return keyTableDO;
                        }
                    }
                    else {
                        AuthenticationKeyUtil.logger.log(Level.INFO, "Key " + authKeyInDO + " received is not active. Cannot perform operation");
                    }
                    return keyTableDO;
                }
                catch (final Exception ex) {
                    AuthenticationKeyUtil.logger.log(Level.SEVERE, "Exception when trying to get user info from DO or when updating API key info - " + ex.getMessage(), ex);
                    throw ex;
                }
            }
            AuthenticationKeyUtil.logger.log(Level.INFO, "Key not present for any user - auth fail - return false");
        }
        catch (final Exception exp) {
            AuthenticationKeyUtil.logger.log(Level.WARNING, "Exception while authenticationg user");
        }
        return keyTableDO;
    }
    
    public DataObject getAPIKeyLoginInfo(final String encryptedKey, final String serviceType) throws Exception {
        DataObject infoDO = null;
        try {
            final SelectQueryImpl sql = new SelectQueryImpl(Table.getTable("APIKeyDetails"));
            final String[] joinCol1 = { "LOGIN_ID" };
            final String[] joinCol2 = { "LOGIN_ID" };
            final Join sqlJoin = new Join("APIKeyDetails", "AaaLogin", joinCol1, joinCol2, 1);
            sql.addJoin(sqlJoin);
            sql.addSelectColumn(Column.getColumn("APIKeyDetails", "*"));
            sql.addSelectColumn(Column.getColumn("AaaLogin", "*"));
            final DataObject returnDO = DataAccess.get((SelectQuery)sql);
            final ArrayList<String> tableNames = new ArrayList<String>(2);
            tableNames.add("APIKeyDetails");
            tableNames.add("AaaLogin");
            Criteria crit = new Criteria(Column.getColumn("APIKeyDetails", "APIKEY"), (Object)encryptedKey, 0);
            crit = crit.and(new Criteria(Column.getColumn("APIKeyDetails", "SERVICE_TYPE"), (Object)serviceType, 0));
            final Row inputRow = returnDO.getRow("APIKeyDetails", crit);
            if (inputRow != null) {
                infoDO = returnDO.getDataObject((List)tableNames, inputRow);
            }
        }
        catch (final Exception e) {
            AuthenticationKeyUtil.logger.log(Level.SEVERE, "Exception when getting user info for Key", e);
            throw e;
        }
        return infoDO;
    }
    
    static {
        AuthenticationKeyUtil.authenticationKeyUtil = null;
        AuthenticationKeyUtil.logger = Logger.getLogger(AuthenticationKeyUtil.class.getName());
    }
}
