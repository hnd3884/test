package com.sun.java.swing.plaf.motif;

import javax.swing.plaf.InsetsUIResource;
import sun.swing.SwingUtilities2;
import javax.swing.border.Border;
import javax.swing.plaf.BorderUIResource;
import javax.swing.plaf.basic.BasicBorders;
import javax.swing.plaf.ColorUIResource;
import java.awt.Color;
import javax.swing.plaf.FontUIResource;
import javax.swing.UIDefaults;
import sun.awt.OSInfo;
import javax.swing.plaf.basic.BasicLookAndFeel;

public class MotifLookAndFeel extends BasicLookAndFeel
{
    @Override
    public String getName() {
        return "CDE/Motif";
    }
    
    @Override
    public String getID() {
        return "Motif";
    }
    
    @Override
    public String getDescription() {
        return "The CDE/Motif Look and Feel";
    }
    
    @Override
    public boolean isNativeLookAndFeel() {
        return OSInfo.getOSType() == OSInfo.OSType.SOLARIS;
    }
    
    @Override
    public boolean isSupportedLookAndFeel() {
        return true;
    }
    
    @Override
    protected void initSystemColorDefaults(final UIDefaults uiDefaults) {
        this.loadSystemColors(uiDefaults, new String[] { "desktop", "#005C5C", "activeCaption", "#000080", "activeCaptionText", "#FFFFFF", "activeCaptionBorder", "#B24D7A", "inactiveCaption", "#AEB2C3", "inactiveCaptionText", "#000000", "inactiveCaptionBorder", "#AEB2C3", "window", "#AEB2C3", "windowBorder", "#AEB2C3", "windowText", "#000000", "menu", "#AEB2C3", "menuText", "#000000", "text", "#FFF7E9", "textText", "#000000", "textHighlight", "#000000", "textHighlightText", "#FFF7E9", "textInactiveText", "#808080", "control", "#AEB2C3", "controlText", "#000000", "controlHighlight", "#DCDEE5", "controlLtHighlight", "#DCDEE5", "controlShadow", "#63656F", "controlLightShadow", "#9397A5", "controlDkShadow", "#000000", "scrollbar", "#AEB2C3", "info", "#FFF7E9", "infoText", "#000000" }, false);
    }
    
    @Override
    protected void initClassDefaults(final UIDefaults uiDefaults) {
        super.initClassDefaults(uiDefaults);
        final String s = "com.sun.java.swing.plaf.motif.";
        uiDefaults.putDefaults(new Object[] { "ButtonUI", s + "MotifButtonUI", "CheckBoxUI", s + "MotifCheckBoxUI", "DirectoryPaneUI", s + "MotifDirectoryPaneUI", "FileChooserUI", s + "MotifFileChooserUI", "LabelUI", s + "MotifLabelUI", "MenuBarUI", s + "MotifMenuBarUI", "MenuUI", s + "MotifMenuUI", "MenuItemUI", s + "MotifMenuItemUI", "CheckBoxMenuItemUI", s + "MotifCheckBoxMenuItemUI", "RadioButtonMenuItemUI", s + "MotifRadioButtonMenuItemUI", "RadioButtonUI", s + "MotifRadioButtonUI", "ToggleButtonUI", s + "MotifToggleButtonUI", "PopupMenuUI", s + "MotifPopupMenuUI", "ProgressBarUI", s + "MotifProgressBarUI", "ScrollBarUI", s + "MotifScrollBarUI", "ScrollPaneUI", s + "MotifScrollPaneUI", "SliderUI", s + "MotifSliderUI", "SplitPaneUI", s + "MotifSplitPaneUI", "TabbedPaneUI", s + "MotifTabbedPaneUI", "TextAreaUI", s + "MotifTextAreaUI", "TextFieldUI", s + "MotifTextFieldUI", "PasswordFieldUI", s + "MotifPasswordFieldUI", "TextPaneUI", s + "MotifTextPaneUI", "EditorPaneUI", s + "MotifEditorPaneUI", "TreeUI", s + "MotifTreeUI", "InternalFrameUI", s + "MotifInternalFrameUI", "DesktopPaneUI", s + "MotifDesktopPaneUI", "SeparatorUI", s + "MotifSeparatorUI", "PopupMenuSeparatorUI", s + "MotifPopupMenuSeparatorUI", "OptionPaneUI", s + "MotifOptionPaneUI", "ComboBoxUI", s + "MotifComboBoxUI", "DesktopIconUI", s + "MotifDesktopIconUI" });
    }
    
    private void initResourceBundle(final UIDefaults uiDefaults) {
        uiDefaults.addResourceBundle("com.sun.java.swing.plaf.motif.resources.motif");
    }
    
    @Override
    protected void initComponentDefaults(final UIDefaults uiDefaults) {
        super.initComponentDefaults(uiDefaults);
        this.initResourceBundle(uiDefaults);
        final FontUIResource fontUIResource = new FontUIResource("Dialog", 0, 12);
        final FontUIResource fontUIResource2 = new FontUIResource("Serif", 0, 12);
        final FontUIResource fontUIResource3 = new FontUIResource("SansSerif", 0, 12);
        final FontUIResource fontUIResource4 = new FontUIResource("Monospaced", 0, 12);
        final ColorUIResource colorUIResource = new ColorUIResource(Color.red);
        final ColorUIResource colorUIResource2 = new ColorUIResource(Color.black);
        final ColorUIResource colorUIResource3 = new ColorUIResource(Color.white);
        final ColorUIResource colorUIResource4 = new ColorUIResource(Color.lightGray);
        final ColorUIResource colorUIResource6;
        final ColorUIResource colorUIResource5 = colorUIResource6 = new ColorUIResource(147, 151, 165);
        final ColorUIResource colorUIResource7 = new ColorUIResource(165, 165, 165);
        final ColorUIResource colorUIResource8 = new ColorUIResource(0, 0, 0);
        final MotifBorders.BevelBorder bevelBorder = new MotifBorders.BevelBorder(false, uiDefaults.getColor("controlShadow"), uiDefaults.getColor("controlLtHighlight"));
        final MotifBorders.BevelBorder bevelBorder2 = new MotifBorders.BevelBorder(true, uiDefaults.getColor("controlShadow"), uiDefaults.getColor("controlLtHighlight"));
        final BasicBorders.MarginBorder marginBorder = new BasicBorders.MarginBorder();
        final MotifBorders.FocusBorder focusBorder = new MotifBorders.FocusBorder(uiDefaults.getColor("control"), uiDefaults.getColor("activeCaptionBorder"));
        final BorderUIResource.CompoundBorderUIResource compoundBorderUIResource = new BorderUIResource.CompoundBorderUIResource(focusBorder, bevelBorder);
        final BorderUIResource.CompoundBorderUIResource compoundBorderUIResource2 = new BorderUIResource.CompoundBorderUIResource(focusBorder, bevelBorder2);
        final BorderUIResource.CompoundBorderUIResource compoundBorderUIResource3 = new BorderUIResource.CompoundBorderUIResource(new MotifBorders.ButtonBorder(uiDefaults.getColor("Button.shadow"), uiDefaults.getColor("Button.highlight"), uiDefaults.getColor("Button.darkShadow"), uiDefaults.getColor("activeCaptionBorder")), marginBorder);
        final BorderUIResource.CompoundBorderUIResource compoundBorderUIResource4 = new BorderUIResource.CompoundBorderUIResource(new MotifBorders.ToggleButtonBorder(uiDefaults.getColor("ToggleButton.shadow"), uiDefaults.getColor("ToggleButton.highlight"), uiDefaults.getColor("ToggleButton.darkShadow"), uiDefaults.getColor("activeCaptionBorder")), marginBorder);
        final BorderUIResource.CompoundBorderUIResource compoundBorderUIResource5 = new BorderUIResource.CompoundBorderUIResource(compoundBorderUIResource, marginBorder);
        final BorderUIResource.CompoundBorderUIResource compoundBorderUIResource6 = new BorderUIResource.CompoundBorderUIResource(bevelBorder2, new MotifBorders.MotifPopupMenuBorder(uiDefaults.getFont("PopupMenu.font"), uiDefaults.getColor("PopupMenu.background"), uiDefaults.getColor("PopupMenu.foreground"), uiDefaults.getColor("controlShadow"), uiDefaults.getColor("controlLtHighlight")));
        final UIDefaults.LazyValue lazyValue = new UIDefaults.LazyValue() {
            @Override
            public Object createValue(final UIDefaults uiDefaults) {
                return MotifIconFactory.getMenuItemCheckIcon();
            }
        };
        final UIDefaults.LazyValue lazyValue2 = new UIDefaults.LazyValue() {
            @Override
            public Object createValue(final UIDefaults uiDefaults) {
                return MotifIconFactory.getMenuItemArrowIcon();
            }
        };
        final UIDefaults.LazyValue lazyValue3 = new UIDefaults.LazyValue() {
            @Override
            public Object createValue(final UIDefaults uiDefaults) {
                return MotifIconFactory.getMenuArrowIcon();
            }
        };
        final UIDefaults.LazyValue lazyValue4 = new UIDefaults.LazyValue() {
            @Override
            public Object createValue(final UIDefaults uiDefaults) {
                return MotifIconFactory.getCheckBoxIcon();
            }
        };
        final UIDefaults.LazyValue lazyValue5 = new UIDefaults.LazyValue() {
            @Override
            public Object createValue(final UIDefaults uiDefaults) {
                return MotifIconFactory.getRadioButtonIcon();
            }
        };
        final UIDefaults.LazyValue lazyValue6 = new UIDefaults.LazyValue() {
            @Override
            public Object createValue(final UIDefaults uiDefaults) {
                final Color color = uiDefaults.getColor("control");
                return new ColorUIResource(Math.max((int)(color.getRed() * 0.85), 0), Math.max((int)(color.getGreen() * 0.85), 0), Math.max((int)(color.getBlue() * 0.85), 0));
            }
        };
        final UIDefaults.LazyValue lazyValue7 = new UIDefaults.LazyValue() {
            @Override
            public Object createValue(final UIDefaults uiDefaults) {
                final Color color = uiDefaults.getColor("controlText");
                return new ColorUIResource(Math.max((int)(color.getRed() * 0.85), 0), Math.max((int)(color.getGreen() * 0.85), 0), Math.max((int)(color.getBlue() * 0.85), 0));
            }
        };
        final UIDefaults.LazyValue lazyValue8 = new UIDefaults.LazyValue() {
            @Override
            public Object createValue(final UIDefaults uiDefaults) {
                final Color color = uiDefaults.getColor("control");
                return new ColorUIResource(new Color(Math.max((int)(color.getRed() * 0.85), 0), Math.max((int)(color.getGreen() * 0.85), 0), Math.max((int)(color.getBlue() * 0.85), 0)).darker());
            }
        };
        final UIDefaults.LazyValue lazyValue9 = new UIDefaults.LazyValue() {
            @Override
            public Object createValue(final UIDefaults uiDefaults) {
                final Color color = uiDefaults.getColor("control");
                return new ColorUIResource(new Color(Math.max((int)(color.getRed() * 0.85), 0), Math.max((int)(color.getGreen() * 0.85), 0), Math.max((int)(color.getBlue() * 0.85), 0)).brighter());
            }
        };
        final UIDefaults.LazyInputMap lazyInputMap = new UIDefaults.LazyInputMap(new Object[] { "COPY", "copy-to-clipboard", "PASTE", "paste-from-clipboard", "CUT", "cut-to-clipboard", "control INSERT", "copy-to-clipboard", "shift INSERT", "paste-from-clipboard", "shift DELETE", "cut-to-clipboard", "control F", "caret-forward", "control B", "caret-backward", "control D", "delete-next", "BACK_SPACE", "delete-previous", "shift BACK_SPACE", "delete-previous", "ctrl H", "delete-previous", "DELETE", "delete-next", "ctrl DELETE", "delete-next-word", "ctrl BACK_SPACE", "delete-previous-word", "RIGHT", "caret-forward", "LEFT", "caret-backward", "KP_RIGHT", "caret-forward", "KP_LEFT", "caret-backward", "shift LEFT", "selection-backward", "shift RIGHT", "selection-forward", "control LEFT", "caret-previous-word", "control RIGHT", "caret-next-word", "control shift LEFT", "selection-previous-word", "control shift RIGHT", "selection-next-word", "control SLASH", "select-all", "HOME", "caret-begin-line", "END", "caret-end-line", "shift HOME", "selection-begin-line", "shift END", "selection-end-line", "control BACK_SLASH", "unselect", "ENTER", "notify-field-accept", "control shift O", "toggle-componentOrientation" });
        final UIDefaults.LazyInputMap lazyInputMap2 = new UIDefaults.LazyInputMap(new Object[] { "COPY", "copy-to-clipboard", "PASTE", "paste-from-clipboard", "CUT", "cut-to-clipboard", "control INSERT", "copy-to-clipboard", "shift INSERT", "paste-from-clipboard", "shift DELETE", "cut-to-clipboard", "control F", "caret-forward", "control B", "caret-backward", "control D", "delete-next", "BACK_SPACE", "delete-previous", "shift BACK_SPACE", "delete-previous", "ctrl H", "delete-previous", "DELETE", "delete-next", "RIGHT", "caret-forward", "LEFT", "caret-backward", "KP_RIGHT", "caret-forward", "KP_LEFT", "caret-backward", "shift LEFT", "selection-backward", "shift RIGHT", "selection-forward", "control LEFT", "caret-begin-line", "control RIGHT", "caret-end-line", "control shift LEFT", "selection-begin-line", "control shift RIGHT", "selection-end-line", "control SLASH", "select-all", "HOME", "caret-begin-line", "END", "caret-end-line", "shift HOME", "selection-begin-line", "shift END", "selection-end-line", "control BACK_SLASH", "unselect", "ENTER", "notify-field-accept", "control shift O", "toggle-componentOrientation" });
        final UIDefaults.LazyInputMap lazyInputMap3 = new UIDefaults.LazyInputMap(new Object[] { "COPY", "copy-to-clipboard", "PASTE", "paste-from-clipboard", "CUT", "cut-to-clipboard", "control INSERT", "copy-to-clipboard", "shift INSERT", "paste-from-clipboard", "shift DELETE", "cut-to-clipboard", "control F", "caret-forward", "control B", "caret-backward", "control D", "delete-next", "BACK_SPACE", "delete-previous", "shift BACK_SPACE", "delete-previous", "ctrl H", "delete-previous", "DELETE", "delete-next", "ctrl DELETE", "delete-next-word", "ctrl BACK_SPACE", "delete-previous-word", "RIGHT", "caret-forward", "LEFT", "caret-backward", "KP_RIGHT", "caret-forward", "KP_LEFT", "caret-backward", "shift LEFT", "selection-backward", "shift RIGHT", "selection-forward", "control LEFT", "caret-previous-word", "control RIGHT", "caret-next-word", "control shift LEFT", "selection-previous-word", "control shift RIGHT", "selection-next-word", "control SLASH", "select-all", "HOME", "caret-begin-line", "END", "caret-end-line", "shift HOME", "selection-begin-line", "shift END", "selection-end-line", "control N", "caret-down", "control P", "caret-up", "UP", "caret-up", "DOWN", "caret-down", "PAGE_UP", "page-up", "PAGE_DOWN", "page-down", "shift PAGE_UP", "selection-page-up", "shift PAGE_DOWN", "selection-page-down", "ctrl shift PAGE_UP", "selection-page-left", "ctrl shift PAGE_DOWN", "selection-page-right", "shift UP", "selection-up", "shift DOWN", "selection-down", "ENTER", "insert-break", "TAB", "insert-tab", "control BACK_SLASH", "unselect", "control HOME", "caret-begin", "control END", "caret-end", "control shift HOME", "selection-begin", "control shift END", "selection-end", "control T", "next-link-action", "control shift T", "previous-link-action", "control SPACE", "activate-link-action", "control shift O", "toggle-componentOrientation" });
        final Object icon = SwingUtilities2.makeIcon(this.getClass(), MotifLookAndFeel.class, "icons/TreeOpen.gif");
        final Object icon2 = SwingUtilities2.makeIcon(this.getClass(), MotifLookAndFeel.class, "icons/TreeClosed.gif");
        final UIDefaults.LazyValue lazyValue10 = new UIDefaults.LazyValue() {
            @Override
            public Object createValue(final UIDefaults uiDefaults) {
                return MotifTreeCellRenderer.loadLeafIcon();
            }
        };
        final UIDefaults.LazyValue lazyValue11 = new UIDefaults.LazyValue() {
            @Override
            public Object createValue(final UIDefaults uiDefaults) {
                return MotifTreeUI.MotifExpandedIcon.createExpandedIcon();
            }
        };
        final UIDefaults.LazyValue lazyValue12 = new UIDefaults.LazyValue() {
            @Override
            public Object createValue(final UIDefaults uiDefaults) {
                return MotifTreeUI.MotifCollapsedIcon.createCollapsedIcon();
            }
        };
        final MotifBorders.MenuBarBorder menuBarBorder = new MotifBorders.MenuBarBorder(uiDefaults.getColor("MenuBar.shadow"), uiDefaults.getColor("MenuBar.highlight"), uiDefaults.getColor("MenuBar.darkShadow"), uiDefaults.getColor("activeCaptionBorder"));
        final BorderUIResource.CompoundBorderUIResource compoundBorderUIResource7 = new BorderUIResource.CompoundBorderUIResource(bevelBorder, marginBorder);
        final BorderUIResource.LineBorderUIResource lineBorderUIResource = new BorderUIResource.LineBorderUIResource(uiDefaults.getColor("activeCaptionBorder"));
        uiDefaults.putDefaults(new Object[] { "Desktop.background", uiDefaults.get("desktop"), "Desktop.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[] { "ctrl F5", "restore", "ctrl F4", "close", "ctrl F7", "move", "ctrl F8", "resize", "RIGHT", "right", "KP_RIGHT", "right", "shift RIGHT", "shrinkRight", "shift KP_RIGHT", "shrinkRight", "LEFT", "left", "KP_LEFT", "left", "shift LEFT", "shrinkLeft", "shift KP_LEFT", "shrinkLeft", "UP", "up", "KP_UP", "up", "shift UP", "shrinkUp", "shift KP_UP", "shrinkUp", "DOWN", "down", "KP_DOWN", "down", "shift DOWN", "shrinkDown", "shift KP_DOWN", "shrinkDown", "ESCAPE", "escape", "ctrl F9", "minimize", "ctrl F10", "maximize", "ctrl F6", "selectNextFrame", "ctrl TAB", "selectNextFrame", "ctrl alt F6", "selectNextFrame", "shift ctrl alt F6", "selectPreviousFrame", "ctrl F12", "navigateNext", "shift ctrl F12", "navigatePrevious" }), "Panel.background", uiDefaults.get("control"), "Panel.foreground", uiDefaults.get("textText"), "Panel.font", fontUIResource, "ProgressBar.font", fontUIResource, "ProgressBar.foreground", colorUIResource5, "ProgressBar.background", uiDefaults.get("control"), "ProgressBar.selectionForeground", uiDefaults.get("control"), "ProgressBar.selectionBackground", uiDefaults.get("controlText"), "ProgressBar.border", bevelBorder, "ProgressBar.cellLength", new Integer(6), "ProgressBar.cellSpacing", 0, "Button.margin", new InsetsUIResource(2, 4, 2, 4), "Button.border", compoundBorderUIResource3, "Button.background", uiDefaults.get("control"), "Button.foreground", uiDefaults.get("controlText"), "Button.select", uiDefaults.get("controlLightShadow"), "Button.font", fontUIResource, "Button.focusInputMap", new UIDefaults.LazyInputMap(new Object[] { "SPACE", "pressed", "released SPACE", "released" }), "CheckBox.textIconGap", new Integer(8), "CheckBox.margin", new InsetsUIResource(4, 2, 4, 2), "CheckBox.icon", lazyValue4, "CheckBox.focus", uiDefaults.get("activeCaptionBorder"), "CheckBox.focusInputMap", new UIDefaults.LazyInputMap(new Object[] { "SPACE", "pressed", "released SPACE", "released" }), "RadioButton.margin", new InsetsUIResource(4, 2, 4, 2), "RadioButton.textIconGap", new Integer(8), "RadioButton.background", uiDefaults.get("control"), "RadioButton.foreground", uiDefaults.get("controlText"), "RadioButton.icon", lazyValue5, "RadioButton.focus", uiDefaults.get("activeCaptionBorder"), "RadioButton.icon", lazyValue5, "RadioButton.focusInputMap", new UIDefaults.LazyInputMap(new Object[] { "SPACE", "pressed", "released SPACE", "released" }), "ToggleButton.border", compoundBorderUIResource4, "ToggleButton.background", uiDefaults.get("control"), "ToggleButton.foreground", uiDefaults.get("controlText"), "ToggleButton.focus", uiDefaults.get("controlText"), "ToggleButton.select", uiDefaults.get("controlLightShadow"), "ToggleButton.focusInputMap", new UIDefaults.LazyInputMap(new Object[] { "SPACE", "pressed", "released SPACE", "released" }), "Menu.border", compoundBorderUIResource7, "Menu.font", fontUIResource, "Menu.acceleratorFont", fontUIResource, "Menu.acceleratorSelectionForeground", colorUIResource8, "Menu.foreground", uiDefaults.get("menuText"), "Menu.background", uiDefaults.get("menu"), "Menu.selectionForeground", colorUIResource8, "Menu.selectionBackground", colorUIResource7, "Menu.checkIcon", lazyValue, "Menu.arrowIcon", lazyValue3, "Menu.menuPopupOffsetX", new Integer(0), "Menu.menuPopupOffsetY", new Integer(0), "Menu.submenuPopupOffsetX", new Integer(-2), "Menu.submenuPopupOffsetY", new Integer(3), "Menu.shortcutKeys", { SwingUtilities2.getSystemMnemonicKeyMask(), 4 }, "Menu.cancelMode", "hideMenuTree", "MenuBar.border", menuBarBorder, "MenuBar.background", uiDefaults.get("menu"), "MenuBar.foreground", uiDefaults.get("menuText"), "MenuBar.font", fontUIResource, "MenuBar.windowBindings", { "F10", "takeFocus" }, "MenuItem.border", compoundBorderUIResource7, "MenuItem.font", fontUIResource, "MenuItem.acceleratorFont", fontUIResource, "MenuItem.acceleratorSelectionForeground", colorUIResource8, "MenuItem.foreground", uiDefaults.get("menuText"), "MenuItem.background", uiDefaults.get("menu"), "MenuItem.selectionForeground", colorUIResource8, "MenuItem.selectionBackground", colorUIResource7, "MenuItem.checkIcon", lazyValue, "MenuItem.arrowIcon", lazyValue2, "RadioButtonMenuItem.border", compoundBorderUIResource7, "RadioButtonMenuItem.font", fontUIResource, "RadioButtonMenuItem.acceleratorFont", fontUIResource, "RadioButtonMenuItem.acceleratorSelectionForeground", colorUIResource8, "RadioButtonMenuItem.foreground", uiDefaults.get("menuText"), "RadioButtonMenuItem.background", uiDefaults.get("menu"), "RadioButtonMenuItem.selectionForeground", colorUIResource8, "RadioButtonMenuItem.selectionBackground", colorUIResource7, "RadioButtonMenuItem.checkIcon", lazyValue5, "RadioButtonMenuItem.arrowIcon", lazyValue2, "CheckBoxMenuItem.border", compoundBorderUIResource7, "CheckBoxMenuItem.font", fontUIResource, "CheckBoxMenuItem.acceleratorFont", fontUIResource, "CheckBoxMenuItem.acceleratorSelectionForeground", colorUIResource8, "CheckBoxMenuItem.foreground", uiDefaults.get("menuText"), "CheckBoxMenuItem.background", uiDefaults.get("menu"), "CheckBoxMenuItem.selectionForeground", colorUIResource8, "CheckBoxMenuItem.selectionBackground", colorUIResource7, "CheckBoxMenuItem.checkIcon", lazyValue4, "CheckBoxMenuItem.arrowIcon", lazyValue2, "PopupMenu.background", uiDefaults.get("menu"), "PopupMenu.border", compoundBorderUIResource6, "PopupMenu.foreground", uiDefaults.get("menuText"), "PopupMenu.font", fontUIResource, "PopupMenu.consumeEventOnClose", Boolean.TRUE, "Label.font", fontUIResource, "Label.background", uiDefaults.get("control"), "Label.foreground", uiDefaults.get("controlText"), "Separator.shadow", uiDefaults.get("controlShadow"), "Separator.highlight", uiDefaults.get("controlLtHighlight"), "Separator.background", uiDefaults.get("controlLtHighlight"), "Separator.foreground", uiDefaults.get("controlShadow"), "List.focusCellHighlightBorder", lineBorderUIResource, "List.focusInputMap", new UIDefaults.LazyInputMap(new Object[] { "COPY", "copy", "PASTE", "paste", "CUT", "cut", "control INSERT", "copy", "shift INSERT", "paste", "shift DELETE", "cut", "UP", "selectPreviousRow", "KP_UP", "selectPreviousRow", "shift UP", "selectPreviousRowExtendSelection", "shift KP_UP", "selectPreviousRowExtendSelection", "ctrl shift UP", "selectPreviousRowExtendSelection", "ctrl shift KP_UP", "selectPreviousRowExtendSelection", "ctrl UP", "selectPreviousRowChangeLead", "ctrl KP_UP", "selectPreviousRowChangeLead", "DOWN", "selectNextRow", "KP_DOWN", "selectNextRow", "shift DOWN", "selectNextRowExtendSelection", "shift KP_DOWN", "selectNextRowExtendSelection", "ctrl shift DOWN", "selectNextRowExtendSelection", "ctrl shift KP_DOWN", "selectNextRowExtendSelection", "ctrl DOWN", "selectNextRowChangeLead", "ctrl KP_DOWN", "selectNextRowChangeLead", "LEFT", "selectPreviousColumn", "KP_LEFT", "selectPreviousColumn", "shift LEFT", "selectPreviousColumnExtendSelection", "shift KP_LEFT", "selectPreviousColumnExtendSelection", "ctrl shift LEFT", "selectPreviousColumnExtendSelection", "ctrl shift KP_LEFT", "selectPreviousColumnExtendSelection", "ctrl LEFT", "selectPreviousColumnChangeLead", "ctrl KP_LEFT", "selectPreviousColumnChangeLead", "RIGHT", "selectNextColumn", "KP_RIGHT", "selectNextColumn", "shift RIGHT", "selectNextColumnExtendSelection", "shift KP_RIGHT", "selectNextColumnExtendSelection", "ctrl shift RIGHT", "selectNextColumnExtendSelection", "ctrl shift KP_RIGHT", "selectNextColumnExtendSelection", "ctrl RIGHT", "selectNextColumnChangeLead", "ctrl KP_RIGHT", "selectNextColumnChangeLead", "HOME", "selectFirstRow", "shift HOME", "selectFirstRowExtendSelection", "ctrl shift HOME", "selectFirstRowExtendSelection", "ctrl HOME", "selectFirstRowChangeLead", "END", "selectLastRow", "shift END", "selectLastRowExtendSelection", "ctrl shift END", "selectLastRowExtendSelection", "ctrl END", "selectLastRowChangeLead", "PAGE_UP", "scrollUp", "shift PAGE_UP", "scrollUpExtendSelection", "ctrl shift PAGE_UP", "scrollUpExtendSelection", "ctrl PAGE_UP", "scrollUpChangeLead", "PAGE_DOWN", "scrollDown", "shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl PAGE_DOWN", "scrollDownChangeLead", "ctrl A", "selectAll", "ctrl SLASH", "selectAll", "ctrl BACK_SLASH", "clearSelection", "SPACE", "addToSelection", "ctrl SPACE", "toggleAndAnchor", "shift SPACE", "extendTo", "ctrl shift SPACE", "moveSelectionTo" }), "DesktopIcon.icon", SwingUtilities2.makeIcon(this.getClass(), MotifLookAndFeel.class, "icons/DesktopIcon.gif"), "DesktopIcon.border", null, "DesktopIcon.windowBindings", { "ESCAPE", "hideSystemMenu" }, "InternalFrame.activeTitleBackground", uiDefaults.get("activeCaptionBorder"), "InternalFrame.inactiveTitleBackground", uiDefaults.get("inactiveCaptionBorder"), "InternalFrame.windowBindings", { "shift ESCAPE", "showSystemMenu", "ctrl SPACE", "showSystemMenu", "ESCAPE", "hideSystemMenu" }, "ScrollBar.background", colorUIResource6, "ScrollBar.foreground", uiDefaults.get("control"), "ScrollBar.track", colorUIResource6, "ScrollBar.trackHighlight", uiDefaults.get("controlDkShadow"), "ScrollBar.thumb", uiDefaults.get("control"), "ScrollBar.thumbHighlight", uiDefaults.get("controlHighlight"), "ScrollBar.thumbDarkShadow", uiDefaults.get("controlDkShadow"), "ScrollBar.thumbShadow", uiDefaults.get("controlShadow"), "ScrollBar.border", bevelBorder, "ScrollBar.allowsAbsolutePositioning", Boolean.TRUE, "ScrollBar.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[] { "RIGHT", "positiveUnitIncrement", "KP_RIGHT", "positiveUnitIncrement", "DOWN", "positiveUnitIncrement", "KP_DOWN", "positiveUnitIncrement", "PAGE_DOWN", "positiveBlockIncrement", "ctrl PAGE_DOWN", "positiveBlockIncrement", "LEFT", "negativeUnitIncrement", "KP_LEFT", "negativeUnitIncrement", "UP", "negativeUnitIncrement", "KP_UP", "negativeUnitIncrement", "PAGE_UP", "negativeBlockIncrement", "ctrl PAGE_UP", "negativeBlockIncrement", "HOME", "minScroll", "END", "maxScroll" }), "ScrollPane.font", fontUIResource, "ScrollPane.background", uiDefaults.get("control"), "ScrollPane.foreground", uiDefaults.get("controlText"), "ScrollPane.border", null, "ScrollPane.viewportBorder", bevelBorder, "ScrollPane.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[] { "RIGHT", "unitScrollRight", "KP_RIGHT", "unitScrollRight", "DOWN", "unitScrollDown", "KP_DOWN", "unitScrollDown", "LEFT", "unitScrollLeft", "KP_LEFT", "unitScrollLeft", "UP", "unitScrollUp", "KP_UP", "unitScrollUp", "PAGE_UP", "scrollUp", "PAGE_DOWN", "scrollDown", "ctrl PAGE_UP", "scrollLeft", "ctrl PAGE_DOWN", "scrollRight", "ctrl HOME", "scrollHome", "ctrl END", "scrollEnd" }), "Slider.font", fontUIResource, "Slider.border", compoundBorderUIResource, "Slider.foreground", uiDefaults.get("control"), "Slider.background", colorUIResource5, "Slider.highlight", uiDefaults.get("controlHighlight"), "Slider.shadow", uiDefaults.get("controlShadow"), "Slider.focus", uiDefaults.get("controlDkShadow"), "Slider.focusInsets", new InsetsUIResource(0, 0, 0, 0), "Slider.focusInputMap", new UIDefaults.LazyInputMap(new Object[] { "RIGHT", "positiveUnitIncrement", "KP_RIGHT", "positiveUnitIncrement", "DOWN", "negativeUnitIncrement", "KP_DOWN", "negativeUnitIncrement", "ctrl PAGE_DOWN", "negativeBlockIncrement", "LEFT", "negativeUnitIncrement", "KP_LEFT", "negativeUnitIncrement", "UP", "positiveUnitIncrement", "KP_UP", "positiveUnitIncrement", "ctrl PAGE_UP", "positiveBlockIncrement", "HOME", "minScroll", "END", "maxScroll" }), "Spinner.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[] { "UP", "increment", "KP_UP", "increment", "DOWN", "decrement", "KP_DOWN", "decrement" }), "Spinner.border", compoundBorderUIResource5, "SplitPane.background", uiDefaults.get("control"), "SplitPane.highlight", uiDefaults.get("controlHighlight"), "SplitPane.shadow", uiDefaults.get("controlShadow"), "SplitPane.dividerSize", 20, "SplitPane.activeThumb", uiDefaults.get("activeCaptionBorder"), "SplitPane.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[] { "UP", "negativeIncrement", "DOWN", "positiveIncrement", "LEFT", "negativeIncrement", "RIGHT", "positiveIncrement", "KP_UP", "negativeIncrement", "KP_DOWN", "positiveIncrement", "KP_LEFT", "negativeIncrement", "KP_RIGHT", "positiveIncrement", "HOME", "selectMin", "END", "selectMax", "F8", "startResize", "F6", "toggleFocus", "ctrl TAB", "focusOutForward", "ctrl shift TAB", "focusOutBackward" }), "TabbedPane.font", fontUIResource, "TabbedPane.background", uiDefaults.get("control"), "TabbedPane.foreground", uiDefaults.get("controlText"), "TabbedPane.light", uiDefaults.get("controlHighlight"), "TabbedPane.highlight", uiDefaults.get("controlLtHighlight"), "TabbedPane.shadow", uiDefaults.get("controlShadow"), "TabbedPane.darkShadow", uiDefaults.get("controlShadow"), "TabbedPane.unselectedTabBackground", lazyValue6, "TabbedPane.unselectedTabForeground", lazyValue7, "TabbedPane.unselectedTabHighlight", lazyValue9, "TabbedPane.unselectedTabShadow", lazyValue8, "TabbedPane.focus", uiDefaults.get("activeCaptionBorder"), "TabbedPane.tabInsets", new InsetsUIResource(3, 4, 3, 4), "TabbedPane.selectedTabPadInsets", new InsetsUIResource(3, 0, 1, 0), "TabbedPane.tabAreaInsets", new InsetsUIResource(4, 2, 0, 8), "TabbedPane.contentBorderInsets", new InsetsUIResource(2, 2, 2, 2), "TabbedPane.focusInputMap", new UIDefaults.LazyInputMap(new Object[] { "RIGHT", "navigateRight", "KP_RIGHT", "navigateRight", "LEFT", "navigateLeft", "KP_LEFT", "navigateLeft", "UP", "navigateUp", "KP_UP", "navigateUp", "DOWN", "navigateDown", "KP_DOWN", "navigateDown", "ctrl DOWN", "requestFocusForVisibleComponent", "ctrl KP_DOWN", "requestFocusForVisibleComponent" }), "TabbedPane.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[] { "ctrl PAGE_DOWN", "navigatePageDown", "ctrl PAGE_UP", "navigatePageUp", "ctrl UP", "requestFocus", "ctrl KP_UP", "requestFocus" }), "Tree.background", colorUIResource5, "Tree.hash", uiDefaults.get("controlDkShadow"), "Tree.iconShadow", uiDefaults.get("controlShadow"), "Tree.iconHighlight", uiDefaults.get("controlHighlight"), "Tree.iconBackground", uiDefaults.get("control"), "Tree.iconForeground", uiDefaults.get("controlShadow"), "Tree.textBackground", colorUIResource5, "Tree.textForeground", uiDefaults.get("textText"), "Tree.selectionBackground", uiDefaults.get("text"), "Tree.selectionForeground", uiDefaults.get("textText"), "Tree.selectionBorderColor", uiDefaults.get("activeCaptionBorder"), "Tree.openIcon", icon, "Tree.closedIcon", icon2, "Tree.leafIcon", lazyValue10, "Tree.expandedIcon", lazyValue11, "Tree.collapsedIcon", lazyValue12, "Tree.editorBorder", focusBorder, "Tree.editorBorderSelectionColor", uiDefaults.get("activeCaptionBorder"), "Tree.rowHeight", new Integer(18), "Tree.drawsFocusBorderAroundIcon", Boolean.TRUE, "Tree.focusInputMap", new UIDefaults.LazyInputMap(new Object[] { "COPY", "copy", "PASTE", "paste", "CUT", "cut", "control INSERT", "copy", "shift INSERT", "paste", "shift DELETE", "cut", "UP", "selectPrevious", "KP_UP", "selectPrevious", "shift UP", "selectPreviousExtendSelection", "shift KP_UP", "selectPreviousExtendSelection", "ctrl shift UP", "selectPreviousExtendSelection", "ctrl shift KP_UP", "selectPreviousExtendSelection", "ctrl UP", "selectPreviousChangeLead", "ctrl KP_UP", "selectPreviousChangeLead", "DOWN", "selectNext", "KP_DOWN", "selectNext", "shift DOWN", "selectNextExtendSelection", "shift KP_DOWN", "selectNextExtendSelection", "ctrl shift DOWN", "selectNextExtendSelection", "ctrl shift KP_DOWN", "selectNextExtendSelection", "ctrl DOWN", "selectNextChangeLead", "ctrl KP_DOWN", "selectNextChangeLead", "RIGHT", "selectChild", "KP_RIGHT", "selectChild", "LEFT", "selectParent", "KP_LEFT", "selectParent", "PAGE_UP", "scrollUpChangeSelection", "shift PAGE_UP", "scrollUpExtendSelection", "ctrl shift PAGE_UP", "scrollUpExtendSelection", "ctrl PAGE_UP", "scrollUpChangeLead", "PAGE_DOWN", "scrollDownChangeSelection", "shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl PAGE_DOWN", "scrollDownChangeLead", "HOME", "selectFirst", "shift HOME", "selectFirstExtendSelection", "ctrl shift HOME", "selectFirstExtendSelection", "ctrl HOME", "selectFirstChangeLead", "END", "selectLast", "shift END", "selectLastExtendSelection", "ctrl shift END", "selectLastExtendSelection", "ctrl END", "selectLastChangeLead", "F2", "startEditing", "ctrl A", "selectAll", "ctrl SLASH", "selectAll", "ctrl BACK_SLASH", "clearSelection", "ctrl LEFT", "scrollLeft", "ctrl KP_LEFT", "scrollLeft", "ctrl RIGHT", "scrollRight", "ctrl KP_RIGHT", "scrollRight", "SPACE", "addToSelection", "ctrl SPACE", "toggleAndAnchor", "shift SPACE", "extendTo", "ctrl shift SPACE", "moveSelectionTo" }), "Tree.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[] { "ESCAPE", "cancel" }), "Table.focusCellHighlightBorder", lineBorderUIResource, "Table.scrollPaneBorder", null, "Table.dropLineShortColor", uiDefaults.get("activeCaptionBorder"), "Table.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[] { "COPY", "copy", "PASTE", "paste", "CUT", "cut", "control INSERT", "copy", "shift INSERT", "paste", "shift DELETE", "cut", "RIGHT", "selectNextColumn", "KP_RIGHT", "selectNextColumn", "shift RIGHT", "selectNextColumnExtendSelection", "shift KP_RIGHT", "selectNextColumnExtendSelection", "ctrl shift RIGHT", "selectNextColumnExtendSelection", "ctrl shift KP_RIGHT", "selectNextColumnExtendSelection", "ctrl RIGHT", "selectNextColumnChangeLead", "ctrl KP_RIGHT", "selectNextColumnChangeLead", "LEFT", "selectPreviousColumn", "KP_LEFT", "selectPreviousColumn", "shift LEFT", "selectPreviousColumnExtendSelection", "shift KP_LEFT", "selectPreviousColumnExtendSelection", "ctrl shift LEFT", "selectPreviousColumnExtendSelection", "ctrl shift KP_LEFT", "selectPreviousColumnExtendSelection", "ctrl LEFT", "selectPreviousColumnChangeLead", "ctrl KP_LEFT", "selectPreviousColumnChangeLead", "DOWN", "selectNextRow", "KP_DOWN", "selectNextRow", "shift DOWN", "selectNextRowExtendSelection", "shift KP_DOWN", "selectNextRowExtendSelection", "ctrl shift DOWN", "selectNextRowExtendSelection", "ctrl shift KP_DOWN", "selectNextRowExtendSelection", "ctrl DOWN", "selectNextRowChangeLead", "ctrl KP_DOWN", "selectNextRowChangeLead", "UP", "selectPreviousRow", "KP_UP", "selectPreviousRow", "shift UP", "selectPreviousRowExtendSelection", "shift KP_UP", "selectPreviousRowExtendSelection", "ctrl shift UP", "selectPreviousRowExtendSelection", "ctrl shift KP_UP", "selectPreviousRowExtendSelection", "ctrl UP", "selectPreviousRowChangeLead", "ctrl KP_UP", "selectPreviousRowChangeLead", "HOME", "selectFirstColumn", "shift HOME", "selectFirstColumnExtendSelection", "ctrl shift HOME", "selectFirstRowExtendSelection", "ctrl HOME", "selectFirstRow", "END", "selectLastColumn", "shift END", "selectLastColumnExtendSelection", "ctrl shift END", "selectLastRowExtendSelection", "ctrl END", "selectLastRow", "PAGE_UP", "scrollUpChangeSelection", "shift PAGE_UP", "scrollUpExtendSelection", "ctrl shift PAGE_UP", "scrollLeftExtendSelection", "ctrl PAGE_UP", "scrollLeftChangeSelection", "PAGE_DOWN", "scrollDownChangeSelection", "shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl shift PAGE_DOWN", "scrollRightExtendSelection", "ctrl PAGE_DOWN", "scrollRightChangeSelection", "TAB", "selectNextColumnCell", "shift TAB", "selectPreviousColumnCell", "ENTER", "selectNextRowCell", "shift ENTER", "selectPreviousRowCell", "ctrl A", "selectAll", "ctrl SLASH", "selectAll", "ctrl BACK_SLASH", "clearSelection", "ESCAPE", "cancel", "F2", "startEditing", "SPACE", "addToSelection", "ctrl SPACE", "toggleAndAnchor", "shift SPACE", "extendTo", "ctrl shift SPACE", "moveSelectionTo", "F8", "focusHeader" }), "FormattedTextField.focusInputMap", new UIDefaults.LazyInputMap(new Object[] { "ctrl C", "copy-to-clipboard", "ctrl V", "paste-from-clipboard", "ctrl X", "cut-to-clipboard", "COPY", "copy-to-clipboard", "PASTE", "paste-from-clipboard", "CUT", "cut-to-clipboard", "shift LEFT", "selection-backward", "shift KP_LEFT", "selection-backward", "shift RIGHT", "selection-forward", "shift KP_RIGHT", "selection-forward", "ctrl LEFT", "caret-previous-word", "ctrl KP_LEFT", "caret-previous-word", "ctrl RIGHT", "caret-next-word", "ctrl KP_RIGHT", "caret-next-word", "ctrl shift LEFT", "selection-previous-word", "ctrl shift KP_LEFT", "selection-previous-word", "ctrl shift RIGHT", "selection-next-word", "ctrl shift KP_RIGHT", "selection-next-word", "ctrl A", "select-all", "HOME", "caret-begin-line", "END", "caret-end-line", "shift HOME", "selection-begin-line", "shift END", "selection-end-line", "BACK_SPACE", "delete-previous", "shift BACK_SPACE", "delete-previous", "ctrl H", "delete-previous", "DELETE", "delete-next", "ctrl DELETE", "delete-next-word", "ctrl BACK_SPACE", "delete-previous-word", "RIGHT", "caret-forward", "LEFT", "caret-backward", "KP_RIGHT", "caret-forward", "KP_LEFT", "caret-backward", "ENTER", "notify-field-accept", "ctrl BACK_SLASH", "unselect", "control shift O", "toggle-componentOrientation", "ESCAPE", "reset-field-edit", "UP", "increment", "KP_UP", "increment", "DOWN", "decrement", "KP_DOWN", "decrement" }), "ToolBar.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[] { "UP", "navigateUp", "KP_UP", "navigateUp", "DOWN", "navigateDown", "KP_DOWN", "navigateDown", "LEFT", "navigateLeft", "KP_LEFT", "navigateLeft", "RIGHT", "navigateRight", "KP_RIGHT", "navigateRight" }), "ComboBox.control", uiDefaults.get("control"), "ComboBox.controlForeground", colorUIResource2, "ComboBox.background", uiDefaults.get("window"), "ComboBox.foreground", colorUIResource2, "ComboBox.border", compoundBorderUIResource2, "ComboBox.selectionBackground", colorUIResource2, "ComboBox.selectionForeground", uiDefaults.get("text"), "ComboBox.disabledBackground", uiDefaults.get("control"), "ComboBox.disabledForeground", uiDefaults.get("textInactiveText"), "ComboBox.font", fontUIResource, "ComboBox.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[] { "ESCAPE", "hidePopup", "PAGE_UP", "pageUpPassThrough", "PAGE_DOWN", "pageDownPassThrough", "HOME", "homePassThrough", "END", "endPassThrough", "DOWN", "selectNext", "KP_DOWN", "selectNext", "UP", "selectPrevious", "KP_UP", "selectPrevious", "SPACE", "spacePopup", "ENTER", "enterPressed" }), "TextField.caretForeground", colorUIResource2, "TextField.caretBlinkRate", 500, "TextField.inactiveForeground", uiDefaults.get("textInactiveText"), "TextField.selectionBackground", uiDefaults.get("textHighlight"), "TextField.selectionForeground", uiDefaults.get("textHighlightText"), "TextField.background", uiDefaults.get("window"), "TextField.foreground", uiDefaults.get("textText"), "TextField.font", fontUIResource3, "TextField.border", compoundBorderUIResource5, "TextField.focusInputMap", lazyInputMap, "PasswordField.caretForeground", colorUIResource2, "PasswordField.caretBlinkRate", 500, "PasswordField.inactiveForeground", uiDefaults.get("textInactiveText"), "PasswordField.selectionBackground", uiDefaults.get("textHighlight"), "PasswordField.selectionForeground", uiDefaults.get("textHighlightText"), "PasswordField.background", uiDefaults.get("window"), "PasswordField.foreground", uiDefaults.get("textText"), "PasswordField.font", fontUIResource4, "PasswordField.border", compoundBorderUIResource5, "PasswordField.focusInputMap", lazyInputMap2, "TextArea.caretForeground", colorUIResource2, "TextArea.caretBlinkRate", 500, "TextArea.inactiveForeground", uiDefaults.get("textInactiveText"), "TextArea.selectionBackground", uiDefaults.get("textHighlight"), "TextArea.selectionForeground", uiDefaults.get("textHighlightText"), "TextArea.background", uiDefaults.get("window"), "TextArea.foreground", uiDefaults.get("textText"), "TextArea.font", fontUIResource4, "TextArea.border", marginBorder, "TextArea.focusInputMap", lazyInputMap3, "TextPane.caretForeground", colorUIResource2, "TextPane.caretBlinkRate", 500, "TextPane.inactiveForeground", uiDefaults.get("textInactiveText"), "TextPane.selectionBackground", colorUIResource4, "TextPane.selectionForeground", uiDefaults.get("textHighlightText"), "TextPane.background", colorUIResource3, "TextPane.foreground", uiDefaults.get("textText"), "TextPane.font", fontUIResource2, "TextPane.border", marginBorder, "TextPane.focusInputMap", lazyInputMap3, "EditorPane.caretForeground", colorUIResource, "EditorPane.caretBlinkRate", 500, "EditorPane.inactiveForeground", uiDefaults.get("textInactiveText"), "EditorPane.selectionBackground", colorUIResource4, "EditorPane.selectionForeground", uiDefaults.get("textHighlightText"), "EditorPane.background", colorUIResource3, "EditorPane.foreground", uiDefaults.get("textText"), "EditorPane.font", fontUIResource2, "EditorPane.border", marginBorder, "EditorPane.focusInputMap", lazyInputMap3, "FileChooser.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[] { "ESCAPE", "cancelSelection" }), "ToolTip.border", bevelBorder2, "ToolTip.background", uiDefaults.get("info"), "ToolTip.foreground", uiDefaults.get("infoText"), "PopupMenu.selectedWindowInputMapBindings", { "ESCAPE", "cancel", "TAB", "cancel", "shift TAB", "cancel", "DOWN", "selectNext", "KP_DOWN", "selectNext", "UP", "selectPrevious", "KP_UP", "selectPrevious", "LEFT", "selectParent", "KP_LEFT", "selectParent", "RIGHT", "selectChild", "KP_RIGHT", "selectChild", "ENTER", "return", "SPACE", "return" }, "OptionPane.border", new BorderUIResource.EmptyBorderUIResource(10, 0, 0, 0), "OptionPane.messageAreaBorder", new BorderUIResource.EmptyBorderUIResource(10, 10, 12, 10), "OptionPane.buttonAreaBorder", new BorderUIResource.EmptyBorderUIResource(10, 10, 10, 10), "OptionPane.errorIcon", SwingUtilities2.makeIcon(this.getClass(), MotifLookAndFeel.class, "icons/Error.gif"), "OptionPane.informationIcon", SwingUtilities2.makeIcon(this.getClass(), MotifLookAndFeel.class, "icons/Inform.gif"), "OptionPane.warningIcon", SwingUtilities2.makeIcon(this.getClass(), MotifLookAndFeel.class, "icons/Warn.gif"), "OptionPane.questionIcon", SwingUtilities2.makeIcon(this.getClass(), MotifLookAndFeel.class, "icons/Question.gif"), "OptionPane.windowBindings", { "ESCAPE", "close" }, "RootPane.defaultButtonWindowKeyBindings", { "ENTER", "press", "released ENTER", "release", "ctrl ENTER", "press", "ctrl released ENTER", "release" } });
    }
}
