package sun.tools.jar.resources;

import java.util.ListResourceBundle;

public final class jar_fr extends ListResourceBundle
{
    @Override
    protected final Object[][] getContents() {
        return new Object[][] { { "error.bad.cflag", "L'indicateur c requiert la sp\u00e9cification d'un fichier manifeste ou d'un fichier d'entr\u00e9e." }, { "error.bad.eflag", "L'indicateur e et le fichier manifeste portant l'attribut Main-Class ne peuvent pas \u00eatre sp\u00e9cifi\u00e9s \nensemble." }, { "error.bad.option", "Une des options -{ctxu} doit \u00eatre sp\u00e9cifi\u00e9e." }, { "error.bad.uflag", "L'indicateur u requiert la sp\u00e9cification d'un fichier manifeste, d'un fichier d'entr\u00e9e ou d'un indicateur e." }, { "error.cant.open", "impossible d''ouvrir : {0} " }, { "error.create.dir", "{0} : impossible de cr\u00e9er le r\u00e9pertoire" }, { "error.create.tempfile", "Impossible de cr\u00e9er un fichier temporaire" }, { "error.illegal.option", "Option non admise : {0}" }, { "error.incorrect.length", "longueur incorrecte lors du traitement de : {0}" }, { "error.nosuch.fileordir", "{0} : fichier ou r\u00e9pertoire introuvable" }, { "error.write.file", "Erreur lors de l'\u00e9criture d'un fichier JAR existant" }, { "out.added.manifest", "manifeste ajout\u00e9" }, { "out.adding", "ajout : {0}" }, { "out.create", "  cr\u00e9\u00e9 : {0}" }, { "out.deflated", "(compression : {0} %)" }, { "out.extracted", "extrait : {0}" }, { "out.ignore.entry", "entr\u00e9e {0} ignor\u00e9e" }, { "out.inflated", " d\u00e9compress\u00e9 : {0}" }, { "out.size", "(entr\u00e9e = {0}) (sortie = {1})" }, { "out.stored", "(stockage : 0 %)" }, { "out.update.manifest", "manifeste mis \u00e0 jour" }, { "usage", "Syntaxe : jar {ctxui}[vfmn0PMe] [fichier-jar] [fichier-manifeste] [point-entr\u00e9e] [-C r\u00e9p] fichiers...\nOptions :\n    -c  cr\u00e9e une archive\n    -t  affiche la table des mati\u00e8res de l'archive\n    -x  extrait les fichiers nomm\u00e9s (ou tous les fichiers) de l'archive\n    -u  met \u00e0 jour l'archive existante\n    -v  g\u00e9n\u00e8re une version d\u00e9taill\u00e9e d'une sortie standard\n    -f  sp\u00e9cifie le nom du fichier archive\n    -m  inclut les informations de manifeste \u00e0 partir du fichier manifeste sp\u00e9cifi\u00e9\n    -n  effectue une normalisation Pack200 apr\u00e8s la cr\u00e9ation d'une archive\n    -e  sp\u00e9cifie le point d'entr\u00e9e d'une application en mode autonome \n        int\u00e9gr\u00e9e \u00e0 un fichier JAR ex\u00e9cutable\n    -0  stockage uniquement, pas de compression ZIP\n    -P  pr\u00e9serve les signes de d\u00e9but '/' (chemin absolu) et \"..\" (r\u00e9pertoire parent) dans les noms de fichier\n    -M  ne cr\u00e9e pas de fichier manifeste pour les entr\u00e9es\n    -i  g\u00e9n\u00e8re les informations d'index des fichiers JAR sp\u00e9cifi\u00e9s\n    -C  passe au r\u00e9pertoire sp\u00e9cifi\u00e9 et inclut le fichier suivant\nSi l'un des fichiers est un r\u00e9pertoire, celui-ci est trait\u00e9 r\u00e9cursivement.\nLes noms du fichier manifeste, du fichier archive et du point d'entr\u00e9e sont\nsp\u00e9cifi\u00e9s dans le m\u00eame ordre que celui des indicateurs m, f et e.\n\nExemple 1 : pour archiver deux fichiers de classe dans une archive intitul\u00e9e classes.jar : \n       jar cvf classes.jar Foo.class Bar.class \nExemple 2 : pour utiliser un fichier manifeste existant 'monmanifeste', puis archiver tous les\n           fichiers du r\u00e9pertoire foo/ dans 'classes.jar' : \n       jar cvfm classes.jar monmanifeste -C foo/ .\n" } };
    }
}
