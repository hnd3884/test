package org.owasp.esapi.reference.crypto;

import java.util.Hashtable;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.FileInputStream;
import java.io.File;
import java.util.Iterator;
import java.util.Properties;
import java.io.Reader;
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class EncryptedPropertiesUtils
{
    public static void main(final String[] args) throws Exception {
        String inFile = null;
        String outFile = null;
        boolean inFileEncrypted = true;
        boolean verbose = false;
        for (int i = 0; i < args.length; i += 2) {
            final String paramType = args[i];
            if ("--in".equals(paramType) && args.length >= i + 1) {
                inFile = args[i + 1];
            }
            else if ("--out".equals(paramType) && args.length >= i + 1) {
                outFile = args[i + 1];
            }
            else if ("--in-encrypted".equals(paramType) && args.length >= i + 1) {
                inFileEncrypted = Boolean.valueOf(args[i + 1]);
            }
            else if ("--verbose".equals(paramType) && args.length >= i + 1) {
                verbose = Boolean.valueOf(args[i + 1]);
            }
        }
        if (outFile == null) {
            outFile = inFile;
        }
        if (outFile == null) {
            System.out.println("You must specify an input file or output file");
            System.exit(1);
        }
        final Properties props = loadProperties(inFile, inFileEncrypted);
        final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String key = null;
        do {
            System.out.print("Enter key: ");
            key = br.readLine();
            if (props.containsKey(key)) {
                System.out.print("Key already exists. Replace? ");
                final String confirm = br.readLine();
                if (!"y".equals(confirm) && !"yes".equals(confirm)) {
                    continue;
                }
            }
            System.out.print("Enter value: ");
            final String value = br.readLine();
            addProperty(props, key, value);
        } while (key != null && key.length() > 0);
        storeProperties(outFile, props, "Encrypted Properties File generated by org.owasp.esapi.reference.crypto.EncryptedPropertiesUtils");
        System.out.println("Encrypted Properties file output to " + outFile);
        if (verbose) {
            for (final Object oKey : ((Hashtable<Object, V>)props).keySet()) {
                final String sKey = (String)oKey;
                final String value2 = props.getProperty(sKey);
                System.out.println("   " + sKey + "=" + value2);
            }
        }
    }
    
    public static Properties loadProperties(final String inFile, Boolean inFileEncrypted) throws IOException {
        if (inFileEncrypted == null) {
            inFileEncrypted = true;
        }
        Properties props;
        if (inFile != null) {
            final File f = new File(inFile);
            if (!f.exists()) {
                System.out.println("Input properties file not found. Creating new.");
                props = new ReferenceEncryptedProperties();
            }
            else {
                final String encrypted = inFileEncrypted ? "Encrypted" : "Plaintext";
                System.out.println(encrypted + " properties found in " + f.getAbsolutePath());
                Properties inProperties;
                if (inFileEncrypted) {
                    inProperties = new ReferenceEncryptedProperties();
                }
                else {
                    inProperties = new Properties();
                }
                InputStream in = null;
                try {
                    in = new FileInputStream(f);
                    inProperties.load(in);
                }
                finally {
                    try {
                        if (in != null) {
                            in.close();
                        }
                    }
                    catch (final Exception ex) {}
                }
                props = new ReferenceEncryptedProperties(inProperties);
            }
        }
        else {
            System.out.println("Input properties file not found. Creating new.");
            props = new ReferenceEncryptedProperties();
        }
        return props;
    }
    
    public static void storeProperties(final String outFile, final Properties props, final String message) throws Exception {
        OutputStream out = null;
        try {
            out = new FileOutputStream(new File(outFile));
            props.store(out, message);
        }
        finally {
            try {
                if (out != null) {
                    out.close();
                }
            }
            catch (final Exception ex) {}
        }
    }
    
    public static Object addProperty(final Properties props, final String key, final String value) {
        if (props != null && key != null && key.length() > 0 && value != null && value.length() > 0) {
            return props.setProperty(key, value);
        }
        return null;
    }
}
