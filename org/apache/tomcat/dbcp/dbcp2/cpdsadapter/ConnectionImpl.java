package org.apache.tomcat.dbcp.dbcp2.cpdsadapter;

import org.apache.tomcat.dbcp.dbcp2.DelegatingPreparedStatement;
import java.sql.PreparedStatement;
import org.apache.tomcat.dbcp.dbcp2.DelegatingCallableStatement;
import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Connection;
import org.apache.tomcat.dbcp.dbcp2.DelegatingConnection;

class ConnectionImpl extends DelegatingConnection<Connection>
{
    private final boolean accessToUnderlyingConnectionAllowed;
    private final PooledConnectionImpl pooledConnection;
    
    ConnectionImpl(final PooledConnectionImpl pooledConnection, final Connection connection, final boolean accessToUnderlyingConnectionAllowed) {
        super(connection);
        this.pooledConnection = pooledConnection;
        this.accessToUnderlyingConnectionAllowed = accessToUnderlyingConnectionAllowed;
    }
    
    @Override
    public void close() throws SQLException {
        if (!this.isClosedInternal()) {
            try {
                this.passivate();
            }
            finally {
                this.setClosedInternal(true);
                this.pooledConnection.notifyListeners();
            }
        }
    }
    
    @Override
    public CallableStatement prepareCall(final String sql) throws SQLException {
        this.checkOpen();
        try {
            return new DelegatingCallableStatement(this, this.pooledConnection.prepareCall(sql));
        }
        catch (final SQLException e) {
            this.handleException(e);
            return null;
        }
    }
    
    @Override
    public CallableStatement prepareCall(final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
        this.checkOpen();
        try {
            return new DelegatingCallableStatement(this, this.pooledConnection.prepareCall(sql, resultSetType, resultSetConcurrency));
        }
        catch (final SQLException e) {
            this.handleException(e);
            return null;
        }
    }
    
    @Override
    public CallableStatement prepareCall(final String sql, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
        this.checkOpen();
        try {
            return new DelegatingCallableStatement(this, this.pooledConnection.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
        }
        catch (final SQLException e) {
            this.handleException(e);
            return null;
        }
    }
    
    @Override
    public PreparedStatement prepareStatement(final String sql) throws SQLException {
        this.checkOpen();
        try {
            return new DelegatingPreparedStatement(this, this.pooledConnection.prepareStatement(sql));
        }
        catch (final SQLException e) {
            this.handleException(e);
            return null;
        }
    }
    
    @Override
    public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
        this.checkOpen();
        try {
            return new DelegatingPreparedStatement(this, this.pooledConnection.prepareStatement(sql, resultSetType, resultSetConcurrency));
        }
        catch (final SQLException e) {
            this.handleException(e);
            return null;
        }
    }
    
    @Override
    public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
        this.checkOpen();
        try {
            return new DelegatingPreparedStatement(this, this.pooledConnection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
        }
        catch (final SQLException e) {
            this.handleException(e);
            return null;
        }
    }
    
    @Override
    public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys) throws SQLException {
        this.checkOpen();
        try {
            return new DelegatingPreparedStatement(this, this.pooledConnection.prepareStatement(sql, autoGeneratedKeys));
        }
        catch (final SQLException e) {
            this.handleException(e);
            return null;
        }
    }
    
    @Override
    public PreparedStatement prepareStatement(final String sql, final int[] columnIndexes) throws SQLException {
        this.checkOpen();
        try {
            return new DelegatingPreparedStatement(this, this.pooledConnection.prepareStatement(sql, columnIndexes));
        }
        catch (final SQLException e) {
            this.handleException(e);
            return null;
        }
    }
    
    @Override
    public PreparedStatement prepareStatement(final String sql, final String[] columnNames) throws SQLException {
        this.checkOpen();
        try {
            return new DelegatingPreparedStatement(this, this.pooledConnection.prepareStatement(sql, columnNames));
        }
        catch (final SQLException e) {
            this.handleException(e);
            return null;
        }
    }
    
    public boolean isAccessToUnderlyingConnectionAllowed() {
        return this.accessToUnderlyingConnectionAllowed;
    }
    
    @Override
    public Connection getDelegate() {
        if (this.isAccessToUnderlyingConnectionAllowed()) {
            return this.getDelegateInternal();
        }
        return null;
    }
    
    @Override
    public Connection getInnermostDelegate() {
        if (this.isAccessToUnderlyingConnectionAllowed()) {
            return super.getInnermostDelegateInternal();
        }
        return null;
    }
}
