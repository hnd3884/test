package org.apache.tomcat.dbcp.dbcp2;

import java.sql.SQLWarning;
import java.sql.Connection;
import java.util.List;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.sql.SQLException;
import java.sql.Statement;

public class DelegatingStatement extends AbandonedTrace implements Statement
{
    private Statement statement;
    private DelegatingConnection<?> connection;
    private boolean closed;
    
    public DelegatingStatement(final DelegatingConnection<?> connection, final Statement statement) {
        super(connection);
        this.statement = statement;
        this.connection = connection;
    }
    
    public void activate() throws SQLException {
        if (this.statement instanceof DelegatingStatement) {
            ((DelegatingStatement)this.statement).activate();
        }
    }
    
    @Override
    public void addBatch(final String sql) throws SQLException {
        this.checkOpen();
        try {
            this.statement.addBatch(sql);
        }
        catch (final SQLException e) {
            this.handleException(e);
        }
    }
    
    @Override
    public void cancel() throws SQLException {
        this.checkOpen();
        try {
            this.statement.cancel();
        }
        catch (final SQLException e) {
            this.handleException(e);
        }
    }
    
    protected void checkOpen() throws SQLException {
        if (this.isClosed()) {
            throw new SQLException(this.getClass().getName() + " with address: \"" + this.toString() + "\" is closed.");
        }
    }
    
    @Override
    public void clearBatch() throws SQLException {
        this.checkOpen();
        try {
            this.statement.clearBatch();
        }
        catch (final SQLException e) {
            this.handleException(e);
        }
    }
    
    @Override
    public void clearWarnings() throws SQLException {
        this.checkOpen();
        try {
            this.statement.clearWarnings();
        }
        catch (final SQLException e) {
            this.handleException(e);
        }
    }
    
    @Override
    public void close() throws SQLException {
        if (this.isClosed()) {
            return;
        }
        final List<Exception> thrownList = new ArrayList<Exception>();
        try {
            if (this.connection != null) {
                this.connection.removeTrace(this);
                this.connection = null;
            }
            final List<AbandonedTrace> resultSetList = this.getTrace();
            if (resultSetList != null) {
                final ResultSet[] arr$;
                final ResultSet[] resultSets = arr$ = resultSetList.toArray(Utils.EMPTY_RESULT_SET_ARRAY);
                for (final ResultSet resultSet : arr$) {
                    if (resultSet != null) {
                        try {
                            resultSet.close();
                        }
                        catch (final Exception e) {
                            if (this.connection != null) {
                                this.connection.handleExceptionNoThrow(e);
                            }
                            thrownList.add(e);
                        }
                    }
                }
                this.clearTrace();
            }
            if (this.statement != null) {
                try {
                    this.statement.close();
                }
                catch (final Exception e2) {
                    if (this.connection != null) {
                        this.connection.handleExceptionNoThrow(e2);
                    }
                    thrownList.add(e2);
                }
            }
        }
        finally {
            this.closed = true;
            this.statement = null;
            if (!thrownList.isEmpty()) {
                throw new SQLExceptionList(thrownList);
            }
        }
    }
    
    @Override
    public void closeOnCompletion() throws SQLException {
        this.checkOpen();
        try {
            Jdbc41Bridge.closeOnCompletion(this.statement);
        }
        catch (final SQLException e) {
            this.handleException(e);
        }
    }
    
    @Override
    public boolean execute(final String sql) throws SQLException {
        this.checkOpen();
        this.setLastUsedInParent();
        try {
            return this.statement.execute(sql);
        }
        catch (final SQLException e) {
            this.handleException(e);
            return false;
        }
    }
    
    @Override
    public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
        this.checkOpen();
        this.setLastUsedInParent();
        try {
            return this.statement.execute(sql, autoGeneratedKeys);
        }
        catch (final SQLException e) {
            this.handleException(e);
            return false;
        }
    }
    
    @Override
    public boolean execute(final String sql, final int[] columnIndexes) throws SQLException {
        this.checkOpen();
        this.setLastUsedInParent();
        try {
            return this.statement.execute(sql, columnIndexes);
        }
        catch (final SQLException e) {
            this.handleException(e);
            return false;
        }
    }
    
    @Override
    public boolean execute(final String sql, final String[] columnNames) throws SQLException {
        this.checkOpen();
        this.setLastUsedInParent();
        try {
            return this.statement.execute(sql, columnNames);
        }
        catch (final SQLException e) {
            this.handleException(e);
            return false;
        }
    }
    
    @Override
    public int[] executeBatch() throws SQLException {
        this.checkOpen();
        this.setLastUsedInParent();
        try {
            return this.statement.executeBatch();
        }
        catch (final SQLException e) {
            this.handleException(e);
            throw new AssertionError();
        }
    }
    
    @Override
    public ResultSet executeQuery(final String sql) throws SQLException {
        this.checkOpen();
        this.setLastUsedInParent();
        try {
            return DelegatingResultSet.wrapResultSet(this, this.statement.executeQuery(sql));
        }
        catch (final SQLException e) {
            this.handleException(e);
            throw new AssertionError();
        }
    }
    
    @Override
    public int executeUpdate(final String sql) throws SQLException {
        this.checkOpen();
        this.setLastUsedInParent();
        try {
            return this.statement.executeUpdate(sql);
        }
        catch (final SQLException e) {
            this.handleException(e);
            return 0;
        }
    }
    
    @Override
    public int executeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
        this.checkOpen();
        this.setLastUsedInParent();
        try {
            return this.statement.executeUpdate(sql, autoGeneratedKeys);
        }
        catch (final SQLException e) {
            this.handleException(e);
            return 0;
        }
    }
    
    @Override
    public int executeUpdate(final String sql, final int[] columnIndexes) throws SQLException {
        this.checkOpen();
        this.setLastUsedInParent();
        try {
            return this.statement.executeUpdate(sql, columnIndexes);
        }
        catch (final SQLException e) {
            this.handleException(e);
            return 0;
        }
    }
    
    @Override
    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {
        this.checkOpen();
        this.setLastUsedInParent();
        try {
            return this.statement.executeUpdate(sql, columnNames);
        }
        catch (final SQLException e) {
            this.handleException(e);
            return 0;
        }
    }
    
    @Override
    protected void finalize() throws Throwable {
        this.close();
        super.finalize();
    }
    
    @Override
    public Connection getConnection() throws SQLException {
        this.checkOpen();
        return this.getConnectionInternal();
    }
    
    protected DelegatingConnection<?> getConnectionInternal() {
        return this.connection;
    }
    
    public Statement getDelegate() {
        return this.statement;
    }
    
    @Override
    public int getFetchDirection() throws SQLException {
        this.checkOpen();
        try {
            return this.statement.getFetchDirection();
        }
        catch (final SQLException e) {
            this.handleException(e);
            return 0;
        }
    }
    
    @Override
    public int getFetchSize() throws SQLException {
        this.checkOpen();
        try {
            return this.statement.getFetchSize();
        }
        catch (final SQLException e) {
            this.handleException(e);
            return 0;
        }
    }
    
    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        this.checkOpen();
        try {
            return DelegatingResultSet.wrapResultSet(this, this.statement.getGeneratedKeys());
        }
        catch (final SQLException e) {
            this.handleException(e);
            throw new AssertionError();
        }
    }
    
    public Statement getInnermostDelegate() {
        Statement s = this.statement;
        while (s instanceof DelegatingStatement) {
            s = ((DelegatingStatement)s).getDelegate();
            if (this == s) {
                return null;
            }
        }
        return s;
    }
    
    @Override
    public int getMaxFieldSize() throws SQLException {
        this.checkOpen();
        try {
            return this.statement.getMaxFieldSize();
        }
        catch (final SQLException e) {
            this.handleException(e);
            return 0;
        }
    }
    
    @Override
    public int getMaxRows() throws SQLException {
        this.checkOpen();
        try {
            return this.statement.getMaxRows();
        }
        catch (final SQLException e) {
            this.handleException(e);
            return 0;
        }
    }
    
    @Override
    public boolean getMoreResults() throws SQLException {
        this.checkOpen();
        try {
            return this.statement.getMoreResults();
        }
        catch (final SQLException e) {
            this.handleException(e);
            return false;
        }
    }
    
    @Override
    public boolean getMoreResults(final int current) throws SQLException {
        this.checkOpen();
        try {
            return this.statement.getMoreResults(current);
        }
        catch (final SQLException e) {
            this.handleException(e);
            return false;
        }
    }
    
    @Override
    public int getQueryTimeout() throws SQLException {
        this.checkOpen();
        try {
            return this.statement.getQueryTimeout();
        }
        catch (final SQLException e) {
            this.handleException(e);
            return 0;
        }
    }
    
    @Override
    public ResultSet getResultSet() throws SQLException {
        this.checkOpen();
        try {
            return DelegatingResultSet.wrapResultSet(this, this.statement.getResultSet());
        }
        catch (final SQLException e) {
            this.handleException(e);
            throw new AssertionError();
        }
    }
    
    @Override
    public int getResultSetConcurrency() throws SQLException {
        this.checkOpen();
        try {
            return this.statement.getResultSetConcurrency();
        }
        catch (final SQLException e) {
            this.handleException(e);
            return 0;
        }
    }
    
    @Override
    public int getResultSetHoldability() throws SQLException {
        this.checkOpen();
        try {
            return this.statement.getResultSetHoldability();
        }
        catch (final SQLException e) {
            this.handleException(e);
            return 0;
        }
    }
    
    @Override
    public int getResultSetType() throws SQLException {
        this.checkOpen();
        try {
            return this.statement.getResultSetType();
        }
        catch (final SQLException e) {
            this.handleException(e);
            return 0;
        }
    }
    
    @Override
    public int getUpdateCount() throws SQLException {
        this.checkOpen();
        try {
            return this.statement.getUpdateCount();
        }
        catch (final SQLException e) {
            this.handleException(e);
            return 0;
        }
    }
    
    @Override
    public SQLWarning getWarnings() throws SQLException {
        this.checkOpen();
        try {
            return this.statement.getWarnings();
        }
        catch (final SQLException e) {
            this.handleException(e);
            throw new AssertionError();
        }
    }
    
    protected void handleException(final SQLException e) throws SQLException {
        if (this.connection == null) {
            throw e;
        }
        this.connection.handleException(e);
    }
    
    @Override
    public boolean isClosed() throws SQLException {
        return this.closed;
    }
    
    protected boolean isClosedInternal() {
        return this.closed;
    }
    
    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        this.checkOpen();
        try {
            return Jdbc41Bridge.isCloseOnCompletion(this.statement);
        }
        catch (final SQLException e) {
            this.handleException(e);
            return false;
        }
    }
    
    @Override
    public boolean isPoolable() throws SQLException {
        this.checkOpen();
        try {
            return this.statement.isPoolable();
        }
        catch (final SQLException e) {
            this.handleException(e);
            return false;
        }
    }
    
    @Override
    public boolean isWrapperFor(final Class<?> iface) throws SQLException {
        return iface.isAssignableFrom(this.getClass()) || iface.isAssignableFrom(this.statement.getClass()) || this.statement.isWrapperFor(iface);
    }
    
    public void passivate() throws SQLException {
        if (this.statement instanceof DelegatingStatement) {
            ((DelegatingStatement)this.statement).passivate();
        }
    }
    
    protected void setClosedInternal(final boolean closed) {
        this.closed = closed;
    }
    
    @Override
    public void setCursorName(final String name) throws SQLException {
        this.checkOpen();
        try {
            this.statement.setCursorName(name);
        }
        catch (final SQLException e) {
            this.handleException(e);
        }
    }
    
    public void setDelegate(final Statement statement) {
        this.statement = statement;
    }
    
    @Override
    public void setEscapeProcessing(final boolean enable) throws SQLException {
        this.checkOpen();
        try {
            this.statement.setEscapeProcessing(enable);
        }
        catch (final SQLException e) {
            this.handleException(e);
        }
    }
    
    @Override
    public void setFetchDirection(final int direction) throws SQLException {
        this.checkOpen();
        try {
            this.statement.setFetchDirection(direction);
        }
        catch (final SQLException e) {
            this.handleException(e);
        }
    }
    
    @Override
    public void setFetchSize(final int rows) throws SQLException {
        this.checkOpen();
        try {
            this.statement.setFetchSize(rows);
        }
        catch (final SQLException e) {
            this.handleException(e);
        }
    }
    
    private void setLastUsedInParent() {
        if (this.connection != null) {
            this.connection.setLastUsed();
        }
    }
    
    @Override
    public void setMaxFieldSize(final int max) throws SQLException {
        this.checkOpen();
        try {
            this.statement.setMaxFieldSize(max);
        }
        catch (final SQLException e) {
            this.handleException(e);
        }
    }
    
    @Override
    public void setMaxRows(final int max) throws SQLException {
        this.checkOpen();
        try {
            this.statement.setMaxRows(max);
        }
        catch (final SQLException e) {
            this.handleException(e);
        }
    }
    
    @Override
    public void setPoolable(final boolean poolable) throws SQLException {
        this.checkOpen();
        try {
            this.statement.setPoolable(poolable);
        }
        catch (final SQLException e) {
            this.handleException(e);
        }
    }
    
    @Override
    public void setQueryTimeout(final int seconds) throws SQLException {
        this.checkOpen();
        try {
            this.statement.setQueryTimeout(seconds);
        }
        catch (final SQLException e) {
            this.handleException(e);
        }
    }
    
    @Override
    public synchronized String toString() {
        return (this.statement == null) ? "NULL" : this.statement.toString();
    }
    
    @Override
    public <T> T unwrap(final Class<T> iface) throws SQLException {
        if (iface.isAssignableFrom(this.getClass())) {
            return iface.cast(this);
        }
        if (iface.isAssignableFrom(this.statement.getClass())) {
            return iface.cast(this.statement);
        }
        return this.statement.unwrap(iface);
    }
}
